var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/App.html",[0,0.526,1,1.038]],["body/components/App.html",[0,0.979,1,2.148,2,1.888,3,0.226,4,0.255,5,1.191,6,1.647,7,1.647,8,0.226,9,3.736,10,0.226,11,4.78,12,2.458,13,1.647,14,2.368,15,2.84,16,5.59,17,2.361,18,1.789,19,6.164,20,1.789,21,5.59,22,0.487,23,0.021,24,0.721,25,2.22,26,3.008,27,0.255,28,0.558,29,3.796,30,1.476,31,2.76,32,1.647,33,1.789,34,2.107,35,1.647,36,2.449,37,1.647,38,0.979,39,1.647,40,1.398,41,1.558,42,2.323,43,1.476,44,0.859,45,1.398,46,1.647,47,1.476,48,1.647,49,1.398,50,1.191,51,1.476,52,1.647,53,1.476,54,1.647,55,1.558,56,1.647,57,1.476,58,1.191,59,2.449,60,1.476,61,1.647,62,1.476,63,1.191,64,1.476,65,1.87,66,1.558,67,1.476,68,1.325,69,1.476,70,0.908,71,1.476,72,1.647,73,1.647,74,0.016,75,0.016]],["title/components/BlankLayoutComponent.html",[0,0.526,40,1.155]],["body/components/BlankLayoutComponent.html",[0,0.954,1,2.115,2,1.788,3,0.208,4,0.235,5,1.096,6,1.515,7,1.515,8,0.208,10,0.208,11,4.528,13,1.515,14,2.346,18,1.694,20,1.694,22,0.516,23,0.021,24,0.663,25,2.042,27,0.235,28,0.514,32,1.515,33,1.694,34,1.996,35,1.515,36,2.372,37,1.515,38,0.927,39,1.515,40,2.149,41,2.442,42,2.232,43,1.357,44,0.79,45,1.286,46,1.515,47,1.357,48,1.515,49,1.286,50,1.096,51,1.357,52,1.515,53,1.357,54,2.232,55,1.433,56,1.515,57,1.357,58,1.614,59,2.372,60,1.357,61,1.515,62,1.357,63,1.096,64,1.357,65,1.796,66,1.433,67,1.357,68,1.219,69,1.357,70,1.231,71,2.209,72,1.515,73,1.515,74,0.015,75,0.015,76,3.437,77,2.538,78,2.538,79,2.111,80,3.975,81,4.528,82,5.295,83,4.333,84,5.295,85,5.295,86,4.528,87,5.295,88,5.295,89,1.297,90,3.344,91,1.788,92,5.295,93,4.023,94,5.295,95,4.499,96,4.077,97,3.645,98,2.042,99,0.544,100,0.32,101,5.295,102,5.295,103,3.645]],["title/injectables/CandidateService.html",[104,0.984,105,2.485]],["body/injectables/CandidateService.html",[3,0.182,4,0.205,8,0.182,10,0.25,15,1.785,22,0.588,23,0.021,24,0.58,27,0.205,28,0.618,30,1.186,38,0.615,44,0.95,63,1.975,65,1.807,70,1.239,74,0.014,75,0.014,91,2.38,99,0.612,100,0.28,104,1.318,105,4.709,106,1.574,107,3.003,108,1.459,109,2.629,110,2.629,111,2.457,112,1.797,113,3.329,114,3.329,115,1.823,116,4.835,117,4.102,118,1.725,119,4.078,120,1.725,121,4.078,122,4.835,123,3.674,124,4.135,125,2.167,126,1.906,127,2.839,128,1.725,129,3.174,130,0.333,131,1.318,132,1.797,133,2.355,134,4.729,135,4.835,136,1.283,137,3.512,138,3.674,139,4.835,140,2.066,141,1.928,142,3.329,143,3.054,144,4.102,145,1.124,146,0.482,147,1.01,148,2.457,149,1.062,150,2.457,151,3.329,152,1.122,153,4.835,154,3.054,155,3.512,156,3.054,157,1.909,158,2.052,159,2.218,160,1.574,161,1.909,162,1.324,163,1.484,164,2.052,165,2.218,166,2.218,167,3.003,168,2.218,169,3.054,170,3.003,171,1.674,172,2.825,173,1.186,174,1.909,175,1.928,176,2.825,177,1.823,178,2.418,179,2.052,180,1.124,181,3.512,182,0.908,183,3.003,184,2.668,185,2.418,186,2.668]],["title/injectables/CompanyService.html",[104,0.984,187,2.28]],["body/injectables/CompanyService.html",[3,0.184,4,0.208,8,0.184,10,0.252,15,1.805,22,0.598,23,0.021,24,0.586,27,0.208,28,0.454,38,0.622,44,0.958,65,1.816,68,2.181,70,1.013,74,0.014,75,0.014,91,2.282,99,0.572,100,0.283,104,1.329,106,1.592,108,1.587,109,2.649,110,2.649,111,2.476,112,1.722,115,1.837,117,4.122,118,2.311,121,3.781,123,3.703,124,4.168,125,2.184,126,1.56,127,2.323,128,1.738,129,3.187,130,0.337,131,1.329,132,1.804,133,2.442,136,1.291,138,3.703,140,1.916,141,1.943,142,3.355,143,3.078,145,1.137,146,0.485,147,1.022,148,3.042,149,1.071,150,3.187,152,1.131,154,3.078,157,3.024,158,2.076,159,2.244,160,1.592,161,3.024,162,2.097,163,2.35,164,2.076,165,2.244,166,2.244,168,2.244,169,3.078,170,3.038,171,1.693,172,2.847,173,1.2,174,1.931,175,1.417,176,2.847,180,1.137,182,0.918,183,3.038,184,2.699,185,2.446,186,2.699,187,4.33,188,3.038,189,1.402,190,2.476,191,3.703,192,2.853,193,4.874,194,4.092,195,4.874,196,4.874,197,3.553,198,3.355,199,2.323,200,3.703,201,4.874,202,3.553,203,3.078,204,1.693,205,3.038]],["title/components/DefaultLayoutComponent.html",[0,0.526,43,1.219]],["body/components/DefaultLayoutComponent.html",[0,0.975,1,2.131,2,1.873,3,0.223,4,0.252,5,1.176,6,1.626,7,1.626,8,0.223,10,0.223,12,2.211,13,1.626,14,2.365,18,1.775,20,1.775,22,0.534,23,0.021,24,0.712,27,0.252,28,0.551,32,1.626,33,1.775,34,2.09,35,1.626,36,2.438,37,1.626,38,0.971,39,1.626,40,1.381,41,1.539,42,2.31,43,2.313,44,1.369,45,1.381,46,1.626,47,2.184,48,1.626,49,1.381,50,1.176,51,1.457,52,1.626,53,1.457,54,1.626,55,1.539,56,1.626,57,1.457,58,1.176,59,2.438,60,2.184,61,1.626,62,1.457,63,1.176,64,1.457,65,1.859,66,1.539,67,1.457,68,1.309,69,1.457,70,0.897,71,1.457,72,1.626,73,1.626,74,0.015,75,0.015,78,2.725,79,2.211,80,4.085,97,3.818,100,0.344,206,3.69,207,3.278,208,2.211,209,4.315,210,4.315,211,4.213]],["title/interfaces/FieldOptions.html",[212,0.236,213,1.834]],["body/interfaces/FieldOptions.html",[0,0.597,1,0.487,3,0.088,4,0.099,8,0.088,10,0.088,14,0.542,17,1.494,18,0.542,20,0.542,22,0.357,23,0.021,24,0.279,27,0.239,28,0.216,30,0.939,33,1.31,38,0.619,44,0.805,45,0.89,50,0.964,70,0.94,74,0.008,75,0.008,79,1.41,89,1.534,98,0.861,99,0.745,100,0.36,115,1.831,118,0.604,120,2.261,130,0.161,131,0.758,132,0.487,141,0.675,146,0.559,147,1.017,152,1.582,173,1.527,180,0.542,182,1.572,189,1.749,190,2.469,199,1.951,208,1.632,212,0.296,213,1.413,214,0.487,215,1.166,216,2.377,217,3.747,218,3.036,219,3.242,220,2.645,221,1.34,222,3.054,223,3.866,224,3.866,225,2.457,226,3.248,227,1.756,228,1.325,229,2.457,230,4.155,231,3.385,232,4.072,233,4.583,234,1.756,235,3.446,236,1.914,237,2.818,238,2.377,239,1.287,240,0.989,241,1.166,242,3.69,243,1.511,244,1.585,245,1.413,246,1.246,247,1.174,248,1.914,249,1.914,250,3.774,251,1.287,252,2.435,253,1.287,254,2.112,255,2.112,256,2.112,257,1.448,258,3.068,259,3.024,260,2.377,261,1.448,262,3.434,263,1.448,264,1.448,265,1.448,266,2.457,267,0.989,268,3.866,269,1.448,270,1.287,271,3.501,272,4.583,273,2.66,274,1.448,275,3.024,276,1.448,277,1.448,278,1.448,279,2.377,280,2.435,281,2.377,282,1.448,283,1.166,284,3.534,285,1.07,286,1.448,287,1.448,288,1.448,289,2.377,290,1.448,291,1.448,292,1.448,293,2.377,294,1.448,295,2.435,296,3.024,297,1.923,298,1.448,299,1.448,300,2.377,301,1.448,302,1.448,303,1.448,304,2.377,305,1.448,306,1.448,307,2.377,308,1.448,309,1.448,310,1.166,311,1.287,312,1.448,313,1.448,314,2.377,315,1.448,316,3.024,317,1.448,318,1.448,319,2.377,320,1.448,321,4.155,322,2.838,323,3.024,324,4.155,325,3.345,326,2.838,327,3.345,328,4.155,329,4.155,330,4.155,331,4.155,332,1.448,333,1.448,334,2.377,335,1.448,336,3.024,337,1.448,338,1.448,339,2.377,340,1.448,341,3.024,342,2.79,343,3.024,344,1.448,345,0.807,346,1.246,347,2.377,348,1.448,349,1.07,350,1.448,351,1.448,352,1.448,353,1.448,354,1.448]],["title/components/FooterComponent.html",[0,0.526,47,1.219]],["body/components/FooterComponent.html",[0,0.977,1,2.132,2,1.88,3,0.224,4,0.359,5,1.184,6,1.637,7,1.637,8,0.224,10,0.224,12,2.22,13,1.637,14,2.366,18,1.389,20,1.782,22,0.379,23,0.021,24,0.717,27,0.254,28,0.555,31,3.516,32,1.637,33,1.782,34,2.099,35,1.637,36,2.443,37,1.637,38,0.975,39,1.637,40,1.389,41,1.549,42,2.317,43,1.466,44,0.853,45,1.389,46,1.637,47,2.316,48,1.637,49,1.389,50,1.184,51,1.466,52,1.637,53,1.466,54,1.637,55,1.549,56,1.637,57,1.466,58,1.184,59,2.443,60,1.466,61,1.637,62,1.466,63,1.184,64,1.466,65,1.864,66,1.549,67,1.466,68,1.317,69,1.466,70,0.903,71,1.466,72,1.637,73,1.637,74,0.016,75,0.016,79,2.22,86,5.544,100,0.346,208,2.22,211,4.23,355,3.713,356,5.568,357,5.568,358,5.568,359,5.568,360,5.568,361,5.568,362,5.568,363,5.568]],["title/components/FormLayoutComponent.html",[0,0.526,49,1.155]],["body/components/FormLayoutComponent.html",[0,0.692,1,1.88,2,1.014,3,0.096,4,0.109,5,0.507,6,0.701,7,0.701,8,0.096,10,0.096,13,0.701,14,2.072,18,0.96,20,0.96,22,0.377,23,0.021,24,0.307,26,2.066,27,0.175,28,0.482,29,3.644,32,0.701,33,0.96,34,1.131,35,0.701,36,1.631,37,0.701,38,0.935,39,0.701,40,1.385,41,1.07,42,1.422,43,0.628,44,0.59,45,0.595,46,0.701,47,0.628,48,0.701,49,1.624,50,1.924,51,0.628,52,0.701,53,0.628,54,0.701,55,0.664,56,0.701,57,0.628,58,1.028,59,1.631,60,0.628,61,0.701,62,0.628,63,0.507,64,0.628,65,1.827,66,0.664,67,0.628,68,0.564,69,0.628,70,0.387,71,1.989,72,0.701,73,0.701,74,0.008,75,0.008,77,1.175,78,1.175,79,1.197,80,4.401,83,2.066,89,1.719,97,2.066,98,0.945,99,0.704,100,0.239,118,1.07,120,1.982,127,3.382,130,0.176,136,1.598,145,1.519,146,0.535,147,1.365,149,1.323,152,1.367,177,2.22,182,1.312,189,0.535,208,1.504,212,0.196,218,0.945,220,3.281,221,1.379,222,2.925,225,2.903,226,3.119,227,3.372,234,2.999,235,2.759,236,2.597,237,3.495,240,1.087,241,1.281,243,1.631,245,0.945,266,2.353,267,2.528,273,2.288,283,2.066,284,3.676,322,3.119,327,3.676,364,5.051,365,4.199,366,2.28,367,4.566,368,4.566,369,2.566,370,3.226,371,3.226,372,1.631,373,3.001,374,4.057,375,4.566,376,4.566,377,3.226,378,3.701,379,3.001,380,4.566,381,3.001,382,4.221,383,4.668,384,4.662,385,2.579,386,3.001,387,4.221,388,3.001,389,1.86,390,3.701,391,1.86,392,1.413,393,1.86,394,1.413,395,2.128,396,1.86,397,1.86,398,1.86,399,1.86,400,1.86,401,2.566,402,3.288,403,1.86,404,1.86,405,1.86,406,1.86,407,1.86,408,1.86,409,1.86,410,1.86,411,1.86,412,1.087,413,1.753,414,1.281,415,2.066,416,1.281,417,1.591,418,2.566,419,1.591,420,1.591,421,1.591,422,2.566,423,1.591,424,1.591,425,1.281,426,1.591,427,1.591,428,1.591,429,2.566,430,1.591,431,1.591,432,2.566,433,1.591]],["title/interfaces/FormMessageOptions.html",[212,0.236,413,2.109]],["body/interfaces/FormMessageOptions.html",[0,0.695,1,0.774,3,0.139,4,0.157,8,0.139,10,0.139,14,0.862,18,0.862,20,0.862,22,0.46,23,0.021,24,0.444,26,1.854,27,0.234,28,0.511,29,3.082,40,1.279,41,0.96,44,0.529,49,1.279,50,1.933,58,0.734,65,1.6,71,1.782,74,0.011,75,0.011,77,1.7,78,1.7,79,1.074,80,4.411,83,1.854,89,1.72,97,1.854,98,1.368,99,0.739,100,0.319,118,1.426,120,2.106,127,3.448,130,0.255,131,1.09,136,1.308,146,0.349,152,1.308,177,2.305,182,1.526,189,1.15,208,1.901,212,0.312,214,0.774,218,2.031,220,3.364,221,1.355,222,2.815,225,3.064,226,3.324,227,3.56,234,3.011,235,3.211,236,3.283,237,3.283,240,1.573,241,1.854,243,1.464,245,2.031,266,2.173,267,2.335,273,2.559,283,1.854,284,3.881,322,3.293,327,3.881,364,2.046,365,1.7,367,2.302,368,2.302,370,2.302,371,2.302,374,4.283,375,4.82,376,4.82,377,2.302,378,3.419,380,4.82,382,4.009,383,4.561,384,4.487,385,2.423,387,4.009,390,3.419,401,2.302,402,3.037,412,1.573,413,3.082,414,1.854,415,2.752,416,1.854,417,2.302,418,3.419,419,2.302,420,2.302,421,2.302,422,3.419,423,2.302,424,2.302,425,1.854,426,2.302,427,2.302,428,2.302,429,3.419,430,2.302,431,2.302,432,3.419,433,2.302]],["title/components/HelloPage.html",[0,0.526,51,1.219]],["body/components/HelloPage.html",[0,0.911,1,2.029,2,1.42,3,0.149,4,0.169,5,0.786,6,1.087,7,1.087,8,0.149,10,0.257,13,1.087,14,2.245,18,1.346,20,1.346,22,0.506,23,0.021,24,0.476,25,1.465,27,0.169,28,0.369,31,2.656,32,1.087,33,1.346,34,1.585,35,1.087,36,2.056,37,1.087,38,0.955,39,1.087,40,0.923,41,1.029,42,1.87,43,1.842,44,0.567,45,0.923,46,1.087,47,0.974,48,1.087,49,0.923,50,0.786,51,1.842,52,1.087,53,0.974,54,1.087,55,1.029,56,1.087,57,0.974,58,0.786,59,2.056,60,0.974,61,1.087,62,0.974,63,0.786,64,0.974,65,1.505,66,1.029,67,0.974,68,0.875,69,0.974,70,0.6,71,1.676,72,1.087,73,1.087,74,0.012,75,0.012,96,3.416,100,0.23,103,4.167,112,1.209,118,1.945,120,1.5,126,0.923,127,3.38,130,0.274,136,1.346,145,1.346,146,0.367,147,1.209,149,1.373,152,1.405,175,1.677,180,1.346,182,1.283,189,1.568,190,2.137,192,2.004,207,2.191,221,1.304,228,3.163,273,2.414,372,2.286,395,2.713,412,1.685,434,5.176,435,1.568,436,3.596,437,5.455,438,4.191,439,4.244,440,3.416,441,3.195,442,4.244,443,2.456,444,3.755,445,6.249,446,2.884,447,3.195,448,3.195,449,2.656,450,3.195,451,3.596,452,2.884,453,2.884,454,5.454,455,2.884,456,2.884,457,5.454,458,2.884,459,2.884,460,2.884,461,2.884,462,1.465,463,2.884,464,2.895,465,1.685,466,2.884,467,4.866,468,2.884,469,2.884,470,4.205,471,2.884,472,2.191,473,2.884,474,2.191,475,2.884,476,4.205,477,2.884,478,2.884,479,1.986,480,2.884,481,2.884,482,2.884,483,2.884,484,2.466,485,3.596,486,4.205]],["title/injectables/HelloService.html",[104,0.984,438,2.28]],["body/injectables/HelloService.html",[3,0.224,4,0.254,8,0.224,10,0.224,22,0.584,23,0.021,24,0.717,27,0.254,28,0.711,30,1.466,44,1.094,63,1.518,74,0.016,75,0.016,91,1.88,99,0.446,100,0.346,104,1.518,106,1.946,108,1.364,112,1.767,125,2.495,128,1.986,129,3.406,130,0.412,131,1.518,132,1.928,133,2.629,136,1.426,144,3.833,146,0.379,149,1.424,152,1.292,154,3.516,156,3.516,157,2.36,158,2.536,159,2.742,160,1.946,161,3.341,162,2.317,163,1.834,164,2.536,165,2.742,166,2.742,168,2.742,171,2.069,172,3.253,173,1.466,175,1.731,176,3.253,177,1.637,178,2.989,179,2.536,182,1.588,189,1.601,192,3.089,221,1.094,437,4.925,438,3.882,467,4.669,485,5.544,487,3.713,488,4.342,489,5.568,490,3.713,491,3.833,492,3.713,493,3.713]],["title/classes/HttpService.html",[28,0.461,129,1.834]],["body/classes/HttpService.html",[3,0.227,4,0.257,8,0.227,10,0.227,12,2.236,22,0.539,23,0.021,24,0.724,27,0.257,28,0.859,30,1.483,44,0.863,74,0.016,75,0.016,99,0.669,100,0.35,108,1.595,111,3.308,129,2.849,130,0.416,131,1.529,132,2.056,133,2.782,136,1.301,146,0.489,152,1.019,157,3.656,158,3.276,160,2.513,161,3.048,162,2.454,173,2.199,175,2.236,179,4.018,203,4.111,221,1.102,280,3.86,285,2.773,326,3.276,462,2.231,465,2.565,494,3.754,495,2.849,496,2.236,497,4.946,498,4.482,499,3.048,500,5.607,501,3.139,502,4.39,503,4.39,504,3.276,505,4.39]],["title/interfaces/IFormService.html",[212,0.236,506,2.485]],["body/interfaces/IFormService.html",[3,0.191,4,0.216,5,1.547,8,0.191,10,0.191,22,0.495,23,0.021,27,0.216,50,1.979,74,0.014,75,0.014,89,1.557,99,0.701,100,0.294,108,1.225,109,2.719,113,3.444,114,2.541,120,2.024,126,2.212,140,1.181,146,0.495,149,1.247,150,3.634,163,2.113,173,1.689,177,2.139,180,1.816,199,3.124,204,1.759,212,0.416,214,1.061,225,2.006,227,3.159,228,3.444,229,3.799,385,2.542,449,3.583,464,3.444,465,2.156,506,3.444,507,3.156,508,4.277,509,4.811,510,5.002,511,5.002,512,5.674,513,5.002,514,3.8,515,4.277,516,3.156,517,5.002,518,4.758,519,3.156,520,3.829,521,5.002,522,5.002,523,5.002,524,2.804,525,4.852,526,2.922,527,3.084,528,4.852,529,5.674,530,3.691,531,4.852,532,3.156,533,3.906,534,3.691,535,3.691,536,3.691,537,3.156,538,3.156,539,3.691,540,3.156]],["title/interfaces/IGetAllHttpService.html",[212,0.236,541,2.485]],["body/interfaces/IGetAllHttpService.html",[3,0.235,4,0.266,5,1.24,8,0.235,10,0.235,22,0.548,23,0.021,27,0.266,74,0.016,75,0.016,89,1.405,99,0.589,100,0.363,108,1.405,112,1.649,115,2.162,126,2.111,128,2.24,130,0.432,132,1.308,133,2.486,136,1.056,140,1.835,141,2.287,146,0.605,149,1.26,150,3.455,151,3.949,160,2.039,162,2.162,171,2.168,177,1.715,182,1.482,199,2.733,204,2.168,212,0.431,214,1.308,231,3.622,496,1.814,501,3.351,541,3.949,542,4.358,543,2.873,544,5.64,545,5.274,546,3.622,547,4.905,548,5.64,549,4.55,550,4.905,551,4.905,552,3.972,553,3.455,554,3.132]],["title/interfaces/IGetHttpService.html",[212,0.236,491,2.485]],["body/interfaces/IGetHttpService.html",[3,0.246,4,0.278,5,1.298,8,0.246,10,0.246,22,0.559,23,0.021,27,0.278,74,0.016,75,0.016,99,0.606,100,0.38,108,1.446,112,1.697,115,2.224,126,2.145,128,2.287,130,0.452,132,1.369,133,2.527,136,1.105,140,1.888,146,0.585,149,1.297,150,3.501,160,2.134,162,2.224,171,2.269,177,1.795,199,2.812,204,2.269,212,0.438,214,1.369,231,3.727,438,3.727,491,4.063,496,1.899,501,3.406,542,4.483,543,3.007,544,5.732,547,5.047,552,3.746,553,3.501,554,3.278,555,4.072]],["title/interfaces/IHasLocalStorage.html",[212,0.236,556,2.28]],["body/interfaces/IHasLocalStorage.html",[3,0.226,4,0.256,8,0.226,10,0.226,22,0.488,23,0.021,27,0.256,28,0.715,74,0.016,75,0.016,89,1.593,99,0.706,100,0.492,112,1.609,128,1.996,130,0.415,131,1.526,146,0.488,152,1.299,173,2.196,212,0.439,214,1.258,221,1.213,326,3.269,496,2.231,497,4.251,498,3.853,499,3.042,504,3.269,518,3.853,556,3.534,557,3.742,558,3.432,559,3.325,560,5.56,561,3.981,562,4.785,563,5.596,564,3.853,565,5.596,566,5.596,567,5.596,568,4.785,569,5.596,570,3.896,571,4.94,572,4.341,573,4.251,574,5.596,575,5.596,576,4.476,577,3.853,578,3.742,579,3.013,580,3.325]],["title/interfaces/IHttpService.html",[212,0.236,501,1.834]],["body/interfaces/IHttpService.html",[3,0.244,4,0.275,8,0.244,10,0.244,12,2.338,22,0.411,23,0.021,27,0.275,30,1.592,74,0.016,75,0.016,99,0.686,100,0.376,108,1.636,130,0.447,131,1.599,132,2.096,133,2.795,146,0.511,157,3.807,160,2.628,161,3.188,162,2.21,173,2.256,203,3.703,212,0.449,214,1.355,221,1.255,326,3.425,465,2.753,495,2.979,496,2.338,497,4.455,498,4.037,499,3.188,501,2.979,504,3.425,581,4.03,582,5.014]],["title/interfaces/ILocalStorageItemService.html",[212,0.236,570,2.28]],["body/interfaces/ILocalStorageItemService.html",[3,0.274,4,0.309,5,1.443,8,0.274,10,0.274,23,0.021,27,0.309,74,0.018,75,0.018,99,0.646,100,0.422,108,1.541,111,2.689,146,0.461,149,1.163,152,1.46,212,0.411,214,1.522,519,4.525,552,3.676,558,2.999,561,3.65,564,3.643,570,3.974,583,4.525,584,4.02,585,5.292,586,4.525,587,4.332,588,5.292,589,4.78,590,3.676,591,4.02,592,5.292]],["title/interfaces/ILoginHttpService.html",[212,0.236,593,2.485]],["body/interfaces/ILoginHttpService.html",[3,0.201,4,0.228,5,1.414,8,0.201,10,0.268,17,2.19,22,0.542,23,0.021,27,0.228,38,0.682,58,1.992,70,1.479,74,0.014,75,0.014,90,3.926,99,0.684,100,0.413,108,1.523,109,2.819,110,2.819,112,1.491,121,3.926,126,1.866,128,2.079,130,0.369,133,1.954,136,0.904,140,2.072,141,2.325,142,3.57,143,3.275,145,1.246,146,0.564,147,1.12,148,3.158,149,1.422,150,3.289,162,1.954,171,1.856,177,1.468,180,1.246,192,2.471,198,3.57,199,2.471,200,3.94,204,1.856,212,0.381,214,1.12,221,0.765,345,1.856,346,2.324,474,2.959,501,3.158,526,2.275,543,2.459,552,3.029,553,2.635,556,2.459,558,1.856,579,2.681,582,4.434,590,3.406,591,2.959,593,3.57,594,4.434,595,4.434,596,4.434,597,3.94,598,5.186,599,5.186,600,6.216,601,3.894,602,4.434,603,3.406,604,3.894,605,2.275,606,3.894,607,3.894,608,3.894,609,3.33,610,3.894,611,4.28,612,2.117,613,5.186,614,3.33,615,3.33,616,3.894,617,3.33,618,2.117,619,3.33]],["title/interfaces/IRegisterHttpService.html",[169,2.28,212,0.236]],["body/interfaces/IRegisterHttpService.html",[3,0.228,4,0.257,8,0.228,10,0.291,22,0.568,23,0.021,27,0.257,38,0.771,65,1.704,70,1.499,74,0.016,75,0.016,91,2.392,99,0.636,100,0.351,112,1.616,118,2.324,121,4.116,125,2.518,128,2.324,130,0.418,133,2.118,136,1.022,138,4.269,140,2.086,141,2.599,142,3.868,143,3.549,145,1.409,146,0.384,147,1.267,148,3.311,149,1.235,150,3.421,163,2.614,169,3.549,171,2.099,173,1.898,180,1.409,192,2.678,198,3.868,199,2.678,200,4.269,203,3.549,204,2.099,212,0.44,214,1.267,496,2.24,501,3.421,516,3.766,543,2.782,555,3.766,603,3.282,620,4.805,621,4.805,622,5.619,623,3.106,624,4.404]],["title/components/ImageCardButtonComponent.html",[0,0.526,53,1.219]],["body/components/ImageCardButtonComponent.html",[0,0.772,1,1.963,2,1.212,3,0.121,4,0.136,5,0.636,6,0.88,7,0.88,8,0.121,10,0.121,13,0.88,14,2.168,18,1.149,20,1.149,22,0.381,23,0.021,24,0.385,25,1.186,27,0.136,28,0.298,29,3.678,32,0.88,33,1.149,34,1.353,35,0.88,36,1.85,37,0.88,38,1.053,39,0.88,40,0.747,41,0.833,42,1.648,43,0.788,44,0.459,45,0.747,46,0.88,47,0.788,48,0.88,49,0.747,50,0.636,51,0.788,52,0.88,53,1.889,54,2.72,55,2.59,56,0.88,57,0.788,58,0.636,59,1.85,60,0.788,61,0.88,62,0.788,63,0.636,64,0.788,65,1.326,66,0.833,67,0.788,68,0.708,69,0.788,70,0.485,71,0.788,72,0.88,73,0.88,74,0.01,75,0.01,79,1.431,95,3.322,96,4.139,98,1.186,99,0.714,100,0.186,120,1.995,130,0.221,132,1.608,136,1.584,145,1.79,146,0.559,147,1.608,149,1.428,152,1.508,177,2.108,182,1.445,208,1.431,221,1.443,222,2.665,235,3.04,273,2.592,322,3.267,366,2.727,372,1.951,383,4.334,392,1.774,394,1.774,395,2.507,414,1.607,415,2.471,416,1.607,625,5.876,626,5.22,627,1.996,628,3.589,629,5.297,630,5.297,631,5.297,632,5.297,633,3.589,634,5.593,635,3.589,636,5.593,637,3.589,638,3.589,639,5.593,640,3.589,641,4.249,642,5.593,643,2.335,644,2.335,645,2.335,646,2.335,647,2.335,648,2.335,649,2.335,650,2.335,651,2.335,652,2.335,653,2.335,654,2.335,655,2.335,656,2.335,657,2.335,658,2.335,659,2.335,660,2.335,661,3.589,662,2.335,663,2.335,664,3.589,665,2.335,666,2.335,667,3.589,668,2.335,669,2.335,670,3.589,671,2.335,672,2.335,673,3.589,674,2.335]],["title/injectables/IndustryService.html",[104,0.984,546,2.28]],["body/injectables/IndustryService.html",[3,0.228,4,0.257,8,0.228,10,0.228,15,2.238,22,0.568,23,0.021,24,0.727,27,0.257,28,0.718,30,1.488,44,1.104,63,1.532,74,0.016,75,0.016,91,1.898,99,0.636,100,0.351,104,1.532,106,1.974,108,1.376,112,1.779,128,2.004,129,3.421,130,0.418,131,1.532,132,1.936,133,2.538,136,1.436,144,3.868,146,0.384,149,1.432,151,3.868,152,1.304,154,3.549,156,3.549,157,2.394,158,2.573,159,2.782,160,1.974,161,2.394,162,1.66,165,2.782,166,2.782,168,2.782,171,2.099,172,3.282,173,1.488,174,2.394,175,1.756,176,3.282,177,1.66,178,3.032,179,2.573,182,1.138,192,2.678,221,1.104,437,4.951,467,3.346,490,3.766,492,3.766,493,3.766,541,3.868,546,3.908,548,5.573,675,3.766,676,4.805,677,5.619,678,4.805,679,4.404,680,5.619]],["title/classes/LocalStorageItemService.html",[28,0.461,681,2.485]],["body/classes/LocalStorageItemService.html",[3,0.2,4,0.226,5,1.054,8,0.2,10,0.267,22,0.54,23,0.021,24,0.638,27,0.226,28,0.825,30,2.094,38,0.677,74,0.014,75,0.014,89,1.264,99,0.664,100,0.308,108,0.947,111,2.622,113,3.553,120,2.072,130,0.367,136,1.348,145,1.237,146,0.54,147,1.112,149,0.85,152,1.574,173,1.743,175,2.575,179,3.773,180,1.237,182,0.999,191,2.938,212,0.337,221,1.015,280,3.553,285,2.442,310,4,372,2.806,395,1.733,462,1.965,498,2.662,504,3.015,527,2.806,552,3.773,556,3.915,558,3.387,560,3.307,561,4.015,564,4.268,570,3.669,571,2.938,572,3.669,573,2.938,576,4.268,577,4,578,3.307,579,3.553,580,2.938,584,2.938,586,4.414,587,3.553,589,5.047,590,3.881,681,3.553,682,4.968,683,5.161,684,3.867,685,3.867,686,3.867,687,3.867,688,3.26,689,3.867,690,3.867,691,3.307,692,3.867,693,3.867,694,3.867,695,3.867,696,3.867,697,3.867,698,3.867,699,3.867]],["title/injectables/LocalStorageService.html",[104,0.984,572,2.28]],["body/injectables/LocalStorageService.html",[3,0.2,4,0.226,8,0.2,10,0.3,12,2.058,15,1.965,22,0.507,23,0.021,24,0.638,27,0.226,28,0.494,38,0.904,74,0.014,75,0.014,89,1.264,99,0.53,100,0.308,104,1.407,106,1.733,108,1.518,110,2.806,111,2.622,112,1.783,115,1.945,117,4.268,118,1.841,120,1.841,130,0.367,136,1.198,145,1.652,146,0.45,147,1.484,149,1.276,152,1.694,174,2.102,180,1.859,182,0.999,221,1.306,369,4.414,395,2.313,518,3.553,527,2.806,550,4.414,558,3.359,559,2.938,561,3.832,564,3.553,572,4.352,576,4.853,577,3.553,579,3.553,587,4.744,590,3.773,591,3.921,597,3.921,691,4.414,700,4.968,701,5.161,702,5.161,703,5.161,704,5.161,705,5.161,706,5.161,707,5.161,708,5.161,709,5.161,710,3.867,711,5.161,712,5.161,713,5.161,714,3.867,715,3.867,716,3.867,717,3.867]],["title/components/LoginPage.html",[0,0.526,57,1.219]],["body/components/LoginPage.html",[0,0.788,1,1.977,2,1.254,3,0.126,4,0.143,5,0.665,6,0.92,7,0.92,8,0.126,10,0.126,12,1.792,13,0.92,14,2.185,17,1.568,18,1.188,20,1.188,22,0.516,23,0.021,24,0.403,25,1.24,27,0.143,28,0.312,30,1.696,32,0.92,33,1.188,34,1.399,35,0.92,36,1.893,37,0.92,38,0.65,39,0.92,40,0.781,41,0.87,42,1.694,43,0.824,44,1.228,45,1.607,46,0.92,47,0.824,48,0.92,49,1.607,50,1.737,51,0.824,52,0.92,53,0.824,54,0.92,55,0.87,56,0.92,57,1.922,58,1.847,59,1.893,60,0.824,61,0.92,62,0.824,63,0.665,64,0.824,65,1.726,66,0.87,67,0.824,68,0.74,69,0.824,70,1.346,71,2.151,72,0.92,73,0.92,74,0.01,75,0.01,79,1.48,89,0.909,91,1.922,93,1.854,99,0.683,100,0.195,103,1.68,108,0.598,112,1.068,115,0.92,125,2.014,126,0.781,127,2.393,130,0.231,136,1.043,140,1.729,141,2.582,149,1.187,152,0.861,162,0.92,180,1.188,182,0.959,189,1.444,192,1.163,208,2.002,213,2.745,217,2.745,218,1.24,219,2.169,220,2.575,225,1.326,228,2.819,229,1.326,243,1.326,244,2.014,246,1.094,247,2.121,273,2.269,297,2.443,325,1.68,342,2.443,345,1.769,346,1.664,365,1.541,382,2.82,383,3.72,385,2.891,387,3.414,395,1.664,412,1.425,413,2.169,435,1.326,441,2.82,443,2.169,449,3.594,462,1.24,479,1.68,499,2.018,520,2.169,524,1.854,526,2.625,527,1.326,533,1.68,553,2.283,603,1.425,605,2.169,612,1.326,618,1.326,641,2.82,688,2.345,718,4.294,719,3.918,720,3.457,721,3.843,722,5.691,723,2.44,724,3.457,725,3.457,726,2.345,727,2.556,728,2.556,729,2.44,730,5.403,731,3.712,732,2.44,733,2.44,734,1.854,735,4.294,736,2.169,737,2.086,738,2.44,739,2.086,740,3.094,741,2.086,742,2.086,743,3.175,744,2.086,745,2.44,746,1.68,747,2.556,748,3.175,749,3.175,750,2.44,751,3.712,752,2.44,753,2.44,754,2.086,755,2.44,756,3.175,757,3.175,758,3.175,759,3.175,760,3.843,761,3.843,762,3.175,763,2.086,764,2.086,765,2.086,766,2.086,767,2.086,768,2.44,769,2.086,770,2.086,771,2.086,772,2.44,773,1.854,774,2.086,775,2.44,776,1.541,777,1.68,778,1.68,779,1.68,780,1.68,781,2.556,782,1.68,783,1.68,784,3.457]],["title/interfaces/LoginRequest.html",[212,0.236,736,2.109]],["body/interfaces/LoginRequest.html",[3,0.264,4,0.298,8,0.264,10,0.264,23,0.021,27,0.298,58,1.392,70,1.461,74,0.017,75,0.017,99,0.633,130,0.484,131,1.679,140,1.634,146,0.537,189,1.468,212,0.432,214,1.468,221,1.403,244,2.288,245,2.594,247,3.05,495,2.594,496,2.036,736,3.863,740,4.972,785,4.366,786,6.866,787,5.216]],["title/injectables/LoginService.html",[104,0.984,719,2.485]],["body/injectables/LoginService.html",[3,0.153,4,0.173,8,0.153,10,0.222,17,1.251,22,0.582,23,0.021,24,0.489,27,0.173,28,0.548,30,1.448,38,0.519,44,0.99,58,1.881,70,1.446,74,0.012,75,0.012,90,3.487,99,0.647,100,0.236,104,1.169,106,1.327,108,1.61,109,2.33,110,2.33,111,2.178,112,1.685,113,3.802,115,1.616,117,2.951,118,1.529,123,3.257,125,1.921,126,1.767,128,1.529,129,2.977,130,0.281,131,1.169,132,1.812,133,2.517,136,1.418,140,1.767,143,2.707,144,3.802,145,0.948,146,0.511,147,0.852,149,0.942,152,1.169,154,2.707,156,3.487,157,2.739,158,1.73,159,1.87,160,1.327,161,2.739,162,1.899,165,1.87,166,1.87,168,1.87,171,1.411,175,1.181,176,2.504,177,1.116,178,2.039,179,1.73,180,0.948,182,1.302,184,2.25,185,2.039,186,2.25,189,1.233,190,2.178,191,3.257,192,2.043,204,1.411,212,0.399,247,1.811,310,3.802,345,1.411,346,1.327,372,2.33,462,1.505,558,2.043,561,2.33,573,3.257,589,4.195,590,1.73,593,4.034,595,3.666,596,3.666,602,3.666,603,2.504,605,1.73,611,4.876,612,2.33,614,3.666,617,4.308,618,1.61,619,4.308,719,4.442,736,3.423,737,2.532,739,2.532,740,2.951,787,3.257,788,2.532,789,4.287,790,4.287,791,4.287,792,4.287,793,4.656,794,4.287,795,2.961,796,4.722,797,5.522,798,4.287,799,3.666,800,4.287,801,2.961,802,3.666,803,3.666,804,4.287,805,2.961,806,4.287,807,4.287,808,2.961,809,2.961,810,2.961,811,2.961,812,2.961,813,2.961,814,2.961,815,5.038,816,2.961,817,2.961,818,2.961,819,2.961,820,2.961]],["title/interfaces/MessageResponse.html",[163,1.525,212,0.236]],["body/interfaces/MessageResponse.html",[3,0.28,4,0.316,8,0.28,10,0.28,23,0.021,27,0.316,74,0.018,75,0.018,126,1.73,127,3.481,130,0.513,131,1.737,146,0.556,148,2.747,163,2.862,185,4.387,212,0.443,214,1.555,221,1.375,495,2.747,496,2.156,821,4.623]],["title/components/NavbarComponent.html",[0,0.526,60,1.219]],["body/components/NavbarComponent.html",[0,0.971,1,2.128,2,1.856,3,0.22,4,0.249,5,1.16,6,1.604,7,1.604,8,0.22,10,0.22,12,2.191,13,1.604,14,2.361,18,1.759,20,1.759,22,0.531,23,0.021,24,0.702,25,2.162,27,0.249,28,0.544,31,3.471,32,1.604,33,1.759,34,2.071,35,1.604,36,2.425,37,1.604,38,0.963,39,1.604,40,1.362,41,1.517,42,2.294,43,1.437,44,0.836,45,1.362,46,1.604,47,1.437,48,1.604,49,1.362,50,1.16,51,1.437,52,1.604,53,1.437,54,1.604,55,1.517,56,1.604,57,1.437,58,1.16,59,2.425,60,2.304,61,1.604,62,1.437,63,1.16,64,1.437,65,1.846,66,1.517,67,1.437,68,1.291,69,1.437,70,0.885,71,1.437,72,1.604,73,1.604,74,0.015,75,0.015,79,2.191,95,4.625,96,4.191,98,2.162,100,0.339,103,3.783,208,2.191,211,4.175,442,5.206,787,4.175,822,3.638,823,5.496,824,5.496,825,5.496,826,5.496,827,4.7,828,5.496,829,4.175]],["title/components/RegisterCandidatePage.html",[0,0.526,62,1.219]],["body/components/RegisterCandidatePage.html",[0,0.877,1,1.963,2,1.214,3,0.121,4,0.137,5,0.638,6,0.881,7,0.881,8,0.121,10,0.121,12,1.433,13,0.881,14,2.169,17,1.849,18,1.15,20,1.15,22,0.538,23,0.021,24,0.386,27,0.137,28,0.299,30,1.659,32,0.881,33,1.15,34,1.355,35,0.881,36,1.851,37,0.881,38,1.153,39,0.881,40,0.748,41,0.834,42,1.65,43,0.79,44,1.26,45,1.572,46,0.881,47,0.79,48,0.881,49,0.748,50,1.747,51,0.79,52,0.881,53,0.79,54,0.881,55,0.834,56,0.881,57,0.79,58,0.638,59,1.851,60,0.79,61,0.881,62,1.89,63,1.832,64,0.79,65,1.768,66,0.834,67,0.79,68,1.328,69,1.659,70,1.102,71,1.79,72,0.881,73,0.881,74,0.01,75,0.01,79,1.433,89,0.88,91,1.968,93,1.777,99,0.668,100,0.186,105,3.013,108,1.203,110,1.271,112,1.033,115,0.881,118,0.834,119,2.27,125,2.202,126,1.401,130,0.222,132,1.524,136,1.016,141,2.399,145,0.748,146,0.204,147,0.672,149,1.165,152,1.396,163,1.518,164,1.366,167,2,175,1.433,182,0.929,187,1.477,190,1.188,208,1.433,213,2.693,217,2.961,218,2.496,219,3.514,220,2.867,222,2.341,228,2.667,244,2.872,246,1.048,247,0.988,266,1.954,270,1.777,273,2.232,297,2.379,342,2.379,345,1.713,346,1.611,385,1.826,395,1.962,435,1.271,440,3.65,443,2.099,444,3.382,447,2.73,448,2.73,462,1.188,479,1.61,499,1.954,509,3.65,520,2.099,527,1.271,603,1.366,612,1.271,618,1.271,623,2.341,688,2.27,720,3.382,724,3.013,725,3.382,726,2.27,727,2.474,728,2.474,734,1.777,746,1.61,747,2.474,776,2.27,777,1.61,778,1.61,779,1.61,780,1.61,781,3.013,782,1.61,783,1.61,784,3.65,830,4.201,831,2.339,832,2.339,833,3.594,834,4.377,835,3.073,836,2.339,837,1.777,838,2.339,839,2,840,2,841,2.099,842,1.777,843,1.366,844,1.777,845,3.102,846,3.732,847,4.201,848,4.201,849,4.201,850,4.201,851,3.073,852,3.073,853,3.073,854,2.339,855,1.777,856,2,857,2.339,858,3.594,859,3.594,860,3.594,861,2,862,2.339,863,2.339,864,2,865,2,866,3.594,867,3.594,868,3.594,869,3.594,870,3.594,871,3.594,872,2.339,873,2.339,874,2,875,2,876,1.61,877,1.61,878,1.61,879,3.073,880,2.339,881,1.61]],["title/interfaces/RegisterCandidateRequest.html",[119,2.28,212,0.236]],["body/interfaces/RegisterCandidateRequest.html",[3,0.231,4,0.261,8,0.231,10,0.231,22,0.389,23,0.021,27,0.261,38,1.147,63,1.97,74,0.016,75,0.016,91,2.212,99,0.71,100,0.356,119,4.136,128,2.335,130,0.423,131,1.544,132,1.629,140,1.813,146,0.571,189,1.629,212,0.459,214,1.283,221,1.436,244,2.539,495,2.878,496,2.259,504,3.309,623,3.292,845,3.578,846,4.304,847,4.844,848,4.844,849,4.844,851,5.6,852,5.6,853,5.6,861,5.6,882,3.815,883,5.665,884,5.665,885,4.844]],["title/components/RegisterChoicePage.html",[0,0.526,64,1.219]],["body/components/RegisterChoicePage.html",[0,0.996,1,2.113,2,1.778,3,0.206,4,0.233,5,1.086,6,1.502,7,1.502,8,0.206,10,0.206,13,1.502,14,2.344,18,1.685,20,1.685,22,0.514,23,0.021,24,0.657,27,0.233,28,0.509,32,1.502,33,1.685,34,1.984,35,1.502,36,2.364,37,1.502,38,0.922,39,1.502,40,2.007,41,1.421,42,2.222,43,1.346,44,0.783,45,1.275,46,1.502,47,1.346,48,1.502,49,1.275,50,1.086,51,1.346,52,1.502,53,2.119,54,1.502,55,1.878,56,1.502,57,1.346,58,1.086,59,2.364,60,1.346,61,1.502,62,1.991,63,1.608,64,2.263,65,2.167,66,2.474,67,1.991,68,1.789,69,1.346,70,1.226,71,2.203,72,1.502,73,1.502,74,0.015,75,0.015,77,2.516,81,4.502,91,2.343,99,0.541,100,0.318,177,1.984,231,3.962,250,3.325,384,4,412,2.328,435,2.166,443,3.076,626,3.027,886,3.407,887,5.265,888,5.265,889,5.265,890,5.265,891,3.984,892,3.984,893,3.984,894,5.265]],["title/components/RegisterCompanyPage.html",[0,0.526,67,1.219]],["body/components/RegisterCompanyPage.html",[0,0.823,1,1.933,2,1.134,3,0.111,4,0.125,5,0.584,6,0.807,7,0.807,8,0.111,10,0.263,12,1.339,13,0.807,14,2.133,17,1.98,18,1.074,20,1.074,22,0.524,23,0.021,24,0.354,27,0.125,28,0.274,30,2.029,32,0.807,33,1.074,34,1.265,35,0.807,36,1.766,37,0.807,38,0.946,39,0.807,40,0.686,41,0.764,42,1.561,43,0.724,44,1.231,45,1.5,46,0.807,47,0.724,48,0.807,49,0.686,50,1.676,51,0.724,52,0.807,53,0.724,54,0.807,55,0.764,56,0.807,57,0.724,58,0.584,59,1.766,60,0.724,61,0.807,62,0.724,63,0.584,64,0.724,65,1.772,66,0.764,67,1.583,68,1.982,69,1.719,70,1.173,71,1.719,72,0.807,73,0.807,74,0.009,75,0.009,79,1.339,89,1.014,91,1.974,99,0.678,100,0.171,108,1.014,110,1.165,112,0.965,114,1.475,115,0.807,118,0.764,125,2.42,126,1.325,130,0.203,132,0.965,136,1.088,140,1.325,141,2.33,145,0.686,146,0.187,147,0.616,148,1.706,149,1.24,152,1.394,175,1.339,177,1.265,180,0.686,182,1.211,187,2.96,189,0.616,190,1.089,194,2.12,198,2.311,205,1.832,208,1.339,213,2.586,217,3.053,218,2.969,219,3.414,220,2.785,221,0.66,222,2.233,228,2.573,235,1.825,244,2.281,245,2.381,246,0.96,247,0.905,249,1.475,250,3.41,258,2.615,262,1.628,266,2.251,267,1.961,273,2.33,297,2.548,322,1.251,342,1.825,345,1.6,346,1.505,349,1.353,385,2.381,395,1.856,425,1.475,435,1.165,439,1.832,440,2.85,443,1.961,444,3.227,447,2.551,448,2.551,449,2.12,450,2.551,451,2.871,462,1.089,479,1.475,499,1.825,509,3.227,520,1.961,527,1.165,545,2.551,546,3.214,603,1.251,612,1.165,618,1.165,623,2.233,676,4.997,688,2.12,720,3.227,724,2.85,725,3.227,726,2.12,727,2.311,728,2.311,734,1.628,746,1.475,747,2.311,776,2.12,777,1.475,778,1.475,779,1.475,780,1.475,781,3.227,782,1.475,783,1.475,784,3.717,835,2.871,837,1.628,839,1.832,840,1.832,841,2.738,842,1.628,843,1.251,844,1.628,855,1.628,856,1.832,864,1.832,865,1.832,874,1.832,875,1.832,876,1.475,877,1.475,878,1.475,879,1.832,881,1.475,895,4.352,896,4.687,897,2.142,898,2.142,899,4.997,900,2.142,901,4.687,902,3.357,903,1.832,904,2.142,905,2.142,906,2.142,907,2.142,908,1.832,909,2.871,910,2.142,911,2.142,912,2.142,913,2.142,914,2.142,915,3.357,916,3.357,917,2.142,918,3.357,919,2.142,920,2.142,921,3.357,922,3.357,923,2.142,924,2.142,925,3.357,926,3.357,927,4.14,928,4.14,929,2.142,930,2.142,931,2.142,932,1.832,933,2.142,934,2.142,935,2.142,936,2.142]],["title/interfaces/RegisterCompanyRequest.html",[194,2.28,212,0.236]],["body/interfaces/RegisterCompanyRequest.html",[3,0.23,4,0.26,8,0.23,10,0.363,22,0.388,23,0.021,27,0.26,38,1.209,68,2.191,74,0.016,75,0.016,91,2.21,99,0.709,100,0.355,128,2.334,130,0.423,131,1.543,132,1.627,140,1.811,146,0.571,189,1.627,194,4.133,212,0.459,214,1.281,221,1.436,244,2.536,495,2.875,496,2.257,504,3.306,623,3.29,845,3.574,885,4.839,899,5.904,908,4.839,909,5.596,937,3.809,938,5.659,939,5.659,940,5.659,941,5.659]],["title/interfaces/RegisterRequest.html",[212,0.236,623,1.72]],["body/interfaces/RegisterRequest.html",[3,0.252,4,0.285,8,0.252,10,0.252,22,0.426,23,0.021,27,0.285,70,1.406,74,0.017,75,0.017,89,1.468,91,2.023,99,0.666,100,0.389,128,2.411,130,0.463,131,1.633,140,1.917,146,0.426,189,1.723,212,0.468,214,1.403,217,3.044,221,1.274,246,3.238,247,2.531,495,3.044,496,2.389,621,5.123,623,3.222,736,4.126,845,3.784,942,4.173,943,5.991,944,5.991,945,5.991,946,5.991]],["title/injectables/RegisterService.html",[104,0.984,841,2.109]],["body/injectables/RegisterService.html",[2,1.626,3,0.18,4,0.204,8,0.18,10,0.18,15,1.773,22,0.562,23,0.021,24,0.576,27,0.204,28,0.446,38,0.965,50,1.503,70,1.34,71,1.626,74,0.013,75,0.013,89,1.179,91,2.434,99,0.61,100,0.278,104,1.313,106,1.564,108,1.455,109,2.617,111,2.446,114,4.09,118,1.966,120,1.966,121,3.752,125,2.158,126,1.764,127,1.663,130,0.331,136,1.495,140,1.117,145,1.764,146,0.481,147,1.585,148,2.446,149,1.211,150,3.019,163,2.79,164,2.039,172,2.812,173,1.179,174,1.897,175,1.392,180,1.117,182,1.424,189,1.709,199,2.294,204,1.663,212,0.315,228,3.255,229,3.503,234,4.171,267,3.22,273,2.369,349,2.204,372,2.617,385,2.8,395,2.47,464,2.403,465,2.039,506,3.314,518,2.403,520,3.22,525,4.117,526,3.22,528,5.081,531,5.511,532,2.984,533,3.794,537,2.984,538,5.081,540,2.984,553,3.167,623,3.147,837,2.651,841,3.22,947,2.984,948,4.814,949,5.511,950,5.511,951,5.511,952,3.49,953,3.49,954,3.49,955,3.49,956,3.49,957,3.49,958,3.49,959,3.49,960,3.49,961,3.49,962,3.49,963,3.49,964,3.49,965,5.511,966,3.49,967,3.49,968,3.49,969,3.49,970,3.49,971,3.49]],["title/components/RegisterUserPageComponent.html",[0,0.526,69,1.219]],["body/components/RegisterUserPageComponent.html",[0,0.819,1,1.856,2,0.964,3,0.09,4,0.102,5,0.477,6,0.659,7,0.659,8,0.09,10,0.09,13,0.659,14,2.044,17,2.198,18,0.914,20,0.914,22,0.473,23,0.021,24,0.289,25,0.889,26,2.49,27,0.102,28,0.224,29,3.77,30,1.95,32,0.659,33,0.914,34,1.076,35,0.659,36,1.573,37,0.659,38,0.634,39,0.659,40,0.56,41,0.624,42,1.363,43,0.591,44,1.225,45,1.336,46,0.659,47,0.591,48,0.659,49,1.336,50,1.791,51,0.591,52,0.659,53,0.591,54,0.659,55,0.624,56,0.659,57,0.591,58,1.254,59,1.573,60,0.591,61,0.659,62,0.964,63,0.778,64,0.591,65,1.752,66,0.624,67,0.964,68,1.097,69,1.41,70,1.386,71,2.132,72,0.659,73,0.659,74,0.008,75,0.008,80,3.116,83,2.874,89,1.414,91,2.28,99,0.669,100,0.139,108,1.022,109,0.951,112,0.821,115,0.659,120,1.29,125,2.333,126,0.914,127,2.351,130,0.166,136,1.208,140,1.472,141,2.547,145,0.56,146,0.249,147,0.503,149,1.193,151,1.204,152,1.34,163,1.528,164,1.022,175,1.138,180,0.914,182,0.935,189,0.821,190,1.838,213,2.337,217,2.644,218,2.337,219,3.171,220,2.817,221,1.067,222,1.989,225,0.951,228,2.587,229,1.966,235,2.682,243,0.951,244,2.061,245,2.121,246,2.517,247,2.548,248,1.204,266,1.552,273,2.303,297,3.139,311,2.169,325,1.204,342,2.5,345,1.361,346,1.28,349,1.105,365,1.105,366,2.169,372,1.552,385,2.121,392,1.329,394,1.329,395,1.871,402,2.169,412,1.022,413,1.668,414,1.204,415,1.966,416,1.204,435,0.951,436,4.219,440,2.49,443,1.668,444,2.874,449,1.803,450,2.169,462,0.889,464,2.49,465,1.022,472,2.169,484,1.496,499,0.951,508,2.442,509,2.49,520,1.668,524,1.329,526,1.668,527,0.951,533,1.204,553,0.889,612,0.951,615,2.442,618,0.951,641,2.748,688,1.803,720,2.874,721,3.093,724,3.397,725,2.874,726,1.803,727,1.966,728,1.966,735,3.569,740,3.583,741,1.496,742,1.496,743,1.496,744,1.496,746,1.204,747,1.966,748,2.442,749,3.093,754,1.496,756,3.093,757,3.093,758,3.093,759,3.093,760,3.093,761,3.933,762,2.442,763,1.496,764,1.496,765,1.496,766,1.496,767,1.496,769,1.496,770,1.496,771,1.496,773,2.169,774,2.442,776,1.803,777,1.204,778,1.204,779,1.204,780,1.204,781,2.49,782,1.204,783,1.204,784,3.866,829,2.169,841,2.687,842,1.329,843,1.022,844,1.329,855,1.329,876,1.204,877,1.204,878,1.204,881,1.204,903,1.496,972,4.642,973,2.855,974,4.174,975,2.855,976,2.855,977,2.855,978,4.174,979,2.855,980,1.749,981,1.749,982,2.855,983,2.855,984,1.749,985,1.749,986,1.749,987,1.749,988,1.749,989,1.749,990,1.749,991,1.749,992,1.749,993,1.749,994,1.749,995,1.749,996,1.749,997,2.855,998,4.174,999,4.174,1000,3.617,1001,3.617,1002,1.749,1003,1.749,1004,1.749,1005,1.749,1006,1.749,1007,1.749,1008,1.749,1009,2.855,1010,1.749,1011,2.855,1012,1.749,1013,1.749,1014,1.749,1015,1.749,1016,1.749,1017,1.749,1018,1.749,1019,1.749,1020,1.749,1021,1.749,1022,1.749,1023,1.496,1024,1.496,1025,3.569,1026,1.496,1027,2.442,1028,1.496,1029,1.496,1030,1.496,1031,2.855,1032,1.749,1033,1.749]],["title/interfaces/SelectOption.html",[212,0.236,258,2.28]],["body/interfaces/SelectOption.html",[0,0.601,1,0.493,3,0.089,4,0.1,8,0.089,10,0.089,14,0.549,17,1.507,18,0.549,20,0.549,22,0.36,23,0.021,24,0.283,27,0.241,28,0.219,30,0.949,33,1.32,38,0.625,44,0.811,45,0.899,50,0.973,70,0.858,74,0.008,75,0.008,79,1.12,89,1.539,98,0.872,99,0.746,100,0.363,115,1.843,118,0.612,120,2.268,130,0.163,131,0.766,132,0.493,141,0.684,146,0.554,147,0.808,152,1.586,173,1.537,180,0.549,182,1.578,189,1.755,190,2.484,199,1.966,208,1.815,212,0.298,213,0.872,214,0.493,215,1.181,216,1.467,217,3.739,218,2.986,219,2.659,220,2.169,221,1.343,222,3.03,223,3.528,224,3.528,225,2.243,226,3.031,227,1.084,228,0.818,229,2.243,230,3.893,231,3.26,232,3.921,233,4.414,234,1.775,235,3.456,236,1.935,237,2.84,238,2.403,239,1.303,240,1.002,241,1.181,242,3.709,243,1.528,244,1.599,245,1.428,246,1.259,247,1.187,248,1.935,249,1.935,250,3.855,251,1.303,252,2.457,253,1.303,254,2.135,255,2.135,256,2.135,257,1.467,258,3.402,259,4.18,260,3.528,261,2.403,262,4.092,263,1.467,264,1.467,265,1.467,266,2.474,267,1.002,268,3.893,269,1.467,270,1.303,271,3.528,272,4.606,273,2.667,274,1.467,275,3.052,276,1.467,277,1.467,278,1.467,279,2.403,280,2.457,281,2.403,282,1.467,283,1.181,284,3.553,285,1.084,286,1.467,287,1.467,288,1.467,289,2.403,290,1.467,291,1.467,292,1.467,293,2.403,294,1.467,295,2.457,296,3.052,297,1.94,298,1.467,299,1.467,300,2.403,301,1.467,302,1.467,303,1.467,304,2.403,305,1.467,306,1.467,307,2.403,308,1.467,309,1.467,310,1.181,311,1.303,312,1.467,313,1.467,314,2.403,315,1.467,316,3.052,317,1.467,318,1.467,319,2.403,320,1.467,321,4.18,322,2.856,323,3.052,324,4.18,325,3.366,326,2.856,327,3.366,328,4.18,329,4.18,330,4.18,331,4.18,332,1.467,333,1.467,334,2.403,335,1.467,336,3.052,337,1.467,338,1.467,339,2.403,340,1.467,341,3.052,342,2.806,343,3.052,344,1.467,345,0.818,346,1.259,347,2.403,348,1.467,349,1.084,350,1.467,351,1.467,352,1.467,353,1.467,354,1.467]],["title/injectables/StringService.html",[104,0.984,843,2.109]],["body/injectables/StringService.html",[3,0.143,4,0.162,8,0.143,10,0.295,15,1.409,17,2.522,22,0.242,23,0.021,24,0.458,27,0.162,28,0.354,29,3.488,38,0.938,44,0.954,74,0.011,75,0.011,89,1.001,99,0.664,100,0.221,104,1.114,106,1.243,108,1.001,112,1.175,120,1.73,130,0.263,132,1.822,133,1.045,134,4.578,136,1.242,141,1.629,145,1.713,146,0.467,147,1.539,149,1.465,152,0.644,172,2.387,173,0.937,174,1.508,180,1.826,182,1.671,221,1.454,246,2.898,247,2.731,273,2.38,342,2.221,345,2.942,346,2.898,425,1.91,472,4.536,545,2.107,612,1.508,618,3.245,773,2.107,776,3.77,799,2.372,843,2.834,845,2.581,846,3.105,850,3.495,876,2.813,877,2.813,878,2.813,881,2.813,932,2.372,1023,4.149,1024,4.149,1025,5.77,1026,4.88,1027,5.417,1028,4.88,1029,4.149,1030,4.88,1034,2.372,1035,4.086,1036,4.086,1037,6.928,1038,4.086,1039,4.086,1040,4.086,1041,4.086,1042,4.086,1043,2.774,1044,5.97,1045,5.105,1046,4.086,1047,4.086,1048,5.353,1049,4.852,1050,6.748,1051,4.086,1052,2.774,1053,4.086,1054,2.774,1055,4.086,1056,5.97,1057,2.774,1058,4.086,1059,4.086,1060,4.086,1061,4.086,1062,5.353,1063,4.086,1064,4.086,1065,4.086,1066,4.086,1067,2.774,1068,4.086,1069,2.774,1070,4.852,1071,2.774,1072,4.086,1073,2.774,1074,2.774,1075,2.774,1076,2.774,1077,2.774,1078,2.774,1079,2.774,1080,2.774,1081,2.774,1082,4.086,1083,4.086,1084,2.774,1085,2.774,1086,2.774,1087,2.774,1088,2.774,1089,2.774,1090,2.774,1091,2.774,1092,2.774,1093,2.774,1094,2.774,1095,2.774,1096,2.774,1097,2.774]],["title/interfaces/TokenResponse.html",[212,0.236,605,2.109]],["body/interfaces/TokenResponse.html",[3,0.273,4,0.308,8,0.273,10,0.273,23,0.021,27,0.308,58,1.828,74,0.018,75,0.018,89,1.291,90,4.234,99,0.542,126,1.687,130,0.5,131,1.712,146,0.46,148,2.679,189,1.516,212,0.438,214,1.516,221,1.318,495,2.679,496,2.102,526,3.916,605,3.916,611,5.044,1098,4.508,1099,5.272,1100,6.704]],["title/injectables/TokenService.html",[104,0.984,793,2.485]],["body/injectables/TokenService.html",[3,0.249,4,0.282,8,0.249,10,0.249,15,2.449,22,0.518,23,0.021,24,0.795,27,0.282,28,0.616,30,2.008,74,0.017,75,0.017,89,1.579,90,4.448,99,0.662,100,0.384,104,1.621,106,2.16,108,1.649,112,1.71,128,2.401,174,2.62,176,2.816,326,3.473,558,3.073,561,3.66,568,5.085,571,3.662,576,3.318,577,3.318,580,3.662,587,3.318,597,4.517,611,4.761,681,4.761,793,4.094,796,5.085,802,5.085,803,5.085,1101,4.122,1102,5.946,1103,5.946,1104,4.82,1105,4.82]],["title/coverage.html",[1106,3.743]],["body/coverage.html",[0,1.038,1,0.987,8,0.178,9,2.936,23,0.021,28,0.608,40,1.099,43,1.16,45,1.099,47,1.16,49,1.099,51,1.16,53,1.16,55,1.225,57,1.16,60,1.16,62,1.16,63,0.936,64,1.16,66,1.225,67,1.16,68,1.041,69,1.16,70,0.714,74,0.013,75,0.013,76,2.936,77,2.168,78,3.726,104,1.855,105,2.364,107,2.936,118,1.225,119,2.168,129,1.745,146,0.54,163,1.45,169,2.168,187,2.168,188,2.936,194,2.168,206,2.936,207,2.609,212,0.472,213,1.745,215,4.266,226,1.866,240,2.006,242,2.364,252,2.364,258,2.168,355,2.936,364,3.616,365,3.006,413,2.006,434,2.936,435,3.486,438,2.168,487,2.936,491,2.364,494,2.936,501,1.745,506,2.364,507,2.936,541,2.364,542,3.616,543,3.726,546,2.168,553,1.745,554,2.364,556,2.168,557,2.936,558,1.636,559,3.616,561,2.588,570,2.168,572,2.168,581,2.936,583,2.936,584,3.616,593,2.364,594,2.936,605,2.006,609,5.045,620,2.936,623,1.636,625,2.936,626,2.609,627,2.936,675,2.936,681,2.364,682,2.936,700,2.936,718,2.936,719,2.364,736,2.006,785,2.936,788,2.936,793,2.364,821,2.936,822,2.936,830,2.936,841,2.006,843,2.006,882,2.936,886,2.936,895,2.936,937,2.936,942,2.936,947,2.936,972,2.936,1034,2.936,1098,2.936,1101,2.936,1106,2.609,1107,3.434,1108,3.434,1109,3.434,1110,7.56,1111,7.223,1112,2.936,1113,3.434,1114,2.936,1115,4.76,1116,3.434,1117,6.575,1118,6.575,1119,3.434,1120,6.703,1121,6.197,1122,3.616,1123,2.936,1124,2.936,1125,2.936,1126,3.434,1127,3.434]],["title/dependencies.html",[1128,2.578,1129,3.713]],["body/dependencies.html",[23,0.021,24,0.903,25,2.78,74,0.018,75,0.018,98,2.78,204,2.607,239,4.156,295,3.766,1129,4.678,1130,7.253,1131,5.47,1132,5.47,1133,5.47,1134,5.47,1135,5.47,1136,5.47,1137,5.47,1138,5.47,1139,5.47,1140,5.47,1141,5.47,1142,5.47]],["title/miscellaneous/functions.html",[1143,1.761,1144,3.713]],["body/miscellaneous/functions.html",[10,0.286,23,0.02,28,0.825,38,0.968,74,0.018,75,0.018,130,0.524,145,1.768,146,0.482,147,1.589,149,1.418,220,3.258,221,1.086,226,3.508,240,3.994,295,3.804,474,4.198,1045,4.725,1122,4.198,1123,4.725,1143,3.228,1144,4.725,1145,4.725,1146,5.525,1147,5.525]],["title/index.html",[130,0.286,562,2.578,1148,3.014]],["body/index.html",[12,0.891,23,0.019,31,3.743,58,0.609,63,0.946,68,1.052,74,0.01,75,0.01,115,2.071,156,1.411,160,1.555,162,0.842,192,2.285,203,1.411,212,0.146,246,1.001,374,1.697,514,4.887,515,1.911,552,2.027,558,1.653,827,1.911,1106,1.697,1149,6.773,1150,2.234,1151,2.234,1152,2.234,1153,6.086,1154,3.469,1155,2.234,1156,2.234,1157,5.494,1158,2.234,1159,5.191,1160,3.469,1161,6.334,1162,6.865,1163,1.911,1164,2.234,1165,3.469,1166,2.234,1167,2.234,1168,2.234,1169,7.149,1170,3.469,1171,2.234,1172,5.191,1173,3.469,1174,2.234,1175,2.234,1176,6.433,1177,3.469,1178,5.927,1179,2.234,1180,3.469,1181,5.927,1182,2.234,1183,2.234,1184,2.234,1185,3.469,1186,2.234,1187,7.202,1188,2.234,1189,2.234,1190,2.234,1191,2.234,1192,2.234,1193,2.234,1194,2.234,1195,2.234,1196,2.234,1197,2.234,1198,3.469,1199,3.469,1200,2.234,1201,2.234,1202,3.469,1203,2.234,1204,4.795,1205,3.469,1206,3.469,1207,2.234,1208,4.795,1209,2.234,1210,3.469,1211,3.469,1212,2.234,1213,4.795,1214,2.234,1215,3.469,1216,2.234,1217,2.234,1218,2.234,1219,4.795,1220,3.469,1221,4.253,1222,2.234,1223,6.086,1224,3.469,1225,3.469,1226,5.191,1227,2.234,1228,2.234,1229,2.234,1230,5.733,1231,3.469,1232,3.469,1233,3.469,1234,2.234,1235,3.469,1236,3.469,1237,2.234,1238,3.469,1239,2.234,1240,3.469,1241,5.494,1242,2.234,1243,3.469,1244,2.234,1245,2.234,1246,4.253,1247,2.234,1248,3.469,1249,5.494,1250,2.234,1251,2.234,1252,2.234,1253,2.234,1254,3.469,1255,4.795,1256,2.234,1257,3.469,1258,5.191,1259,4.795,1260,4.795,1261,4.253,1262,2.234,1263,3.469,1264,2.234,1265,3.469,1266,5.191,1267,2.234,1268,2.234,1269,2.234,1270,4.795,1271,5.733,1272,3.469,1273,3.469,1274,4.795,1275,3.469,1276,2.234,1277,3.469,1278,2.234,1279,5.733,1280,3.469,1281,3.469,1282,2.234,1283,3.469,1284,2.234,1285,2.234,1286,2.234,1287,2.234,1288,6.594,1289,4.795,1290,2.234,1291,2.234,1292,3.469,1293,2.234,1294,2.234,1295,3.469,1296,2.234,1297,2.234,1298,2.234,1299,2.234,1300,3.469,1301,6.086,1302,2.234,1303,5.494,1304,2.234,1305,2.234,1306,3.469,1307,3.469,1308,2.234,1309,2.234,1310,1.911,1311,2.234,1312,3.469,1313,2.234,1314,2.234,1315,2.234,1316,3.469,1317,2.234,1318,2.234,1319,3.469,1320,2.234,1321,2.234,1322,1.911,1323,4.253,1324,2.234,1325,2.234,1326,5.191,1327,2.234,1328,2.234,1329,2.234,1330,3.469,1331,2.234,1332,2.234,1333,2.234,1334,2.234,1335,2.234,1336,2.234,1337,2.234,1338,2.234,1339,2.234,1340,2.234,1341,2.234,1342,2.234,1343,2.234,1344,2.234,1345,2.234,1346,3.469,1347,2.234,1348,4.795,1349,3.469,1350,2.234,1351,3.469,1352,3.469,1353,2.234,1354,2.234,1355,2.234,1356,2.234,1357,3.469,1358,2.234,1359,2.234,1360,2.234,1361,2.234,1362,2.234,1363,2.234,1364,2.234,1365,2.234,1366,2.234,1367,2.234,1368,2.234,1369,2.234,1370,2.234,1371,2.234,1372,2.234,1373,2.234,1374,2.234,1375,3.469,1376,2.234,1377,2.234,1378,2.234,1379,2.234,1380,2.234,1381,3.469,1382,2.234,1383,2.234,1384,3.469,1385,4.253,1386,4.253,1387,2.234,1388,2.234,1389,2.234,1390,2.234,1391,2.234,1392,2.234,1393,2.234,1394,2.234,1395,2.234,1396,2.234,1397,2.234,1398,2.234,1399,2.234,1400,4.253,1401,2.234,1402,2.234,1403,2.234,1404,3.469,1405,2.234,1406,2.234,1407,3.469,1408,2.234,1409,3.469,1410,2.234,1411,3.469,1412,3.469,1413,2.234,1414,2.234,1415,2.234,1416,4.253,1417,3.469,1418,2.234,1419,2.234,1420,2.234,1421,2.234,1422,4.253,1423,2.234,1424,2.234,1425,4.253,1426,3.469,1427,2.234,1428,3.469,1429,2.234,1430,2.234,1431,2.234,1432,2.234,1433,2.234,1434,2.234,1435,2.234,1436,2.234,1437,2.234,1438,2.234,1439,3.469,1440,2.234,1441,2.234,1442,2.234,1443,2.234,1444,2.234,1445,3.469,1446,4.253,1447,2.234,1448,2.234,1449,2.234,1450,2.234,1451,2.234,1452,2.234,1453,2.234,1454,2.234,1455,2.234,1456,2.234,1457,2.234,1458,2.234,1459,2.234,1460,2.234,1461,2.234,1462,2.234,1463,2.234,1464,2.234,1465,2.234,1466,2.234,1467,2.234,1468,2.234,1469,2.234,1470,2.234,1471,3.469,1472,2.234,1473,2.234,1474,2.234,1475,2.234,1476,3.469,1477,2.234,1478,2.234,1479,2.234,1480,2.234,1481,2.234,1482,2.234,1483,2.234,1484,2.234,1485,2.234,1486,2.234,1487,2.234,1488,2.234,1489,2.234,1490,3.469,1491,2.234,1492,2.234,1493,2.234,1494,2.234]],["title/modules.html",[1495,4.213]],["body/modules.html",[23,0.019,74,0.019,75,0.019,1495,5.027]],["title/overview.html",[1496,4.213]],["body/overview.html",[2,1.952,23,0.019,74,0.019,75,0.019,106,2.591,214,1.662,285,3.65,1322,4.943,1496,4.943,1497,5.78,1498,5.78,1499,5.78]],["title/properties.html",[131,1.184,1128,2.578]],["body/properties.html",[23,0.02,74,0.019,75,0.019,100,0.466,131,1.593,1500,5.841]],["title/miscellaneous/typealiases.html",[1143,1.761,1501,4.342]],["body/miscellaneous/typealiases.html",[3,0.295,23,0.021,33,1.444,44,1.122,50,1.556,74,0.016,75,0.016,89,1.611,126,1.826,130,0.428,132,1.298,133,2.151,146,0.604,162,1.701,173,1.927,189,1.799,208,2.495,215,3.107,217,2.899,221,1.122,222,2.719,226,3.402,229,3.102,232,3.428,242,4.308,243,3.402,244,2.022,245,3.341,246,2.557,247,2.41,248,4.527,249,3.928,250,3.604,251,3.428,252,4.308,253,3.428,254,4.335,255,4.335,256,4.335,297,3.102,346,2.557,551,4.879,553,3.446,554,3.928,590,3.656,678,3.859,726,2.85,1122,3.428,1124,3.859,1125,4.879,1143,2.636,1145,3.859,1163,3.859,1502,4.512,1503,5.706,1504,4.512,1505,5.706,1506,4.512,1507,4.512,1508,4.512,1509,4.512,1510,4.512,1511,4.512,1512,4.512,1513,4.512,1514,4.512]],["title/miscellaneous/variables.html",[1143,1.761,1515,3.713]],["body/miscellaneous/variables.html",[12,2.717,17,2.315,23,0.021,44,1.077,74,0.018,75,0.018,89,1.343,120,1.955,130,0.52,146,0.478,152,1.272,441,4.88,514,4.164,829,4.164,1112,4.687,1114,5.493,1143,3.202,1310,4.687,1515,4.687,1516,5.481,1517,5.481,1518,5.481,1519,5.481,1520,5.481,1521,5.481,1522,5.481,1523,5.481]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":425,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/RegisterCompanyPage.html":{},"injectables/StringService.html":{}}}],["0.1",{"_index":467,"title":{},"body":{"components/HelloPage.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{}}}],["0.1.1",{"_index":211,"title":{},"body":{"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/NavbarComponent.html":{}}}],["0.15.0",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":99,"title":{},"body":{"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{}}}],["0.2.0",{"_index":1500,"title":{},"body":{"properties.html":{}}}],["1",{"_index":1302,"title":{},"body":{"index.html":{}}}],["1.0.4",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1497,"title":{},"body":{"overview.html":{}}}],["17",{"_index":1499,"title":{},"body":{"overview.html":{}}}],["2",{"_index":1322,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0",{"_index":363,"title":{},"body":{"components/FooterComponent.html":{}}}],["2.3.0",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1120,"title":{},"body":{"coverage.html":{}}}],["20.0.6",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":769,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["4/4",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["4200",{"_index":1285,"title":{},"body":{"index.html":{}}}],["443:443",{"_index":1419,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":1121,"title":{},"body":{"coverage.html":{}}}],["6.7.2",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1023,"title":{},"body":{"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["8/8",{"_index":1119,"title":{},"body":{"coverage.html":{}}}],["80:80",{"_index":1418,"title":{},"body":{"index.html":{}}}],["9",{"_index":1498,"title":{},"body":{"overview.html":{}}}],["93",{"_index":1432,"title":{},"body":{"index.html":{}}}],["9])(?=.*[a",{"_index":1080,"title":{},"body":{"injectables/StringService.html":{}}}],["9]+\\.)+[a",{"_index":1074,"title":{},"body":{"injectables/StringService.html":{}}}],["9]{1,3}\\.[0",{"_index":1070,"title":{},"body":{"injectables/StringService.html":{}}}],["9]{1,3}])|(([a",{"_index":1071,"title":{},"body":{"injectables/StringService.html":{}}}],["_",{"_index":932,"title":{},"body":{"components/RegisterCompanyPage.html":{},"injectables/StringService.html":{}}}],["_errormessage",{"_index":475,"title":{},"body":{"components/HelloPage.html":{}}}],["_fieldhelpertext",{"_index":317,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_fieldiconleft",{"_index":332,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_fieldiconright",{"_index":337,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_fieldlabel",{"_index":287,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_fieldmode",{"_index":298,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_fieldname",{"_index":291,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_fieldplaceholder",{"_index":302,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_fieldtype",{"_index":252,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["_fieldtype).value",{"_index":353,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_fieldvalue",{"_index":312,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_greeting",{"_index":469,"title":{},"body":{"components/HelloPage.html":{}}}],["_imagealt",{"_index":666,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["_imageheight",{"_index":669,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["_imageurl",{"_index":663,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["_imagewidth",{"_index":672,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["_message",{"_index":421,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["_mode",{"_index":417,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["_options",{"_index":274,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_primarybuttontext",{"_index":428,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["_required",{"_index":344,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["_response",{"_index":764,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["_routerlink",{"_index":660,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["_secondarybuttontext",{"_index":431,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["_title",{"_index":414,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/RegisterUserPageComponent.html":{}}}],["abaixo",{"_index":1215,"title":{},"body":{"index.html":{}}}],["abertos",{"_index":1481,"title":{},"body":{"index.html":{}}}],["abordagem",{"_index":1305,"title":{},"body":{"index.html":{}}}],["abordagens",{"_index":1299,"title":{},"body":{"index.html":{}}}],["abrir",{"_index":1488,"title":{},"body":{"index.html":{}}}],["abstract",{"_index":179,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LoginService.html":{}}}],["accessors",{"_index":372,"title":{},"body":{"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"classes/LocalStorageItemService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["acessível",{"_index":1281,"title":{},"body":{"index.html":{}}}],["acordo",{"_index":1456,"title":{},"body":{"index.html":{}}}],["actual_component",{"_index":73,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["additional",{"_index":284,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/SelectOption.html":{}}}],["again",{"_index":774,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["ainda",{"_index":1240,"title":{},"body":{"index.html":{}}}],["alias",{"_index":609,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"coverage.html":{}}}],["aliases",{"_index":1502,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowing",{"_index":887,"title":{},"body":{"components/RegisterChoicePage.html":{}}}],["already",{"_index":1009,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["alt",{"_index":634,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["ambiente",{"_index":1295,"title":{},"body":{"index.html":{}}}],["ambientes",{"_index":1341,"title":{},"body":{"index.html":{}}}],["anchor",{"_index":92,"title":{},"body":{"components/BlankLayoutComponent.html":{}}}],["angular",{"_index":514,"title":{},"body":{"interfaces/IFormService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["angular's",{"_index":191,"title":{},"body":{"injectables/CompanyService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LoginService.html":{}}}],["angular/cli",{"_index":1245,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":98,"title":{},"body":{"components/BlankLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/NavbarComponent.html":{},"interfaces/SelectOption.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":465,"title":{},"body":{"components/HelloPage.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IHttpService.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["angular/compiler",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":24,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":239,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":25,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterUserPageComponent.html":{},"dependencies.html":{}}}],["angular:example",{"_index":1309,"title":{},"body":{"index.html":{}}}],["antes",{"_index":1308,"title":{},"body":{"index.html":{}}}],["ao",{"_index":1152,"title":{},"body":{"index.html":{}}}],["apache",{"_index":362,"title":{},"body":{"components/FooterComponent.html":{}}}],["apenas",{"_index":1356,"title":{},"body":{"index.html":{}}}],["api",{"_index":156,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{},"index.html":{}}}],["aplicativo",{"_index":1358,"title":{},"body":{"index.html":{}}}],["aplicação",{"_index":1159,"title":{},"body":{"index.html":{}}}],["app",{"_index":1,"title":{"components/App.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"coverage.html":{}}}],["app.component.html",{"_index":21,"title":{},"body":{"components/App.html":{}}}],["appconfig",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":12,"title":{},"body":{"components/App.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"classes/HttpService.html":{},"interfaces/IHttpService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":186,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/LoginService.html":{}}}],["applicationconfig",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":515,"title":{},"body":{"interfaces/IFormService.html":{},"index.html":{}}}],["applied",{"_index":282,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["apply",{"_index":283,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/SelectOption.html":{}}}],["appropriate",{"_index":780,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["aprimorada",{"_index":1376,"title":{},"body":{"index.html":{}}}],["após",{"_index":1269,"title":{},"body":{"index.html":{}}}],["areas",{"_index":264,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["armazenamento",{"_index":1396,"title":{},"body":{"index.html":{}}}],["arquivos",{"_index":1313,"title":{},"body":{"index.html":{}}}],["array",{"_index":545,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"components/RegisterCompanyPage.html":{},"injectables/StringService.html":{}}}],["arraybuffer",{"_index":1513,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["arrays",{"_index":1512,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["associated",{"_index":712,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["async",{"_index":721,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["ataque",{"_index":1378,"title":{},"body":{"index.html":{}}}],["attempting",{"_index":786,"title":{},"body":{"interfaces/LoginRequest.html":{}}}],["atuais",{"_index":1429,"title":{},"body":{"index.html":{}}}],["atualmente",{"_index":1453,"title":{},"body":{"index.html":{}}}],["auth",{"_index":1105,"title":{},"body":{"injectables/TokenService.html":{}}}],["authenticated",{"_index":617,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"injectables/LoginService.html":{}}}],["authentication",{"_index":90,"title":{},"body":{"components/BlankLayoutComponent.html":{},"interfaces/ILoginHttpService.html":{},"injectables/LoginService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{}}}],["available",{"_index":233,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["await",{"_index":754,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["back",{"_index":102,"title":{},"body":{"components/BlankLayoutComponent.html":{}}}],["backend",{"_index":192,"title":{},"body":{"injectables/CompanyService.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/IndustryService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"index.html":{}}}],["bar",{"_index":824,"title":{},"body":{"components/NavbarComponent.html":{}}}],["base",{"_index":203,"title":{},"body":{"injectables/CompanyService.html":{},"classes/HttpService.html":{},"interfaces/IHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"index.html":{}}}],["based",{"_index":402,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/RegisterUserPageComponent.html":{}}}],["bash",{"_index":1365,"title":{},"body":{"index.html":{}}}],["behavior",{"_index":426,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["being",{"_index":519,"title":{},"body":{"interfaces/IFormService.html":{},"interfaces/ILocalStorageItemService.html":{}}}],["bem",{"_index":1150,"title":{},"body":{"index.html":{}}}],["bio",{"_index":861,"title":{},"body":{"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{}}}],["biograph",{"_index":854,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["biography",{"_index":849,"title":{},"body":{"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{}}}],["blank",{"_index":41,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["blanklayoutcomponent",{"_index":40,"title":{"components/BlankLayoutComponent.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["blob",{"_index":1514,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["body",{"_index":603,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["bodyt",{"_index":600,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["boolean",{"_index":346,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/ILoginHttpService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"miscellaneous/typealiases.html":{}}}],["boot",{"_index":1196,"title":{},"body":{"index.html":{}}}],["break",{"_index":1011,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["brief",{"_index":938,"title":{},"body":{"interfaces/RegisterCompanyRequest.html":{}}}],["browser",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["browser's",{"_index":691,"title":{},"body":{"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{}}}],["build",{"_index":1303,"title":{},"body":{"index.html":{}}}],["builded",{"_index":1337,"title":{},"body":{"index.html":{}}}],["bulma",{"_index":295,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["buscam",{"_index":1179,"title":{},"body":{"index.html":{}}}],["business",{"_index":941,"title":{},"body":{"interfaces/RegisterCompanyRequest.html":{}}}],["button",{"_index":383,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{}}}],["button'},{'name",{"_index":56,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["button.component",{"_index":893,"title":{},"body":{"components/RegisterChoicePage.html":{}}}],["button.component.html",{"_index":628,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts",{"_index":627,"title":{},"body":{"components/ImageCardButtonComponent.html":{},"coverage.html":{}}}],["button.component.ts:104",{"_index":635,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:119",{"_index":656,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:127",{"_index":638,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:142",{"_index":658,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:150",{"_index":659,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:27",{"_index":644,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:35",{"_index":640,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:50",{"_index":647,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:58",{"_index":637,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:73",{"_index":650,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:81",{"_index":633,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["button.component.ts:96",{"_index":653,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["call",{"_index":529,"title":{},"body":{"interfaces/IFormService.html":{}}}],["called",{"_index":449,"title":{},"body":{"components/HelloPage.html":{},"interfaces/IFormService.html":{},"components/LoginPage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["candidate",{"_index":63,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{},"index.html":{}}}],["candidate's",{"_index":884,"title":{},"body":{"interfaces/RegisterCandidateRequest.html":{}}}],["candidate.service",{"_index":116,"title":{},"body":{"injectables/CandidateService.html":{}}}],["candidate]{@link",{"_index":989,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["candidateservice",{"_index":105,"title":{"injectables/CandidateService.html":{}},"body":{"injectables/CandidateService.html":{},"components/RegisterCandidatePage.html":{},"coverage.html":{}}}],["candidateservice.registercandidate(user",{"_index":122,"title":{},"body":{"injectables/CandidateService.html":{}}}],["canvas",{"_index":82,"title":{},"body":{"components/BlankLayoutComponent.html":{}}}],["card",{"_index":55,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["card/image",{"_index":626,"title":{},"body":{"components/ImageCardButtonComponent.html":{},"components/RegisterChoicePage.html":{},"coverage.html":{}}}],["case",{"_index":472,"title":{},"body":{"components/HelloPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["caso",{"_index":1239,"title":{},"body":{"index.html":{}}}],["catch",{"_index":1095,"title":{},"body":{"injectables/StringService.html":{}}}],["cerca",{"_index":1431,"title":{},"body":{"index.html":{}}}],["certifique",{"_index":1218,"title":{},"body":{"index.html":{}}}],["chances",{"_index":1403,"title":{},"body":{"index.html":{}}}],["change",{"_index":946,"title":{},"body":{"interfaces/RegisterRequest.html":{}}}],["changes",{"_index":268,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["character",{"_index":1030,"title":{},"body":{"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["characters",{"_index":1024,"title":{},"body":{"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["checks",{"_index":612,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["choice",{"_index":66,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["ci/cd.desvantagem",{"_index":1342,"title":{},"body":{"index.html":{}}}],["class",{"_index":28,"title":{"classes/HttpService.html":{},"classes/LocalStorageItemService.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IHasLocalStorage.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":285,"title":{},"body":{"interfaces/FieldOptions.html":{},"classes/HttpService.html":{},"classes/LocalStorageItemService.html":{},"interfaces/SelectOption.html":{},"overview.html":{}}}],["clear",{"_index":688,"title":{},"body":{"classes/LocalStorageItemService.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["clearerrors",{"_index":720,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["cli",{"_index":1235,"title":{},"body":{"index.html":{}}}],["click",{"_index":390,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["clicked",{"_index":642,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["clicks",{"_index":730,"title":{},"body":{"components/LoginPage.html":{}}}],["client",{"_index":160,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHttpService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{},"index.html":{}}}],["client:latesta",{"_index":1420,"title":{},"body":{"index.html":{}}}],["client:latestapós",{"_index":1413,"title":{},"body":{"index.html":{}}}],["clone",{"_index":1247,"title":{},"body":{"index.html":{}}}],["clonou",{"_index":1250,"title":{},"body":{"index.html":{}}}],["coberto",{"_index":1455,"title":{},"body":{"index.html":{}}}],["cobertos",{"_index":1437,"title":{},"body":{"index.html":{}}}],["cobrem",{"_index":1430,"title":{},"body":{"index.html":{}}}],["code",{"_index":360,"title":{},"body":{"components/FooterComponent.html":{}}}],["colors",{"_index":296,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["com",{"_index":1161,"title":{},"body":{"index.html":{}}}],["comando",{"_index":1266,"title":{},"body":{"index.html":{}}}],["communicate",{"_index":269,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["como",{"_index":1364,"title":{},"body":{"index.html":{}}}],["company",{"_index":68,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{},"index.html":{}}}],["company's",{"_index":940,"title":{},"body":{"interfaces/RegisterCompanyRequest.html":{}}}],["company.service",{"_index":193,"title":{},"body":{"injectables/CompanyService.html":{}}}],["company]{@link",{"_index":990,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["companyservice",{"_index":187,"title":{"injectables/CompanyService.html":{}},"body":{"injectables/CompanyService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"coverage.html":{}}}],["companyservice.registercompany(user",{"_index":195,"title":{},"body":{"injectables/CompanyService.html":{}}}],["compila",{"_index":1329,"title":{},"body":{"index.html":{}}}],["compilar",{"_index":1278,"title":{},"body":{"index.html":{}}}],["compilação",{"_index":1344,"title":{},"body":{"index.html":{}}}],["compile",{"_index":1307,"title":{},"body":{"index.html":{}}}],["completa",{"_index":1373,"title":{},"body":{"index.html":{}}}],["completo",{"_index":1251,"title":{},"body":{"index.html":{}}}],["complex",{"_index":1511,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["compodoc",{"_index":1446,"title":{},"body":{"index.html":{}}}],["compodoc:build",{"_index":1449,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"coverage.html":{}}}],["component_template",{"_index":37,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"overview.html":{}}}],["components/buttons/image",{"_index":892,"title":{},"body":{"components/RegisterChoicePage.html":{}}}],["components/form/field/field.component",{"_index":734,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["components/layouts/blank",{"_index":891,"title":{},"body":{"components/RegisterChoicePage.html":{}}}],["components/layouts/default",{"_index":466,"title":{},"body":{"components/HelloPage.html":{}}}],["components/layouts/form",{"_index":733,"title":{},"body":{"components/LoginPage.html":{}}}],["components/register/user/register",{"_index":839,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["concluídos",{"_index":1464,"title":{},"body":{"index.html":{}}}],["configurar",{"_index":1209,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":1310,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["configuração",{"_index":1207,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":974,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["confirmpassword",{"_index":991,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["conforme",{"_index":1452,"title":{},"body":{"index.html":{}}}],["considered",{"_index":1084,"title":{},"body":{"injectables/StringService.html":{}}}],["consistente",{"_index":1296,"title":{},"body":{"index.html":{}}}],["console.error('form",{"_index":782,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["console.error(error",{"_index":775,"title":{},"body":{"components/LoginPage.html":{}}}],["console.log(response.message",{"_index":124,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{}}}],["console.log(response.token",{"_index":792,"title":{},"body":{"injectables/LoginService.html":{}}}],["console.log(value",{"_index":706,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["console.warn",{"_index":279,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["consome",{"_index":1191,"title":{},"body":{"index.html":{}}}],["const",{"_index":117,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{}}}],["construa",{"_index":1318,"title":{},"body":{"index.html":{}}}],["constructed",{"_index":806,"title":{},"body":{"injectables/LoginService.html":{}}}],["constructor",{"_index":574,"title":{},"body":{"interfaces/IHasLocalStorage.html":{}}}],["construir",{"_index":1300,"title":{},"body":{"index.html":{}}}],["construída",{"_index":1160,"title":{},"body":{"index.html":{}}}],["consumo",{"_index":1395,"title":{},"body":{"index.html":{}}}],["contact",{"_index":1015,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["contain",{"_index":1022,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["containing",{"_index":148,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"interfaces/MessageResponse.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"interfaces/TokenResponse.html":{}}}],["contains",{"_index":799,"title":{},"body":{"injectables/LoginService.html":{},"injectables/StringService.html":{}}}],["contato",{"_index":1490,"title":{},"body":{"index.html":{}}}],["conteinerizado",{"_index":1291,"title":{},"body":{"index.html":{}}}],["content",{"_index":185,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{}}}],["contract",{"_index":511,"title":{},"body":{"interfaces/IFormService.html":{}}}],["contribuição",{"_index":1477,"title":{},"body":{"index.html":{}}}],["contribuições",{"_index":1482,"title":{},"body":{"index.html":{}}}],["contêiner",{"_index":1330,"title":{},"body":{"index.html":{}}}],["contêineres",{"_index":1399,"title":{},"body":{"index.html":{}}}],["contêm",{"_index":1355,"title":{},"body":{"index.html":{}}}],["converted",{"_index":1063,"title":{},"body":{"injectables/StringService.html":{}}}],["converts",{"_index":1058,"title":{},"body":{"injectables/StringService.html":{}}}],["correctly",{"_index":779,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["corresponding",{"_index":1147,"title":{},"body":{"miscellaneous/functions.html":{}}}],["costa",{"_index":359,"title":{},"body":{"components/FooterComponent.html":{}}}],["coverage",{"_index":1106,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":263,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["credentials",{"_index":797,"title":{},"body":{"injectables/LoginService.html":{}}}],["criteria",{"_index":1048,"title":{},"body":{"injectables/StringService.html":{}}}],["css",{"_index":401,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["custom",{"_index":251,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["código",{"_index":1258,"title":{},"body":{"index.html":{}}}],["da",{"_index":1156,"title":{},"body":{"index.html":{}}}],["danger",{"_index":297,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["das",{"_index":1270,"title":{},"body":{"index.html":{}}}],["dashboard",{"_index":1471,"title":{},"body":{"index.html":{}}}],["data",{"_index":518,"title":{},"body":{"interfaces/IFormService.html":{},"interfaces/IHasLocalStorage.html":{},"injectables/LocalStorageService.html":{},"injectables/RegisterService.html":{}}}],["de",{"_index":1187,"title":{},"body":{"index.html":{}}}],["dedicada",{"_index":1158,"title":{},"body":{"index.html":{}}}],["default",{"_index":44,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["defaulting",{"_index":522,"title":{},"body":{"interfaces/IFormService.html":{}}}],["defaultlayoutcomponent",{"_index":43,"title":{"components/DefaultLayoutComponent.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["define",{"_index":227,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/IFormService.html":{},"interfaces/SelectOption.html":{}}}],["defined",{"_index":136,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["defines",{"_index":496,"title":{},"body":{"classes/HttpService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"interfaces/LoginRequest.html":{},"interfaces/MessageResponse.html":{},"interfaces/RegisterCandidateRequest.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"interfaces/TokenResponse.html":{}}}],["definition",{"_index":1506,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["delay",{"_index":763,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["demorado",{"_index":1345,"title":{},"body":{"index.html":{}}}],["dentro",{"_index":1261,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":1129,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":692,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["dependências",{"_index":1260,"title":{},"body":{"index.html":{}}}],["dependências:example",{"_index":1268,"title":{},"body":{"index.html":{}}}],["descobertas",{"_index":1405,"title":{},"body":{"index.html":{}}}],["description",{"_index":10,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{},"miscellaneous/functions.html":{}}}],["desejam",{"_index":1183,"title":{},"body":{"index.html":{}}}],["desenvolvedores",{"_index":1494,"title":{},"body":{"index.html":{}}}],["desenvolvido",{"_index":1189,"title":{},"body":{"index.html":{}}}],["desenvolvimento",{"_index":1274,"title":{},"body":{"index.html":{}}}],["designed",{"_index":701,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["desnecessárias",{"_index":1382,"title":{},"body":{"index.html":{}}}],["details",{"_index":121,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/RegisterService.html":{}}}],["detalhamento",{"_index":1460,"title":{},"body":{"index.html":{}}}],["different",{"_index":243,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["digit",{"_index":1049,"title":{},"body":{"injectables/StringService.html":{}}}],["directive",{"_index":35,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["directives",{"_index":72,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["direta",{"_index":1168,"title":{},"body":{"index.html":{}}}],["diretamente",{"_index":1410,"title":{},"body":{"index.html":{}}}],["diretório",{"_index":1262,"title":{},"body":{"index.html":{}}}],["display",{"_index":436,"title":{},"body":{"components/HelloPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["displayed",{"_index":322,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/RegisterCompanyPage.html":{},"interfaces/SelectOption.html":{}}}],["displaying",{"_index":741,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["displays",{"_index":976,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["disponível",{"_index":1406,"title":{},"body":{"index.html":{}}}],["dist",{"_index":1317,"title":{},"body":{"index.html":{}}}],["distribuição",{"_index":1371,"title":{},"body":{"index.html":{}}}],["distroless",{"_index":1348,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1288,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":1319,"title":{},"body":{"index.html":{}}}],["dockerfile.build",{"_index":1323,"title":{},"body":{"index.html":{}}}],["documentado",{"_index":1451,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["documentação",{"_index":1157,"title":{},"body":{"index.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["dos",{"_index":1443,"title":{},"body":{"index.html":{}}}],["downloads",{"_index":1391,"title":{},"body":{"index.html":{}}}],["drasticamente",{"_index":1379,"title":{},"body":{"index.html":{}}}],["dropdown",{"_index":911,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["duas",{"_index":1298,"title":{},"body":{"index.html":{}}}],["during",{"_index":533,"title":{},"body":{"interfaces/IFormService.html":{},"components/LoginPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["dúvidas",{"_index":1491,"title":{},"body":{"index.html":{}}}],["e",{"_index":1162,"title":{},"body":{"index.html":{}}}],["each",{"_index":850,"title":{},"body":{"components/RegisterCandidatePage.html":{},"injectables/StringService.html":{}}}],["effect",{"_index":281,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["elas",{"_index":1361,"title":{},"body":{"index.html":{}}}],["ele",{"_index":1190,"title":{},"body":{"index.html":{}}}],["element",{"_index":34,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["elements",{"_index":253,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["eliminando",{"_index":1331,"title":{},"body":{"index.html":{}}}],["em",{"_index":1223,"title":{},"body":{"index.html":{}}}],["email",{"_index":246,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterRequest.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["emailregex",{"_index":1067,"title":{},"body":{"injectables/StringService.html":{}}}],["emit",{"_index":349,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["emits",{"_index":199,"title":{},"body":{"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/RegisterService.html":{},"interfaces/SelectOption.html":{}}}],["emitted",{"_index":531,"title":{},"body":{"interfaces/IFormService.html":{},"injectables/RegisterService.html":{}}}],["emitter",{"_index":267,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"interfaces/SelectOption.html":{}}}],["emitvalue(event",{"_index":350,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["emprego",{"_index":1188,"title":{},"body":{"index.html":{}}}],["empresas",{"_index":1182,"title":{},"body":{"index.html":{}}}],["empty",{"_index":257,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["endpoint",{"_index":144,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["ensure",{"_index":683,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["entre",{"_index":1493,"title":{},"body":{"index.html":{}}}],["enum",{"_index":677,"title":{},"body":{"injectables/IndustryService.html":{}}}],["envelope",{"_index":331,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["enviar",{"_index":1487,"title":{},"body":{"index.html":{}}}],["environment",{"_index":165,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["environment's",{"_index":807,"title":{},"body":{"injectables/LoginService.html":{}}}],["environment.apiurl.concat('/auth/candidate/register",{"_index":153,"title":{},"body":{"injectables/CandidateService.html":{}}}],["environment.apiurl.concat('/auth/company/register",{"_index":201,"title":{},"body":{"injectables/CompanyService.html":{}}}],["environment.apiurl.concat('/auth/login",{"_index":804,"title":{},"body":{"injectables/LoginService.html":{}}}],["environment.apiurl.concat('/enums/industries",{"_index":680,"title":{},"body":{"injectables/IndustryService.html":{}}}],["environment.apiurl.concat('/greeting/hello",{"_index":489,"title":{},"body":{"injectables/HelloService.html":{}}}],["environments/environment",{"_index":166,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["error",{"_index":228,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/HelloPage.html":{},"interfaces/IFormService.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["error(error",{"_index":537,"title":{},"body":{"interfaces/IFormService.html":{},"injectables/RegisterService.html":{}}}],["error.error.message",{"_index":484,"title":{},"body":{"components/HelloPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["error.status",{"_index":1006,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["error.statustext.concat",{"_index":483,"title":{},"body":{"components/HelloPage.html":{}}}],["errormessage",{"_index":445,"title":{},"body":{"components/HelloPage.html":{}}}],["errormessage(value",{"_index":477,"title":{},"body":{"components/HelloPage.html":{}}}],["errorobserver",{"_index":536,"title":{},"body":{"interfaces/IFormService.html":{}}}],["errors",{"_index":225,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/IFormService.html":{},"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["errortype",{"_index":521,"title":{},"body":{"interfaces/IFormService.html":{}}}],["específica",{"_index":1256,"title":{},"body":{"index.html":{}}}],["específico",{"_index":1458,"title":{},"body":{"index.html":{}}}],["est",{"_index":1259,"title":{},"body":{"index.html":{}}}],["esta",{"_index":1154,"title":{},"body":{"index.html":{}}}],["estamos",{"_index":1479,"title":{},"body":{"index.html":{}}}],["estar",{"_index":1280,"title":{},"body":{"index.html":{}}}],["este",{"_index":1204,"title":{},"body":{"index.html":{}}}],["estes",{"_index":1440,"title":{},"body":{"index.html":{}}}],["estiver",{"_index":1286,"title":{},"body":{"index.html":{}}}],["etapas",{"_index":1462,"title":{},"body":{"index.html":{}}}],["etc",{"_index":230,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["event",{"_index":266,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["event.target",{"_index":352,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["eventcoalescing",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eventemitter",{"_index":234,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"injectables/RegisterService.html":{},"interfaces/SelectOption.html":{}}}],["events",{"_index":538,"title":{},"body":{"interfaces/IFormService.html":{},"injectables/RegisterService.html":{}}}],["example",{"_index":115,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"index.html":{}}}],["exceto",{"_index":1334,"title":{},"body":{"index.html":{}}}],["execut",{"_index":1414,"title":{},"body":{"index.html":{}}}],["executar",{"_index":1210,"title":{},"body":{"index.html":{}}}],["execute",{"_index":1264,"title":{},"body":{"index.html":{}}}],["execute:example",{"_index":1321,"title":{},"body":{"index.html":{}}}],["execução",{"_index":1208,"title":{},"body":{"index.html":{}}}],["exists",{"_index":615,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"components/RegisterUserPageComponent.html":{}}}],["experiência",{"_index":1173,"title":{},"body":{"index.html":{}}}],["exploradas",{"_index":1384,"title":{},"body":{"index.html":{}}}],["explorar",{"_index":1486,"title":{},"body":{"index.html":{}}}],["export",{"_index":27,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{}}}],["expressions",{"_index":877,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["extends",{"_index":128,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{},"interfaces/RegisterCandidateRequest.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/TokenService.html":{}}}],["f",{"_index":1336,"title":{},"body":{"index.html":{}}}],["fa",{"_index":330,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["facilmente",{"_index":1290,"title":{},"body":{"index.html":{}}}],["failed",{"_index":772,"title":{},"body":{"components/LoginPage.html":{}}}],["fails",{"_index":770,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["failure",{"_index":977,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["false",{"_index":345,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/ILoginHttpService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{}}}],["faltantes",{"_index":1444,"title":{},"body":{"index.html":{}}}],["fazer",{"_index":1467,"title":{},"body":{"index.html":{}}}],["faça",{"_index":1252,"title":{},"body":{"index.html":{}}}],["ferramenta",{"_index":1368,"title":{},"body":{"index.html":{}}}],["ferramentas",{"_index":1221,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":439,"title":{},"body":{"components/HelloPage.html":{},"components/RegisterCompanyPage.html":{}}}],["fetched",{"_index":473,"title":{},"body":{"components/HelloPage.html":{}}}],["fetches",{"_index":451,"title":{},"body":{"components/HelloPage.html":{},"components/RegisterCompanyPage.html":{}}}],["field",{"_index":217,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterRequest.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["field'},{'name",{"_index":46,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["field.component.html",{"_index":265,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldcomponent",{"_index":45,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"coverage.html":{}}}],["fieldhelpertext",{"_index":318,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldhelpertext(value",{"_index":320,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldiconleft",{"_index":333,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldiconleft(value",{"_index":335,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldiconright",{"_index":338,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldiconright(value",{"_index":340,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldlabel",{"_index":288,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldlabel(value",{"_index":290,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldmode",{"_index":299,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldmode(value",{"_index":301,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldname",{"_index":292,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldname(value",{"_index":294,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldoptions",{"_index":213,"title":{"interfaces/FieldOptions.html":{}},"body":{"interfaces/FieldOptions.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"coverage.html":{}}}],["fieldplaceholder",{"_index":303,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldplaceholder(value",{"_index":305,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fields",{"_index":244,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["fieldsareinvalid",{"_index":783,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["fieldtype",{"_index":306,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldtype(value",{"_index":308,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldtypes",{"_index":242,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["fieldvalue",{"_index":313,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldvalue(value",{"_index":315,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fieldvaluechanged",{"_index":271,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["filled",{"_index":777,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["final",{"_index":1350,"title":{},"body":{"index.html":{}}}],["first",{"_index":846,"title":{},"body":{"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"injectables/StringService.html":{}}}],["firstname",{"_index":851,"title":{},"body":{"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{}}}],["following",{"_index":948,"title":{},"body":{"injectables/RegisterService.html":{}}}],["fontawesome",{"_index":328,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["footer",{"_index":86,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/FooterComponent.html":{}}}],["footer'},{'name",{"_index":48,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["footer.component.html",{"_index":356,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer/footer.component",{"_index":209,"title":{},"body":{"components/DefaultLayoutComponent.html":{}}}],["footercomponent",{"_index":47,"title":{"components/FooterComponent.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["form",{"_index":50,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"interfaces/IFormService.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["form/field/field.component",{"_index":986,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["format",{"_index":881,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["formats",{"_index":878,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["formlayoutcomponent",{"_index":49,"title":{"components/FormLayoutComponent.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["formlayoutcomponent.mode",{"_index":376,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["formmessageoptions",{"_index":413,"title":{"interfaces/FormMessageOptions.html":{}},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["formsmodule",{"_index":238,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["fortawesome/fontawesome",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["found",{"_index":591,"title":{},"body":{"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"injectables/LocalStorageService.html":{}}}],["free",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["frontend",{"_index":1149,"title":{},"body":{"index.html":{}}}],["full",{"_index":879,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["fullname",{"_index":907,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["funcionalidades",{"_index":1199,"title":{},"body":{"index.html":{}}}],["function",{"_index":1123,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1144,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":943,"title":{},"body":{"interfaces/RegisterRequest.html":{}}}],["g",{"_index":1244,"title":{},"body":{"index.html":{}}}],["gerada",{"_index":1447,"title":{},"body":{"index.html":{}}}],["geralmente",{"_index":1233,"title":{},"body":{"index.html":{}}}],["gerar",{"_index":1312,"title":{},"body":{"index.html":{}}}],["geração",{"_index":1445,"title":{},"body":{"index.html":{}}}],["gerenciador",{"_index":1231,"title":{},"body":{"index.html":{}}}],["gerenciar",{"_index":1184,"title":{},"body":{"index.html":{}}}],["getall",{"_index":548,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"injectables/IndustryService.html":{}}}],["getclassmode",{"_index":240,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/SelectOption.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getclassmode(mode",{"_index":1146,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getclassmode(this.fieldmode",{"_index":286,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["getclassmode(this.mode",{"_index":420,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["geterror",{"_index":956,"title":{},"body":{"injectables/RegisterService.html":{}}}],["geterrormessage",{"_index":458,"title":{},"body":{"components/HelloPage.html":{}}}],["getgreeting",{"_index":452,"title":{},"body":{"components/HelloPage.html":{}}}],["getimagealt",{"_index":649,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["getimageheight",{"_index":652,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["getimageurl",{"_index":646,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["getimagewidth",{"_index":655,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["getindustryoptions",{"_index":896,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["getisauthenticated",{"_index":810,"title":{},"body":{"injectables/LoginService.html":{}}}],["getitem",{"_index":707,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["getitem(key",{"_index":709,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["getmessage",{"_index":403,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["getmode",{"_index":396,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["getngclass",{"_index":399,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["getprimarybuttontext",{"_index":406,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["getrouterlink",{"_index":643,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["gets",{"_index":588,"title":{},"body":{"interfaces/ILocalStorageItemService.html":{}}}],["getsecondarybuttontext",{"_index":409,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["getstored",{"_index":684,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["getsubmit",{"_index":952,"title":{},"body":{"injectables/RegisterService.html":{}}}],["getsuccess",{"_index":960,"title":{},"body":{"injectables/RegisterService.html":{}}}],["getter",{"_index":454,"title":{},"body":{"components/HelloPage.html":{}}}],["getters",{"_index":1435,"title":{},"body":{"index.html":{}}}],["getting",{"_index":562,"title":{"index.html":{}},"body":{"interfaces/IHasLocalStorage.html":{}}}],["gettitle",{"_index":392,"title":{},"body":{"components/FormLayoutComponent.html":{},"components/ImageCardButtonComponent.html":{},"components/RegisterUserPageComponent.html":{}}}],["gettoken",{"_index":808,"title":{},"body":{"injectables/LoginService.html":{}}}],["given",{"_index":1045,"title":{},"body":{"injectables/StringService.html":{},"miscellaneous/functions.html":{}}}],["globalmente",{"_index":1237,"title":{},"body":{"index.html":{}}}],["go",{"_index":101,"title":{},"body":{"components/BlankLayoutComponent.html":{}}}],["grande",{"_index":1441,"title":{},"body":{"index.html":{}}}],["greeting",{"_index":437,"title":{},"body":{"components/HelloPage.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{}}}],["greeting(value",{"_index":471,"title":{},"body":{"components/HelloPage.html":{}}}],["greetings",{"_index":485,"title":{},"body":{"components/HelloPage.html":{},"injectables/HelloService.html":{}}}],["group",{"_index":172,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/RegisterService.html":{},"injectables/StringService.html":{}}}],["h",{"_index":1381,"title":{},"body":{"index.html":{}}}],["handle",{"_index":125,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"interfaces/IRegisterHttpService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["handleerror(error",{"_index":771,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["handles",{"_index":508,"title":{},"body":{"interfaces/IFormService.html":{},"components/RegisterUserPageComponent.html":{}}}],["handlesuccess(_response",{"_index":765,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["handling",{"_index":109,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/IFormService.html":{},"interfaces/ILoginHttpService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["haserror",{"_index":784,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["header",{"_index":85,"title":{},"body":{"components/BlankLayoutComponent.html":{}}}],["headers",{"_index":184,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/LoginService.html":{}}}],["height",{"_index":636,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["hello",{"_index":103,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/HelloPage.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{}}}],["hello'},{'name",{"_index":52,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["hellopage",{"_index":51,"title":{"components/HelloPage.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["helloservice",{"_index":438,"title":{"injectables/HelloService.html":{}},"body":{"components/HelloPage.html":{},"injectables/HelloService.html":{},"interfaces/IGetHttpService.html":{},"coverage.html":{}}}],["helper",{"_index":219,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["helps",{"_index":223,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["home",{"_index":827,"title":{},"body":{"components/NavbarComponent.html":{},"index.html":{}}}],["hook",{"_index":448,"title":{},"body":{"components/HelloPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["html",{"_index":33,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["htmlinputelement",{"_index":255,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["htmlselectelement",{"_index":254,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["htmltextareaelement",{"_index":256,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["http",{"_index":133,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{},"injectables/StringService.html":{},"miscellaneous/typealiases.html":{}}}],["http.service",{"_index":171,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["http.service.ts",{"_index":543,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"coverage.html":{}}}],["http.service.ts:21",{"_index":555,"title":{},"body":{"interfaces/IGetHttpService.html":{},"interfaces/IRegisterHttpService.html":{}}}],["http.service.ts:22",{"_index":549,"title":{},"body":{"interfaces/IGetAllHttpService.html":{}}}],["http.service.ts:44",{"_index":601,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["http/body/registerrequest",{"_index":624,"title":{},"body":{"interfaces/IRegisterHttpService.html":{}}}],["http/response/messageresponse",{"_index":516,"title":{},"body":{"interfaces/IFormService.html":{},"interfaces/IRegisterHttpService.html":{}}}],["http/response/tokenresponse",{"_index":606,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["http://localhost",{"_index":1421,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":1282,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":157,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IHttpService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["httperrorresponse",{"_index":464,"title":{},"body":{"components/HelloPage.html":{},"interfaces/IFormService.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["https",{"_index":1086,"title":{},"body":{"injectables/StringService.html":{}}}],["httpservice",{"_index":129,"title":{"classes/HttpService.html":{}},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{},"coverage.html":{}}}],["httpservice.url",{"_index":178,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["httpservice:25",{"_index":159,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["httpservice:28",{"_index":490,"title":{},"body":{"injectables/HelloService.html":{},"injectables/IndustryService.html":{}}}],["httpservice:38",{"_index":202,"title":{},"body":{"injectables/CompanyService.html":{}}}],["httpservice:42",{"_index":155,"title":{},"body":{"injectables/CandidateService.html":{}}}],["httpservice:46",{"_index":805,"title":{},"body":{"injectables/LoginService.html":{}}}],["httpstatuscode",{"_index":988,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["httpstatuscode.conflict",{"_index":1007,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["httpstatuscode.internalservererror",{"_index":1012,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["hub",{"_index":1407,"title":{},"body":{"index.html":{}}}],["icon",{"_index":321,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["icons",{"_index":329,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["ideal",{"_index":1340,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":945,"title":{},"body":{"interfaces/RegisterRequest.html":{}}}],["iformservice",{"_index":506,"title":{"interfaces/IFormService.html":{}},"body":{"interfaces/IFormService.html":{},"injectables/RegisterService.html":{},"coverage.html":{}}}],["igetallhttpservice",{"_index":541,"title":{"interfaces/IGetAllHttpService.html":{}},"body":{"interfaces/IGetAllHttpService.html":{},"injectables/IndustryService.html":{},"coverage.html":{}}}],["igethttpservice",{"_index":491,"title":{"interfaces/IGetHttpService.html":{}},"body":{"injectables/HelloService.html":{},"interfaces/IGetHttpService.html":{},"coverage.html":{}}}],["ihaslocalstorage",{"_index":556,"title":{"interfaces/IHasLocalStorage.html":{}},"body":{"interfaces/IHasLocalStorage.html":{},"interfaces/ILoginHttpService.html":{},"classes/LocalStorageItemService.html":{},"coverage.html":{}}}],["ihaslocalstorage.stored",{"_index":610,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["ihttpservice",{"_index":501,"title":{"interfaces/IHttpService.html":{}},"body":{"classes/HttpService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"coverage.html":{}}}],["ilocalstorageitemservice",{"_index":570,"title":{"interfaces/ILocalStorageItemService.html":{}},"body":{"interfaces/IHasLocalStorage.html":{},"interfaces/ILocalStorageItemService.html":{},"classes/LocalStorageItemService.html":{},"coverage.html":{}}}],["iloginhttpservice",{"_index":593,"title":{"interfaces/ILoginHttpService.html":{}},"body":{"interfaces/ILoginHttpService.html":{},"injectables/LoginService.html":{},"coverage.html":{}}}],["image",{"_index":54,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["imagealt",{"_index":629,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["imagealt(value",{"_index":668,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["imagecardbuttoncomponent",{"_index":53,"title":{"components/ImageCardButtonComponent.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["imageheight",{"_index":630,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["imageheight(value",{"_index":671,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["imagem",{"_index":1301,"title":{},"body":{"index.html":{}}}],["imagens",{"_index":1351,"title":{},"body":{"index.html":{}}}],["imageurl",{"_index":631,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["imageurl(value",{"_index":665,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["imagewidth",{"_index":632,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["imagewidth(value",{"_index":674,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["implementadas",{"_index":1463,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":547,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{}}}],["implemented",{"_index":566,"title":{},"body":{"interfaces/IHasLocalStorage.html":{}}}],["implementing",{"_index":575,"title":{},"body":{"interfaces/IHasLocalStorage.html":{}}}],["implements",{"_index":175,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["import",{"_index":22,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{}}}],["imports",{"_index":18,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["include",{"_index":845,"title":{},"body":{"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/StringService.html":{}}}],["includes",{"_index":245,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/LoginRequest.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["including",{"_index":582,"title":{},"body":{"interfaces/IHttpService.html":{},"interfaces/ILoginHttpService.html":{}}}],["incluem",{"_index":1362,"title":{},"body":{"index.html":{}}}],["inclui",{"_index":1347,"title":{},"body":{"index.html":{}}}],["index",{"_index":130,"title":{"index.html":{}},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":325,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["indicates",{"_index":341,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["indicating",{"_index":616,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["industries",{"_index":676,"title":{},"body":{"injectables/IndustryService.html":{},"components/RegisterCompanyPage.html":{}}}],["industry",{"_index":899,"title":{},"body":{"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{}}}],["industryservice",{"_index":546,"title":{"injectables/IndustryService.html":{}},"body":{"interfaces/IGetAllHttpService.html":{},"injectables/IndustryService.html":{},"components/RegisterCompanyPage.html":{},"coverage.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{}}}],["information",{"_index":327,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/SelectOption.html":{}}}],["inherited",{"_index":154,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["inicialização",{"_index":1397,"title":{},"body":{"index.html":{}}}],["iniciar",{"_index":1272,"title":{},"body":{"index.html":{}}}],["initialize",{"_index":833,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["initialized",{"_index":450,"title":{},"body":{"components/HelloPage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["inject",{"_index":462,"title":{},"body":{"components/HelloPage.html":{},"classes/HttpService.html":{},"classes/LocalStorageItemService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["inject(candidateservice",{"_index":857,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["inject(companyservice",{"_index":913,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["inject(helloservice",{"_index":468,"title":{},"body":{"components/HelloPage.html":{}}}],["inject(httpclient",{"_index":158,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["inject(industryservice",{"_index":912,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["inject(localstorageservice",{"_index":695,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["inject(loginservice",{"_index":745,"title":{},"body":{"components/LoginPage.html":{}}}],["inject(registerservice",{"_index":855,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["inject(router",{"_index":744,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["inject(tokenservice",{"_index":800,"title":{},"body":{"injectables/LoginService.html":{}}}],["injectable",{"_index":104,"title":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{}},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["injectables",{"_index":106,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{},"overview.html":{}}}],["injected",{"_index":573,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"classes/LocalStorageItemService.html":{},"injectables/LoginService.html":{}}}],["injection",{"_index":693,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["inner",{"_index":261,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["input",{"_index":235,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["inputs",{"_index":366,"title":{},"body":{"components/FormLayoutComponent.html":{},"components/ImageCardButtonComponent.html":{},"components/RegisterUserPageComponent.html":{}}}],["instaladas",{"_index":1222,"title":{},"body":{"index.html":{}}}],["instalado",{"_index":1402,"title":{},"body":{"index.html":{}}}],["instalados",{"_index":1333,"title":{},"body":{"index.html":{}}}],["instalar",{"_index":1267,"title":{},"body":{"index.html":{}}}],["instalação",{"_index":1246,"title":{},"body":{"index.html":{}}}],["instale",{"_index":1236,"title":{},"body":{"index.html":{}}}],["install",{"_index":1243,"title":{},"body":{"index.html":{}}}],["instance",{"_index":499,"title":{},"body":{"classes/HttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["instructions",{"_index":375,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["integração",{"_index":1425,"title":{},"body":{"index.html":{}}}],["intended",{"_index":565,"title":{},"body":{"interfaces/IHasLocalStorage.html":{}}}],["interact",{"_index":560,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"classes/LocalStorageItemService.html":{}}}],["interação",{"_index":1167,"title":{},"body":{"index.html":{}}}],["interface",{"_index":212,"title":{"interfaces/FieldOptions.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"interfaces/LoginRequest.html":{},"interfaces/MessageResponse.html":{},"interfaces/RegisterCandidateRequest.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"interfaces/SelectOption.html":{},"interfaces/TokenResponse.html":{}},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"classes/LocalStorageItemService.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"interfaces/RegisterCandidateRequest.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"interfaces/SelectOption.html":{},"interfaces/TokenResponse.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":214,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"interfaces/LoginRequest.html":{},"interfaces/MessageResponse.html":{},"interfaces/RegisterCandidateRequest.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"interfaces/SelectOption.html":{},"interfaces/TokenResponse.html":{},"overview.html":{}}}],["interfaces/http/http.service",{"_index":505,"title":{},"body":{"classes/HttpService.html":{}}}],["interfaces/local/has",{"_index":689,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["interfaces/local/local",{"_index":690,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["internal",{"_index":1013,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["intuitiva",{"_index":1174,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":781,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["ir",{"_index":1277,"title":{},"body":{"index.html":{}}}],["iregisterhttpservice",{"_index":169,"title":{"interfaces/IRegisterHttpService.html":{}},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/IRegisterHttpService.html":{},"coverage.html":{}}}],["iregisterhttpservice.register",{"_index":181,"title":{},"body":{"injectables/CandidateService.html":{}}}],["isauthenticated",{"_index":619,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"injectables/LoginService.html":{}}}],["isolada",{"_index":1327,"title":{},"body":{"index.html":{}}}],["isso",{"_index":1389,"title":{},"body":{"index.html":{}}}],["isstronger",{"_index":1076,"title":{},"body":{"injectables/StringService.html":{}}}],["isstrongerpassword",{"_index":1038,"title":{},"body":{"injectables/StringService.html":{}}}],["isstrongerpassword(password",{"_index":1042,"title":{},"body":{"injectables/StringService.html":{}}}],["issues",{"_index":1489,"title":{},"body":{"index.html":{}}}],["isvalidemail",{"_index":1039,"title":{},"body":{"injectables/StringService.html":{}}}],["isvalidemail(email",{"_index":1051,"title":{},"body":{"injectables/StringService.html":{}}}],["isvalidurl",{"_index":1040,"title":{},"body":{"injectables/StringService.html":{}}}],["isvalidurl(url",{"_index":1053,"title":{},"body":{"injectables/StringService.html":{}}}],["item",{"_index":587,"title":{},"body":{"interfaces/ILocalStorageItemService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"injectables/TokenService.html":{}}}],["item.service",{"_index":580,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"classes/LocalStorageItemService.html":{},"injectables/TokenService.html":{}}}],["item.service.ts",{"_index":584,"title":{},"body":{"interfaces/ILocalStorageItemService.html":{},"classes/LocalStorageItemService.html":{},"coverage.html":{}}}],["item.service.ts:42",{"_index":685,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["item.service.ts:51",{"_index":687,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["items",{"_index":564,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"interfaces/ILocalStorageItemService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{}}}],["itspec",{"_index":189,"title":{},"body":{"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"interfaces/TokenResponse.html":{},"miscellaneous/typealiases.html":{}}}],["java",{"_index":1194,"title":{},"body":{"index.html":{}}}],["javagas",{"_index":31,"title":{},"body":{"components/App.html":{},"components/FooterComponent.html":{},"components/HelloPage.html":{},"components/NavbarComponent.html":{},"index.html":{}}}],["jest",{"_index":1423,"title":{},"body":{"index.html":{}}}],["job",{"_index":1475,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1474,"title":{},"body":{"index.html":{}}}],["join",{"_index":1092,"title":{},"body":{"injectables/StringService.html":{}}}],["key",{"_index":576,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"injectables/TokenService.html":{}}}],["la",{"_index":1415,"title":{},"body":{"index.html":{}}}],["label",{"_index":262,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/RegisterCompanyPage.html":{},"interfaces/SelectOption.html":{}}}],["last",{"_index":847,"title":{},"body":{"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{}}}],["lastname",{"_index":852,"title":{},"body":{"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{}}}],["later",{"_index":1014,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["layout",{"_index":80,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/RegisterUserPageComponent.html":{}}}],["layout'},{'name",{"_index":42,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["layout.component",{"_index":412,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/LoginPage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterUserPageComponent.html":{}}}],["layout.component.html",{"_index":97,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["layout.component.ts",{"_index":78,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"coverage.html":{}}}],["layout.component.ts:104",{"_index":400,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:122",{"_index":404,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:133",{"_index":373,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:151",{"_index":407,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:159",{"_index":381,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:173",{"_index":410,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:181",{"_index":386,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:45",{"_index":389,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:50",{"_index":391,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:62",{"_index":393,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:70",{"_index":388,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:86",{"_index":397,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout.component.ts:95",{"_index":379,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["layout/blank",{"_index":77,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/RegisterChoicePage.html":{},"coverage.html":{}}}],["layout/default",{"_index":207,"title":{},"body":{"components/DefaultLayoutComponent.html":{},"components/HelloPage.html":{},"coverage.html":{}}}],["layout/form",{"_index":365,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["layouts/form",{"_index":987,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["left",{"_index":323,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["legend",{"_index":32,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["letter",{"_index":1027,"title":{},"body":{"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["leva",{"_index":1390,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":361,"title":{},"body":{"components/FooterComponent.html":{}}}],["lifecycle",{"_index":447,"title":{},"body":{"components/HelloPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["linhas",{"_index":1433,"title":{},"body":{"index.html":{}}}],["link",{"_index":177,"title":{},"body":{"injectables/CandidateService.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"injectables/HelloService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILoginHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{}}}],["linkedin",{"_index":848,"title":{},"body":{"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{}}}],["linkedinurl",{"_index":853,"title":{},"body":{"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{}}}],["linux",{"_index":1372,"title":{},"body":{"index.html":{}}}],["list",{"_index":901,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["listen",{"_index":525,"title":{},"body":{"interfaces/IFormService.html":{},"injectables/RegisterService.html":{}}}],["listeners",{"_index":983,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["little",{"_index":316,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["llan",{"_index":358,"title":{},"body":{"components/FooterComponent.html":{}}}],["locais",{"_index":1339,"title":{},"body":{"index.html":{}}}],["local",{"_index":558,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"injectables/TokenService.html":{},"coverage.html":{},"index.html":{}}}],["local/has",{"_index":604,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["locally",{"_index":569,"title":{},"body":{"interfaces/IHasLocalStorage.html":{}}}],["localmente",{"_index":1211,"title":{},"body":{"index.html":{}}}],["localstorage.getitem(key",{"_index":715,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["localstorage.removeitem(key",{"_index":717,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["localstorage.setitem(key",{"_index":716,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["localstorageitemservice",{"_index":681,"title":{"classes/LocalStorageItemService.html":{}},"body":{"classes/LocalStorageItemService.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["localstorageservice",{"_index":572,"title":{"injectables/LocalStorageService.html":{}},"body":{"interfaces/IHasLocalStorage.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"coverage.html":{}}}],["localstorageservice.getitem('key",{"_index":705,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["localstorageservice.setitem('key",{"_index":704,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["log",{"_index":787,"title":{},"body":{"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"components/NavbarComponent.html":{}}}],["logged",{"_index":613,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["logic",{"_index":975,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["login",{"_index":58,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"interfaces/ILoginHttpService.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/TokenResponse.html":{},"index.html":{}}}],["login(body",{"_index":599,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["login(user",{"_index":794,"title":{},"body":{"injectables/LoginService.html":{}}}],["login.service",{"_index":789,"title":{},"body":{"injectables/LoginService.html":{}}}],["loginpage",{"_index":57,"title":{"components/LoginPage.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["loginrequest",{"_index":736,"title":{"interfaces/LoginRequest.html":{}},"body":{"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/RegisterRequest.html":{},"coverage.html":{}}}],["loginservice",{"_index":719,"title":{"injectables/LoginService.html":{}},"body":{"components/LoginPage.html":{},"injectables/LoginService.html":{},"coverage.html":{}}}],["loginservice.login",{"_index":790,"title":{},"body":{"injectables/LoginService.html":{}}}],["logo",{"_index":94,"title":{},"body":{"components/BlankLayoutComponent.html":{}}}],["logs",{"_index":602,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"injectables/LoginService.html":{}}}],["lowercase",{"_index":1028,"title":{},"body":{"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["lts",{"_index":1228,"title":{},"body":{"index.html":{}}}],["main",{"_index":11,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{}}}],["mais",{"_index":1326,"title":{},"body":{"index.html":{}}}],["make",{"_index":161,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IHttpService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["making",{"_index":500,"title":{},"body":{"classes/HttpService.html":{}}}],["manage",{"_index":113,"title":{},"body":{"injectables/CandidateService.html":{},"interfaces/IFormService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LoginService.html":{}}}],["manages",{"_index":585,"title":{},"body":{"interfaces/ILocalStorageItemService.html":{}}}],["managing",{"_index":597,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"injectables/LocalStorageService.html":{},"injectables/TokenService.html":{}}}],["manipulation",{"_index":1035,"title":{},"body":{"injectables/StringService.html":{}}}],["map((word",{"_index":1089,"title":{},"body":{"injectables/StringService.html":{}}}],["marked",{"_index":343,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["match",{"_index":1033,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["matching",{"_index":75,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meets",{"_index":1046,"title":{},"body":{"injectables/StringService.html":{}}}],["melhorias",{"_index":1483,"title":{},"body":{"index.html":{}}}],["menor",{"_index":1394,"title":{},"body":{"index.html":{}}}],["menos",{"_index":1400,"title":{},"body":{"index.html":{}}}],["message",{"_index":127,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/LoginPage.html":{},"interfaces/MessageResponse.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["message(value",{"_index":423,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["message.tolowercase().includes('email",{"_index":1008,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["message.tolowercase().includes('username",{"_index":1010,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["messageresponse",{"_index":163,"title":{"interfaces/MessageResponse.html":{}},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"interfaces/IFormService.html":{},"interfaces/IRegisterHttpService.html":{},"interfaces/MessageResponse.html":{},"components/RegisterCandidatePage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["messages",{"_index":724,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["metadata",{"_index":13,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["method",{"_index":141,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{}}}],["methods",{"_index":112,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/IndustryService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{}}}],["miscellaneous",{"_index":1143,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":220,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/functions.html":{}}}],["mode(value",{"_index":419,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["modes",{"_index":726,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"miscellaneous/typealiases.html":{}}}],["modetype",{"_index":226,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/SelectOption.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["modules",{"_index":1495,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["muito",{"_index":1353,"title":{},"body":{"index.html":{}}}],["multi",{"_index":1324,"title":{},"body":{"index.html":{}}}],["máquina",{"_index":1225,"title":{},"body":{"index.html":{}}}],["na",{"_index":1316,"title":{},"body":{"index.html":{}}}],["nada",{"_index":1360,"title":{},"body":{"index.html":{}}}],["name",{"_index":38,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"miscellaneous/functions.html":{}}}],["navbar",{"_index":825,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar'},{'name",{"_index":61,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["navbar.component.html",{"_index":826,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar/navbar.component",{"_index":210,"title":{},"body":{"components/DefaultLayoutComponent.html":{}}}],["navbarcomponent",{"_index":60,"title":{"components/NavbarComponent.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["navegue",{"_index":1254,"title":{},"body":{"index.html":{}}}],["navigate",{"_index":641,"title":{},"body":{"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["navigates",{"_index":731,"title":{},"body":{"components/LoginPage.html":{}}}],["navigatetologin",{"_index":978,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["navigatetoregister",{"_index":722,"title":{},"body":{"components/LoginPage.html":{}}}],["navigation",{"_index":823,"title":{},"body":{"components/NavbarComponent.html":{}}}],["necessary",{"_index":198,"title":{},"body":{"injectables/CompanyService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/RegisterCompanyPage.html":{}}}],["necessidade",{"_index":1332,"title":{},"body":{"index.html":{}}}],["need",{"_index":567,"title":{},"body":{"interfaces/IHasLocalStorage.html":{}}}],["needs",{"_index":728,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["new",{"_index":118,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"interfaces/SelectOption.html":{},"coverage.html":{}}}],["next",{"_index":479,"title":{},"body":{"components/HelloPage.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["ng",{"_index":1275,"title":{},"body":{"index.html":{}}}],["ngclass",{"_index":237,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/SelectOption.html":{}}}],["nginx",{"_index":1349,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":444,"title":{},"body":{"components/HelloPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["ngoptimizedimage",{"_index":95,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/ImageCardButtonComponent.html":{},"components/NavbarComponent.html":{}}}],["node.js",{"_index":1226,"title":{},"body":{"index.html":{}}}],["normalmente",{"_index":1369,"title":{},"body":{"index.html":{}}}],["nosso",{"_index":1193,"title":{},"body":{"index.html":{}}}],["notify",{"_index":965,"title":{},"body":{"injectables/RegisterService.html":{}}}],["novamente",{"_index":1448,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1230,"title":{},"body":{"index.html":{}}}],["null",{"_index":590,"title":{},"body":{"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":248,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["não",{"_index":1241,"title":{},"body":{"index.html":{}}}],["o",{"_index":1169,"title":{},"body":{"index.html":{}}}],["object",{"_index":553,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILoginHttpService.html":{},"components/LoginPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["objects",{"_index":551,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":150,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/RegisterService.html":{}}}],["occur",{"_index":534,"title":{},"body":{"interfaces/IFormService.html":{}}}],["occurred",{"_index":1018,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["occurs",{"_index":535,"title":{},"body":{"interfaces/IFormService.html":{}}}],["oferece",{"_index":1171,"title":{},"body":{"index.html":{}}}],["oferecendo",{"_index":1293,"title":{},"body":{"index.html":{}}}],["oferecer",{"_index":1197,"title":{},"body":{"index.html":{}}}],["onde",{"_index":1257,"title":{},"body":{"index.html":{}}}],["one",{"_index":1025,"title":{},"body":{"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["onerror",{"_index":950,"title":{},"body":{"injectables/RegisterService.html":{}}}],["oninit",{"_index":440,"title":{},"body":{"components/HelloPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["onsubmit",{"_index":949,"title":{},"body":{"injectables/RegisterService.html":{}}}],["onsuccess",{"_index":951,"title":{},"body":{"injectables/RegisterService.html":{}}}],["operates",{"_index":939,"title":{},"body":{"interfaces/RegisterCompanyRequest.html":{}}}],["operation",{"_index":607,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["operations",{"_index":110,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/ILoginHttpService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["oportunidades",{"_index":1186,"title":{},"body":{"index.html":{}}}],["option",{"_index":259,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["optional",{"_index":147,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":218,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["options(value",{"_index":276,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["organize",{"_index":216,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["os",{"_index":1213,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":618,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["otimizados",{"_index":1315,"title":{},"body":{"index.html":{}}}],["ou",{"_index":1181,"title":{},"body":{"index.html":{}}}],["out",{"_index":778,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["output",{"_index":236,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/SelectOption.html":{}}}],["outputs",{"_index":369,"title":{},"body":{"components/FormLayoutComponent.html":{},"injectables/LocalStorageService.html":{}}}],["outra",{"_index":1283,"title":{},"body":{"index.html":{}}}],["overridden",{"_index":497,"title":{},"body":{"classes/HttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{}}}],["override",{"_index":176,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{},"injectables/TokenService.html":{}}}],["overview",{"_index":1496,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1417,"title":{},"body":{"index.html":{}}}],["package",{"_index":1128,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pacotes",{"_index":1232,"title":{},"body":{"index.html":{}}}],["padrão",{"_index":1304,"title":{},"body":{"index.html":{}}}],["page",{"_index":71,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["page'},{'name",{"_index":59,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["page.component",{"_index":840,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["page.component.html",{"_index":443,"title":{},"body":{"components/HelloPage.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["page.component.ts",{"_index":435,"title":{},"body":{"components/HelloPage.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["page.component.ts:101",{"_index":723,"title":{},"body":{"components/LoginPage.html":{}}}],["page.component.ts:110",{"_index":985,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["page.component.ts:115",{"_index":900,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["page.component.ts:119",{"_index":979,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["page.component.ts:121",{"_index":831,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["page.component.ts:127",{"_index":903,"title":{},"body":{"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["page.component.ts:137",{"_index":832,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["page.component.ts:140",{"_index":984,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["page.component.ts:150",{"_index":897,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["page.component.ts:157",{"_index":980,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["page.component.ts:166",{"_index":898,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["page.component.ts:174",{"_index":981,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["page.component.ts:36",{"_index":453,"title":{},"body":{"components/HelloPage.html":{}}}],["page.component.ts:45",{"_index":456,"title":{},"body":{"components/HelloPage.html":{}}}],["page.component.ts:61",{"_index":459,"title":{},"body":{"components/HelloPage.html":{}}}],["page.component.ts:70",{"_index":461,"title":{},"body":{"components/HelloPage.html":{}}}],["page.component.ts:72",{"_index":732,"title":{},"body":{"components/LoginPage.html":{}}}],["page.component.ts:80",{"_index":446,"title":{},"body":{"components/HelloPage.html":{}}}],["page.component.ts:92",{"_index":729,"title":{},"body":{"components/LoginPage.html":{}}}],["page.component.ts:98",{"_index":836,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["pages",{"_index":83,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/RegisterUserPageComponent.html":{}}}],["para",{"_index":1176,"title":{},"body":{"index.html":{}}}],["param",{"_index":180,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"components/HelloPage.html":{},"interfaces/IFormService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{}}}],["parameters",{"_index":145,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":270,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/RegisterCandidatePage.html":{},"interfaces/SelectOption.html":{}}}],["parte",{"_index":1442,"title":{},"body":{"index.html":{}}}],["pass",{"_index":791,"title":{},"body":{"injectables/LoginService.html":{}}}],["passing",{"_index":528,"title":{},"body":{"interfaces/IFormService.html":{},"injectables/RegisterService.html":{}}}],["passos",{"_index":1214,"title":{},"body":{"index.html":{}}}],["password",{"_index":247,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterRequest.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"miscellaneous/typealiases.html":{}}}],["passwordregex",{"_index":1078,"title":{},"body":{"injectables/StringService.html":{}}}],["passwords",{"_index":1032,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["pasta",{"_index":1255,"title":{},"body":{"index.html":{}}}],["pela",{"_index":1165,"title":{},"body":{"index.html":{}}}],["pelos",{"_index":1438,"title":{},"body":{"index.html":{}}}],["pequenas",{"_index":1354,"title":{},"body":{"index.html":{}}}],["performs",{"_index":544,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{}}}],["persist",{"_index":568,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"injectables/TokenService.html":{}}}],["persistent",{"_index":703,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["pesquisa",{"_index":1473,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":818,"title":{},"body":{"injectables/LoginService.html":{}}}],["placeholder",{"_index":272,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["plataforma",{"_index":1200,"title":{},"body":{"index.html":{}}}],["please",{"_index":311,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["pode",{"_index":1271,"title":{},"body":{"index.html":{}}}],["pois",{"_index":1346,"title":{},"body":{"index.html":{}}}],["populate",{"_index":910,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["populated",{"_index":906,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["por",{"_index":1385,"title":{},"body":{"index.html":{}}}],["porta",{"_index":1284,"title":{},"body":{"index.html":{}}}],["portabilidade",{"_index":1294,"title":{},"body":{"index.html":{}}}],["possam",{"_index":1383,"title":{},"body":{"index.html":{}}}],["possui",{"_index":1434,"title":{},"body":{"index.html":{}}}],["post",{"_index":143,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/LoginService.html":{}}}],["post(this.url",{"_index":817,"title":{},"body":{"injectables/LoginService.html":{}}}],["pr",{"_index":1216,"title":{},"body":{"index.html":{}}}],["preferred",{"_index":889,"title":{},"body":{"components/RegisterChoicePage.html":{}}}],["primary",{"_index":382,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/LoginPage.html":{}}}],["primarybuttonclick",{"_index":370,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["primarybuttontext",{"_index":367,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["primarybuttontext(value",{"_index":430,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["primeiro",{"_index":1253,"title":{},"body":{"index.html":{}}}],["primitive",{"_index":1510,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["principais",{"_index":1203,"title":{},"body":{"index.html":{}}}],["principal",{"_index":1320,"title":{},"body":{"index.html":{}}}],["principally",{"_index":1507,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["private",{"_index":273,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{}}}],["process",{"_index":114,"title":{},"body":{"injectables/CandidateService.html":{},"interfaces/IFormService.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{}}}],["processo",{"_index":1343,"title":{},"body":{"index.html":{}}}],["productioneste",{"_index":1311,"title":{},"body":{"index.html":{}}}],["produção",{"_index":1314,"title":{},"body":{"index.html":{}}}],["profile",{"_index":885,"title":{},"body":{"interfaces/RegisterCandidateRequest.html":{},"interfaces/RegisterCompanyRequest.html":{}}}],["projeto",{"_index":1153,"title":{},"body":{"index.html":{}}}],["properties",{"_index":131,"title":{"properties.html":{}},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"interfaces/FormMessageOptions.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"injectables/IndustryService.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"interfaces/RegisterCandidateRequest.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"interfaces/SelectOption.html":{},"interfaces/TokenResponse.html":{},"properties.html":{}}}],["property",{"_index":280,"title":{},"body":{"interfaces/FieldOptions.html":{},"classes/HttpService.html":{},"classes/LocalStorageItemService.html":{},"interfaces/SelectOption.html":{}}}],["protected",{"_index":30,"title":{},"body":{"components/App.html":{},"injectables/CandidateService.html":{},"interfaces/FieldOptions.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IHttpService.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/TokenService.html":{}}}],["protocols",{"_index":1082,"title":{},"body":{"injectables/StringService.html":{}}}],["provide",{"_index":326,"title":{},"body":{"interfaces/FieldOptions.html":{},"classes/HttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/SelectOption.html":{},"injectables/TokenService.html":{}}}],["providebrowserglobalerrorlisteners",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":139,"title":{},"body":{"injectables/CandidateService.html":{}}}],["providedin",{"_index":174,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/IndustryService.html":{},"injectables/LocalStorageService.html":{},"injectables/RegisterService.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{}}}],["providehttpclient(withfetch",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":441,"title":{},"body":{"components/HelloPage.html":{},"components/LoginPage.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":111,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"classes/HttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{}}}],["providezonechangedetection",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providing",{"_index":973,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["próprio",{"_index":1335,"title":{},"body":{"index.html":{}}}],["próximas",{"_index":1461,"title":{},"body":{"index.html":{}}}],["public",{"_index":134,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/StringService.html":{}}}],["pull",{"_index":1411,"title":{},"body":{"index.html":{}}}],["puxar",{"_index":1409,"title":{},"body":{"index.html":{}}}],["qualquer",{"_index":1367,"title":{},"body":{"index.html":{}}}],["que",{"_index":1178,"title":{},"body":{"index.html":{}}}],["r",{"_index":751,"title":{},"body":{"components/LoginPage.html":{}}}],["raiz",{"_index":1263,"title":{},"body":{"index.html":{}}}],["received",{"_index":1100,"title":{},"body":{"interfaces/TokenResponse.html":{}}}],["recomendada",{"_index":1229,"title":{},"body":{"index.html":{}}}],["recrutamento",{"_index":1201,"title":{},"body":{"index.html":{}}}],["recuperação",{"_index":1469,"title":{},"body":{"index.html":{}}}],["redirect",{"_index":743,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["redirecting",{"_index":766,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["reduzida",{"_index":1380,"title":{},"body":{"index.html":{}}}],["reduzido",{"_index":1388,"title":{},"body":{"index.html":{}}}],["regex",{"_index":1077,"title":{},"body":{"injectables/StringService.html":{}}}],["regexp",{"_index":1068,"title":{},"body":{"injectables/StringService.html":{}}}],["register",{"_index":65,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["register(body",{"_index":622,"title":{},"body":{"interfaces/IRegisterHttpService.html":{}}}],["register(candidate",{"_index":135,"title":{},"body":{"injectables/CandidateService.html":{}}}],["register(company",{"_index":196,"title":{},"body":{"injectables/CompanyService.html":{}}}],["registercandidatepage",{"_index":62,"title":{"components/RegisterCandidatePage.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["registercandidaterequest",{"_index":119,"title":{"interfaces/RegisterCandidateRequest.html":{}},"body":{"injectables/CandidateService.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"coverage.html":{}}}],["registerchoicepage",{"_index":64,"title":{"components/RegisterChoicePage.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["registercompanypage",{"_index":67,"title":{"components/RegisterCompanyPage.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["registercompanyrequest",{"_index":194,"title":{"interfaces/RegisterCompanyRequest.html":{}},"body":{"injectables/CompanyService.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"coverage.html":{}}}],["registered",{"_index":1003,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["registering",{"_index":621,"title":{},"body":{"interfaces/IRegisterHttpService.html":{},"interfaces/RegisterRequest.html":{}}}],["registerrequest",{"_index":623,"title":{"interfaces/RegisterRequest.html":{}},"body":{"interfaces/IRegisterHttpService.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"coverage.html":{}}}],["registers",{"_index":138,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/IRegisterHttpService.html":{}}}],["registerservice",{"_index":841,"title":{"injectables/RegisterService.html":{}},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["registeruserpagecomponent",{"_index":69,"title":{"components/RegisterUserPageComponent.html":{}},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["registration",{"_index":91,"title":{},"body":{"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/IndustryService.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["registro",{"_index":1465,"title":{},"body":{"index.html":{}}}],["regular",{"_index":876,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["related",{"_index":856,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["repositório",{"_index":1248,"title":{},"body":{"index.html":{}}}],["represent",{"_index":1099,"title":{},"body":{"interfaces/TokenResponse.html":{}}}],["represents",{"_index":208,"title":{},"body":{"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["requer",{"_index":1306,"title":{},"body":{"index.html":{}}}],["request",{"_index":140,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["requests",{"_index":162,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHttpService.html":{},"interfaces/ILoginHttpService.html":{},"injectables/IndustryService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["require",{"_index":84,"title":{},"body":{"components/BlankLayoutComponent.html":{}}}],["required",{"_index":342,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{}}}],["required(value",{"_index":348,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["requisitos",{"_index":1217,"title":{},"body":{"index.html":{}}}],["reset",{"_index":725,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["response",{"_index":126,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/HelloPage.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILoginHttpService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/TokenResponse.html":{},"miscellaneous/typealiases.html":{}}}],["response.message",{"_index":481,"title":{},"body":{"components/HelloPage.html":{}}}],["response.token",{"_index":820,"title":{},"body":{"injectables/LoginService.html":{}}}],["responseobjecttype",{"_index":554,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["responses",{"_index":513,"title":{},"body":{"interfaces/IFormService.html":{}}}],["responset",{"_index":608,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["responsible",{"_index":595,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"injectables/LoginService.html":{}}}],["responsiva",{"_index":1175,"title":{},"body":{"index.html":{}}}],["responsável",{"_index":1164,"title":{},"body":{"index.html":{}}}],["rest",{"_index":1061,"title":{},"body":{"injectables/StringService.html":{}}}],["restful",{"_index":1192,"title":{},"body":{"index.html":{}}}],["result",{"_index":200,"title":{},"body":{"injectables/CompanyService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{}}}],["results",{"_index":74,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":550,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"injectables/LocalStorageService.html":{}}}],["retrieved",{"_index":592,"title":{},"body":{"interfaces/ILocalStorageItemService.html":{}}}],["retrieves",{"_index":711,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["retrieving",{"_index":803,"title":{},"body":{"injectables/LoginService.html":{},"injectables/TokenService.html":{}}}],["return",{"_index":182,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"interfaces/IGetAllHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{}}}],["returned",{"_index":474,"title":{},"body":{"components/HelloPage.html":{},"interfaces/ILoginHttpService.html":{},"miscellaneous/functions.html":{}}}],["returns",{"_index":149,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{},"miscellaneous/functions.html":{}}}],["ricardo",{"_index":357,"title":{},"body":{"components/FooterComponent.html":{}}}],["rickallan/javagas",{"_index":1412,"title":{},"body":{"index.html":{}}}],["right",{"_index":336,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["role",{"_index":890,"title":{},"body":{"components/RegisterChoicePage.html":{}}}],["root",{"_index":15,"title":{},"body":{"components/App.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/IndustryService.html":{},"injectables/LocalStorageService.html":{},"injectables/RegisterService.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{}}}],["root'},{'name",{"_index":39,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["roteiro",{"_index":1457,"title":{},"body":{"index.html":{}}}],["router",{"_index":735,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["routerlink",{"_index":96,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/NavbarComponent.html":{}}}],["routerlink(value",{"_index":662,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["routerlinkactive",{"_index":442,"title":{},"body":{"components/HelloPage.html":{},"components/NavbarComponent.html":{}}}],["routeroutlet",{"_index":19,"title":{},"body":{"components/App.html":{}}}],["routes",{"_index":742,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["run",{"_index":1416,"title":{},"body":{"index.html":{}}}],["runed",{"_index":982,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["rxjs",{"_index":204,"title":{},"body":{"injectables/CompanyService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"dependencies.html":{}}}],["rápidos",{"_index":1393,"title":{},"body":{"index.html":{}}}],["s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0",{"_index":1069,"title":{},"body":{"injectables/StringService.html":{}}}],["screen",{"_index":1476,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":377,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["se",{"_index":1219,"title":{},"body":{"index.html":{}}}],["secondary",{"_index":387,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/LoginPage.html":{}}}],["secondarybuttonclick",{"_index":371,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["secondarybuttontext",{"_index":368,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["secondarybuttontext(value",{"_index":433,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["see",{"_index":231,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"components/RegisterChoicePage.html":{},"interfaces/SelectOption.html":{}}}],["seguinte",{"_index":1265,"title":{},"body":{"index.html":{}}}],["seguintes",{"_index":1206,"title":{},"body":{"index.html":{}}}],["seguir",{"_index":1459,"title":{},"body":{"index.html":{}}}],["segurança",{"_index":1375,"title":{},"body":{"index.html":{}}}],["select",{"_index":250,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["selected",{"_index":936,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["selectoption",{"_index":258,"title":{"interfaces/SelectOption.html":{}},"body":{"interfaces/FieldOptions.html":{},"components/RegisterCompanyPage.html":{},"interfaces/SelectOption.html":{},"coverage.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["sempre",{"_index":1480,"title":{},"body":{"index.html":{}}}],["send",{"_index":93,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{}}}],["sending",{"_index":596,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"injectables/LoginService.html":{}}}],["sendo",{"_index":1439,"title":{},"body":{"index.html":{}}}],["sends",{"_index":142,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{}}}],["senha",{"_index":1470,"title":{},"body":{"index.html":{}}}],["sent",{"_index":798,"title":{},"body":{"injectables/LoginService.html":{}}}],["ser",{"_index":1289,"title":{},"body":{"index.html":{}}}],["serem",{"_index":1404,"title":{},"body":{"index.html":{}}}],["serveeste",{"_index":1276,"title":{},"body":{"index.html":{}}}],["server",{"_index":151,"title":{},"body":{"injectables/CandidateService.html":{},"interfaces/IGetAllHttpService.html":{},"injectables/IndustryService.html":{},"components/RegisterUserPageComponent.html":{}}}],["serves",{"_index":81,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/RegisterChoicePage.html":{}}}],["servetodo",{"_index":1450,"title":{},"body":{"index.html":{}}}],["service",{"_index":108,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{}}}],["services",{"_index":173,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/RegisterService.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"miscellaneous/typealiases.html":{}}}],["services/auth/login/login.service",{"_index":738,"title":{},"body":{"components/LoginPage.html":{}}}],["services/auth/register/register.service",{"_index":842,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["services/candidate/register/candidate.service",{"_index":838,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["services/company/register/company.service",{"_index":905,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["services/enums/industries/industry.service",{"_index":904,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["services/greetings/hello.service",{"_index":463,"title":{},"body":{"components/HelloPage.html":{}}}],["services/utils/local",{"_index":578,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"classes/LocalStorageItemService.html":{}}}],["services/utils/string.service",{"_index":844,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["servidor",{"_index":1273,"title":{},"body":{"index.html":{}}}],["sessions",{"_index":1103,"title":{},"body":{"injectables/TokenService.html":{}}}],["set",{"_index":120,"title":{},"body":{"injectables/CandidateService.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"interfaces/IFormService.html":{},"components/ImageCardButtonComponent.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"miscellaneous/variables.html":{}}}],["seterror(error",{"_index":958,"title":{},"body":{"injectables/RegisterService.html":{}}}],["seterrormessage(value",{"_index":460,"title":{},"body":{"components/HelloPage.html":{}}}],["setgreeting(value",{"_index":455,"title":{},"body":{"components/HelloPage.html":{}}}],["setimagealt(value",{"_index":651,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["setimageheight(value",{"_index":654,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["setimageurl(value",{"_index":648,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["setimagewidth(value",{"_index":657,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["setitem",{"_index":708,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["setitem(key",{"_index":713,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["setmessage(value",{"_index":405,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["setmode(value",{"_index":398,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["setprimarybuttontext(value",{"_index":408,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["setrouterlink(value",{"_index":645,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["sets",{"_index":527,"title":{},"body":{"interfaces/IFormService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["setsecondarybuttontext(value",{"_index":411,"title":{},"body":{"components/FormLayoutComponent.html":{}}}],["setstored(value",{"_index":686,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["setsubmit(request",{"_index":954,"title":{},"body":{"injectables/RegisterService.html":{}}}],["setsuccess(response",{"_index":962,"title":{},"body":{"injectables/RegisterService.html":{}}}],["setter",{"_index":457,"title":{},"body":{"components/HelloPage.html":{}}}],["setters",{"_index":1436,"title":{},"body":{"index.html":{}}}],["settimeout",{"_index":767,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["setting",{"_index":563,"title":{},"body":{"interfaces/IHasLocalStorage.html":{}}}],["settitle(value",{"_index":394,"title":{},"body":{"components/FormLayoutComponent.html":{},"components/ImageCardButtonComponent.html":{},"components/RegisterUserPageComponent.html":{}}}],["seu",{"_index":1357,"title":{},"body":{"index.html":{}}}],["seção",{"_index":1155,"title":{},"body":{"index.html":{}}}],["sh",{"_index":1366,"title":{},"body":{"index.html":{}}}],["shell",{"_index":1363,"title":{},"body":{"index.html":{}}}],["short",{"_index":883,"title":{},"body":{"interfaces/RegisterCandidateRequest.html":{}}}],["show",{"_index":374,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"index.html":{}}}],["side",{"_index":324,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["sidebar",{"_index":87,"title":{},"body":{"components/BlankLayoutComponent.html":{}}}],["siga",{"_index":1212,"title":{},"body":{"index.html":{}}}],["sign",{"_index":828,"title":{},"body":{"components/NavbarComponent.html":{}}}],["simple",{"_index":79,"title":{},"body":{"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/SelectOption.html":{}}}],["sinta",{"_index":1484,"title":{},"body":{"index.html":{}}}],["smooth",{"_index":427,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["sobre",{"_index":1170,"title":{},"body":{"index.html":{}}}],["software",{"_index":1401,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{}}}],["space",{"_index":1065,"title":{},"body":{"injectables/StringService.html":{}}}],["special",{"_index":1029,"title":{},"body":{"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["specific",{"_index":504,"title":{},"body":{"classes/HttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"classes/LocalStorageItemService.html":{},"interfaces/RegisterCandidateRequest.html":{},"interfaces/RegisterCompanyRequest.html":{}}}],["specify",{"_index":696,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["split",{"_index":1056,"title":{},"body":{"injectables/StringService.html":{}}}],["split(split",{"_index":1088,"title":{},"body":{"injectables/StringService.html":{}}}],["spring",{"_index":1195,"title":{},"body":{"index.html":{}}}],["src/.../app.config.ts",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../field.component.ts",{"_index":1503,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../modetype.ts",{"_index":1145,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../response",{"_index":1504,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/App.html":{},"coverage.html":{}}}],["src/app/app.config.ts",{"_index":1112,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/buttons/image",{"_index":625,"title":{},"body":{"components/ImageCardButtonComponent.html":{},"coverage.html":{}}}],["src/app/components/footer/footer.component.ts",{"_index":355,"title":{},"body":{"components/FooterComponent.html":{},"coverage.html":{}}}],["src/app/components/form/field/field.component.ts",{"_index":215,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/components/layouts/blank",{"_index":76,"title":{},"body":{"components/BlankLayoutComponent.html":{},"coverage.html":{}}}],["src/app/components/layouts/default",{"_index":206,"title":{},"body":{"components/DefaultLayoutComponent.html":{},"coverage.html":{}}}],["src/app/components/layouts/form",{"_index":364,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"coverage.html":{}}}],["src/app/components/navbar/navbar.component.ts",{"_index":822,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/components/register/user/register",{"_index":972,"title":{},"body":{"components/RegisterUserPageComponent.html":{},"coverage.html":{}}}],["src/app/pages/hello/hello",{"_index":434,"title":{},"body":{"components/HelloPage.html":{},"coverage.html":{}}}],["src/app/pages/login/login",{"_index":718,"title":{},"body":{"components/LoginPage.html":{},"coverage.html":{}}}],["src/app/pages/register/candidate/register",{"_index":830,"title":{},"body":{"components/RegisterCandidatePage.html":{},"coverage.html":{}}}],["src/app/pages/register/company/register",{"_index":895,"title":{},"body":{"components/RegisterCompanyPage.html":{},"coverage.html":{}}}],["src/app/pages/register/register",{"_index":886,"title":{},"body":{"components/RegisterChoicePage.html":{},"coverage.html":{}}}],["src/app/services/auth/login/login.service.ts",{"_index":788,"title":{},"body":{"injectables/LoginService.html":{},"coverage.html":{}}}],["src/app/services/auth/login/login.service.ts:38",{"_index":801,"title":{},"body":{"injectables/LoginService.html":{}}}],["src/app/services/auth/login/login.service.ts:52",{"_index":809,"title":{},"body":{"injectables/LoginService.html":{}}}],["src/app/services/auth/login/login.service.ts:62",{"_index":811,"title":{},"body":{"injectables/LoginService.html":{}}}],["src/app/services/auth/login/login.service.ts:74",{"_index":795,"title":{},"body":{"injectables/LoginService.html":{}}}],["src/app/services/auth/register/register.service.ts",{"_index":947,"title":{},"body":{"injectables/RegisterService.html":{},"coverage.html":{}}}],["src/app/services/auth/register/register.service.ts:48",{"_index":953,"title":{},"body":{"injectables/RegisterService.html":{}}}],["src/app/services/auth/register/register.service.ts:52",{"_index":955,"title":{},"body":{"injectables/RegisterService.html":{}}}],["src/app/services/auth/register/register.service.ts:56",{"_index":957,"title":{},"body":{"injectables/RegisterService.html":{}}}],["src/app/services/auth/register/register.service.ts:60",{"_index":959,"title":{},"body":{"injectables/RegisterService.html":{}}}],["src/app/services/auth/register/register.service.ts:64",{"_index":961,"title":{},"body":{"injectables/RegisterService.html":{}}}],["src/app/services/auth/register/register.service.ts:68",{"_index":963,"title":{},"body":{"injectables/RegisterService.html":{}}}],["src/app/services/candidate/register/candidate.service.ts",{"_index":107,"title":{},"body":{"injectables/CandidateService.html":{},"coverage.html":{}}}],["src/app/services/candidate/register/candidate.service.ts:53",{"_index":137,"title":{},"body":{"injectables/CandidateService.html":{}}}],["src/app/services/company/register/company.service.ts",{"_index":188,"title":{},"body":{"injectables/CompanyService.html":{},"coverage.html":{}}}],["src/app/services/company/register/company.service.ts:47",{"_index":197,"title":{},"body":{"injectables/CompanyService.html":{}}}],["src/app/services/enums/industries/industry.service.ts",{"_index":675,"title":{},"body":{"injectables/IndustryService.html":{},"coverage.html":{}}}],["src/app/services/enums/industries/industry.service.ts:35",{"_index":679,"title":{},"body":{"injectables/IndustryService.html":{}}}],["src/app/services/greetings/hello.service.ts",{"_index":487,"title":{},"body":{"injectables/HelloService.html":{},"coverage.html":{}}}],["src/app/services/greetings/hello.service.ts:35",{"_index":488,"title":{},"body":{"injectables/HelloService.html":{}}}],["src/app/services/storage/token/token.service.ts",{"_index":1101,"title":{},"body":{"injectables/TokenService.html":{},"coverage.html":{}}}],["src/app/services/utils/local",{"_index":700,"title":{},"body":{"injectables/LocalStorageService.html":{},"coverage.html":{}}}],["src/app/services/utils/string.service.ts",{"_index":1034,"title":{},"body":{"injectables/StringService.html":{},"coverage.html":{}}}],["src/app/services/utils/string.service.ts:102",{"_index":1043,"title":{},"body":{"injectables/StringService.html":{}}}],["src/app/services/utils/string.service.ts:53",{"_index":1057,"title":{},"body":{"injectables/StringService.html":{}}}],["src/app/services/utils/string.service.ts:70",{"_index":1054,"title":{},"body":{"injectables/StringService.html":{}}}],["src/app/services/utils/string.service.ts:84",{"_index":1052,"title":{},"body":{"injectables/StringService.html":{}}}],["src/app/types/components/modetype.ts",{"_index":1122,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/types/http/body/loginrequest.ts",{"_index":785,"title":{},"body":{"interfaces/LoginRequest.html":{},"coverage.html":{}}}],["src/app/types/http/body/registercandidaterequest.ts",{"_index":882,"title":{},"body":{"interfaces/RegisterCandidateRequest.html":{},"coverage.html":{}}}],["src/app/types/http/body/registercompanyrequest.ts",{"_index":937,"title":{},"body":{"interfaces/RegisterCompanyRequest.html":{},"coverage.html":{}}}],["src/app/types/http/body/registerrequest.ts",{"_index":942,"title":{},"body":{"interfaces/RegisterRequest.html":{},"coverage.html":{}}}],["src/app/types/http/response/messageresponse.ts",{"_index":821,"title":{},"body":{"interfaces/MessageResponse.html":{},"coverage.html":{}}}],["src/app/types/http/response/tokenresponse.ts",{"_index":1098,"title":{},"body":{"interfaces/TokenResponse.html":{},"coverage.html":{}}}],["src/app/types/services/classes/http/http.service.ts",{"_index":494,"title":{},"body":{"classes/HttpService.html":{},"coverage.html":{}}}],["src/app/types/services/classes/http/http.service.ts:19",{"_index":503,"title":{},"body":{"classes/HttpService.html":{}}}],["src/app/types/services/classes/http/http.service.ts:25",{"_index":502,"title":{},"body":{"classes/HttpService.html":{}}}],["src/app/types/services/classes/utils/local",{"_index":682,"title":{},"body":{"classes/LocalStorageItemService.html":{},"coverage.html":{}}}],["src/app/types/services/form/form.service.ts",{"_index":507,"title":{},"body":{"interfaces/IFormService.html":{},"coverage.html":{}}}],["src/app/types/services/interfaces/http/get",{"_index":542,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"coverage.html":{}}}],["src/app/types/services/interfaces/http/http.service.ts",{"_index":581,"title":{},"body":{"interfaces/IHttpService.html":{},"coverage.html":{}}}],["src/app/types/services/interfaces/http/login",{"_index":594,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"coverage.html":{}}}],["src/app/types/services/interfaces/http/register",{"_index":620,"title":{},"body":{"interfaces/IRegisterHttpService.html":{},"coverage.html":{}}}],["src/app/types/services/interfaces/http/response",{"_index":1124,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/types/services/interfaces/local/has",{"_index":557,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"coverage.html":{}}}],["src/app/types/services/interfaces/local/local",{"_index":583,"title":{},"body":{"interfaces/ILocalStorageItemService.html":{},"coverage.html":{}}}],["stage",{"_index":1325,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":16,"title":{},"body":{"components/App.html":{}}}],["started",{"_index":1148,"title":{"index.html":{}},"body":{}}],["state",{"_index":1102,"title":{},"body":{"injectables/TokenService.html":{}}}],["statements",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":510,"title":{},"body":{"interfaces/IFormService.html":{}}}],["static",{"_index":1037,"title":{},"body":{"injectables/StringService.html":{}}}],["storage",{"_index":561,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"interfaces/ILocalStorageItemService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"injectables/LoginService.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["storage.service",{"_index":579,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"interfaces/ILoginHttpService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{}}}],["storage.service.ts",{"_index":559,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"injectables/LocalStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:25",{"_index":710,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["storage.service.ts:34",{"_index":714,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["storage/token/token.service",{"_index":814,"title":{},"body":{"injectables/LoginService.html":{}}}],["storagekey",{"_index":571,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"classes/LocalStorageItemService.html":{},"injectables/TokenService.html":{}}}],["store",{"_index":577,"title":{},"body":{"interfaces/IHasLocalStorage.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"injectables/TokenService.html":{}}}],["stored",{"_index":589,"title":{},"body":{"interfaces/ILocalStorageItemService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LoginService.html":{}}}],["stored(value",{"_index":698,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["storing",{"_index":802,"title":{},"body":{"injectables/LoginService.html":{},"injectables/TokenService.html":{}}}],["str",{"_index":1062,"title":{},"body":{"injectables/StringService.html":{}}}],["strength",{"_index":1047,"title":{},"body":{"injectables/StringService.html":{}}}],["string",{"_index":221,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILoginHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"interfaces/LoginRequest.html":{},"interfaces/MessageResponse.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["stringservice",{"_index":843,"title":{"injectables/StringService.html":{}},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{},"coverage.html":{}}}],["stringservice.isstrongerpassword(this.password.value",{"_index":1020,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["stringservice.isvalidemail(this.email.value",{"_index":1019,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["stringservice.isvalidurl(this.linkedinurl.value",{"_index":880,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["stringservice.isvalidurl(this.websiteurl.value",{"_index":933,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["stringservice.titlecase(industry",{"_index":931,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["structure",{"_index":495,"title":{},"body":{"classes/HttpService.html":{},"interfaces/IHttpService.html":{},"interfaces/LoginRequest.html":{},"interfaces/MessageResponse.html":{},"interfaces/RegisterCandidateRequest.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"interfaces/TokenResponse.html":{}}}],["style",{"_index":380,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["styles",{"_index":26,"title":{},"body":{"components/App.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/RegisterUserPageComponent.html":{}}}],["sua",{"_index":1224,"title":{},"body":{"index.html":{}}}],["suas",{"_index":1185,"title":{},"body":{"index.html":{}}}],["subclasses",{"_index":498,"title":{},"body":{"classes/HttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"classes/LocalStorageItemService.html":{}}}],["submission",{"_index":509,"title":{},"body":{"interfaces/IFormService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["submissions",{"_index":512,"title":{},"body":{"interfaces/IFormService.html":{}}}],["submit",{"_index":385,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/IFormService.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["submit(request",{"_index":540,"title":{},"body":{"interfaces/IFormService.html":{},"injectables/RegisterService.html":{}}}],["submit(user",{"_index":835,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["submitobserver",{"_index":539,"title":{},"body":{"interfaces/IFormService.html":{}}}],["submitted",{"_index":520,"title":{},"body":{"interfaces/IFormService.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["submittype",{"_index":517,"title":{},"body":{"interfaces/IFormService.html":{}}}],["subscribe",{"_index":834,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["subscribe(response",{"_index":123,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/LoginService.html":{}}}],["subscribes",{"_index":902,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["success",{"_index":229,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/IFormService.html":{},"components/LoginPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["success(response",{"_index":532,"title":{},"body":{"interfaces/IFormService.html":{},"injectables/RegisterService.html":{}}}],["successful",{"_index":526,"title":{},"body":{"interfaces/IFormService.html":{},"interfaces/ILoginHttpService.html":{},"components/LoginPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/TokenResponse.html":{}}}],["successfully",{"_index":524,"title":{},"body":{"interfaces/IFormService.html":{},"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["successobserver",{"_index":530,"title":{},"body":{"interfaces/IFormService.html":{}}}],["successtype",{"_index":523,"title":{},"body":{"interfaces/IFormService.html":{}}}],["such",{"_index":384,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/RegisterChoicePage.html":{}}}],["sugestões",{"_index":1492,"title":{},"body":{"index.html":{}}}],["superfície",{"_index":1377,"title":{},"body":{"index.html":{}}}],["support",{"_index":1016,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["switch",{"_index":1005,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["system",{"_index":694,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["são",{"_index":1352,"title":{},"body":{"index.html":{}}}],["t",{"_index":552,"title":{},"body":{"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"classes/LocalStorageItemService.html":{},"index.html":{}}}],["table",{"_index":1127,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1126,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":260,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["tamanho",{"_index":1387,"title":{},"body":{"index.html":{}}}],["também",{"_index":1408,"title":{},"body":{"index.html":{}}}],["tap",{"_index":812,"title":{},"body":{"injectables/LoginService.html":{}}}],["tap((response",{"_index":819,"title":{},"body":{"injectables/LoginService.html":{}}}],["tecnologias",{"_index":1202,"title":{},"body":{"index.html":{}}}],["tela",{"_index":1472,"title":{},"body":{"index.html":{}}}],["temos",{"_index":1297,"title":{},"body":{"index.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"components/ImageCardButtonComponent.html":{},"classes/LocalStorageItemService.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["templateurl",{"_index":20,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["tempo",{"_index":1359,"title":{},"body":{"index.html":{}}}],["tenha:example",{"_index":1242,"title":{},"body":{"index.html":{}}}],["ter",{"_index":1220,"title":{},"body":{"index.html":{}}}],["test",{"_index":1508,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["testes",{"_index":1422,"title":{},"body":{"index.html":{}}}],["testos",{"_index":1427,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1428,"title":{},"body":{"index.html":{}}}],["text",{"_index":222,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["textarea",{"_index":249,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/RegisterCompanyPage.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["this._errormessage",{"_index":476,"title":{},"body":{"components/HelloPage.html":{}}}],["this._fieldhelpertext",{"_index":319,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._fieldiconleft",{"_index":334,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._fieldiconright",{"_index":339,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._fieldlabel",{"_index":289,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._fieldmode",{"_index":300,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._fieldname",{"_index":293,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._fieldplaceholder",{"_index":304,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._fieldtype",{"_index":307,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._fieldvalue",{"_index":314,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._greeting",{"_index":470,"title":{},"body":{"components/HelloPage.html":{}}}],["this._imagealt",{"_index":667,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["this._imageheight",{"_index":670,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["this._imageurl",{"_index":664,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["this._imagewidth",{"_index":673,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["this._message",{"_index":422,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["this._mode",{"_index":418,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["this._options",{"_index":275,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._primarybuttontext",{"_index":429,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["this._required",{"_index":347,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this._routerlink",{"_index":661,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["this._secondarybuttontext",{"_index":432,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["this._title",{"_index":415,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.biograph.helper",{"_index":873,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.biograph.mode",{"_index":872,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.biograph.value",{"_index":862,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.candidateservice.register(body).subscribe",{"_index":863,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.clearerrors",{"_index":746,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.companyservice.register(body).subscribe",{"_index":920,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.confirmpassword.helper",{"_index":1001,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.confirmpassword.mode",{"_index":1000,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.confirmpassword.value",{"_index":1031,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.description.helper",{"_index":924,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.description.mode",{"_index":923,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.description.value",{"_index":917,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.email.helper",{"_index":999,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.email.mode",{"_index":998,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.email.value",{"_index":997,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.emailregex.test(email",{"_index":1096,"title":{},"body":{"injectables/StringService.html":{}}}],["this.errormessage",{"_index":482,"title":{},"body":{"components/HelloPage.html":{}}}],["this.fieldplaceholder",{"_index":277,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this.fieldsareinvalid",{"_index":747,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.fieldtype",{"_index":278,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this.fieldvalue",{"_index":351,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this.fieldvaluechanged.emit(this.fieldvalue",{"_index":354,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this.firstname.helper",{"_index":867,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.firstname.mode",{"_index":866,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.firstname.value",{"_index":858,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.form.message",{"_index":761,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.form.mode",{"_index":760,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.fullname.helper",{"_index":922,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.fullname.mode",{"_index":921,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.fullname.value",{"_index":916,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.greeting",{"_index":480,"title":{},"body":{"components/HelloPage.html":{}}}],["this.handleerror(error",{"_index":993,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.handleerror(r",{"_index":753,"title":{},"body":{"components/LoginPage.html":{}}}],["this.handlesuccess(r",{"_index":752,"title":{},"body":{"components/LoginPage.html":{}}}],["this.handlesuccess(response",{"_index":995,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.helloservice.get().subscribe",{"_index":478,"title":{},"body":{"components/HelloPage.html":{}}}],["this.http",{"_index":816,"title":{},"body":{"injectables/LoginService.html":{}}}],["this.http.get(this.url",{"_index":493,"title":{},"body":{"injectables/HelloService.html":{},"injectables/IndustryService.html":{}}}],["this.http.post(this.url",{"_index":183,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{}}}],["this.industries",{"_index":915,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.industries.includes(this.industry.value",{"_index":935,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.industries.length",{"_index":929,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.industries.map((industry",{"_index":930,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.industry.helper",{"_index":928,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.industry.mode",{"_index":927,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.industry.value",{"_index":919,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.industry.value.trim().length",{"_index":934,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.industryservice.getall().subscribe((response",{"_index":914,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.lastname.helper",{"_index":869,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.lastname.mode",{"_index":868,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.lastname.value",{"_index":859,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.linkedinurl.helper",{"_index":871,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.linkedinurl.mode",{"_index":870,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.linkedinurl.value",{"_index":860,"title":{},"body":{"components/RegisterCandidatePage.html":{}}}],["this.loginservice.login(body).subscribe",{"_index":750,"title":{},"body":{"components/LoginPage.html":{}}}],["this.navigatetologin",{"_index":1004,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.onerror.asobservable",{"_index":968,"title":{},"body":{"injectables/RegisterService.html":{}}}],["this.onerror.emit(error",{"_index":969,"title":{},"body":{"injectables/RegisterService.html":{}}}],["this.onsubmit.asobservable",{"_index":966,"title":{},"body":{"injectables/RegisterService.html":{}}}],["this.onsubmit.emit(request",{"_index":967,"title":{},"body":{"injectables/RegisterService.html":{}}}],["this.onsuccess.asobservable",{"_index":970,"title":{},"body":{"injectables/RegisterService.html":{}}}],["this.onsuccess.emit(response",{"_index":971,"title":{},"body":{"injectables/RegisterService.html":{}}}],["this.options",{"_index":309,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["this.password.helper",{"_index":759,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.password.mode",{"_index":758,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.password.value",{"_index":749,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.passwordregex.test(password",{"_index":1097,"title":{},"body":{"injectables/StringService.html":{}}}],["this.registerservice.error.subscribe((error",{"_index":992,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.registerservice.submit",{"_index":996,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.registerservice.success.subscribe((response",{"_index":994,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.router.navigate(['/hello",{"_index":768,"title":{},"body":{"components/LoginPage.html":{}}}],["this.router.navigate(['/login",{"_index":1002,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["this.router.navigate(['register",{"_index":755,"title":{},"body":{"components/LoginPage.html":{}}}],["this.service.error",{"_index":865,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["this.service.submit.subscribe((user",{"_index":874,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["this.service.success",{"_index":864,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["this.storage.getitem(this.storagekey",{"_index":697,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["this.storage.setitem(this.storagekey",{"_index":699,"title":{},"body":{"classes/LocalStorageItemService.html":{}}}],["this.submit(user",{"_index":875,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{}}}],["this.tokenservice.stored",{"_index":815,"title":{},"body":{"injectables/LoginService.html":{}}}],["this.username.helper",{"_index":757,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.username.mode",{"_index":756,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.username.value",{"_index":748,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["this.validprotocols.includes(new",{"_index":1093,"title":{},"body":{"injectables/StringService.html":{}}}],["this.websiteurl.helper",{"_index":926,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.websiteurl.mode",{"_index":925,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["this.websiteurl.value",{"_index":918,"title":{},"body":{"components/RegisterCompanyPage.html":{}}}],["throughout",{"_index":702,"title":{},"body":{"injectables/LocalStorageService.html":{}}}],["title",{"_index":29,"title":{},"body":{"components/App.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["title(value",{"_index":416,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/ImageCardButtonComponent.html":{},"components/RegisterUserPageComponent.html":{}}}],["titlecase",{"_index":1041,"title":{},"body":{"injectables/StringService.html":{}}}],["titlecase(str",{"_index":1055,"title":{},"body":{"injectables/StringService.html":{}}}],["todas",{"_index":1198,"title":{},"body":{"index.html":{}}}],["token",{"_index":611,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"injectables/LoginService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{}}}],["tokenresponse",{"_index":605,"title":{"interfaces/TokenResponse.html":{}},"body":{"interfaces/ILoginHttpService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"interfaces/TokenResponse.html":{},"coverage.html":{}}}],["tokens",{"_index":598,"title":{},"body":{"interfaces/ILoginHttpService.html":{}}}],["tokenservice",{"_index":793,"title":{"injectables/TokenService.html":{}},"body":{"injectables/LoginService.html":{},"injectables/TokenService.html":{},"coverage.html":{}}}],["tolowercase",{"_index":1087,"title":{},"body":{"injectables/StringService.html":{}}}],["top",{"_index":378,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["totalmente",{"_index":1454,"title":{},"body":{"index.html":{}}}],["transforms",{"_index":1059,"title":{},"body":{"injectables/StringService.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["treinamento",{"_index":1478,"title":{},"body":{"index.html":{}}}],["true",{"_index":17,"title":{},"body":{"components/App.html":{},"interfaces/FieldOptions.html":{},"interfaces/ILoginHttpService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":773,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["tsdocs",{"_index":1466,"title":{},"body":{"index.html":{}}}],["tslib",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":146,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"interfaces/MessageResponse.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":1125,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1501,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":232,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["types/components/modetype",{"_index":241,"title":{},"body":{"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/SelectOption.html":{}}}],["types/http/body/loginrequest",{"_index":737,"title":{},"body":{"components/LoginPage.html":{},"injectables/LoginService.html":{}}}],["types/http/body/registercandidaterequest",{"_index":167,"title":{},"body":{"injectables/CandidateService.html":{},"components/RegisterCandidatePage.html":{}}}],["types/http/body/registercompanyrequest",{"_index":205,"title":{},"body":{"injectables/CompanyService.html":{},"components/RegisterCompanyPage.html":{}}}],["types/http/body/registerrequest",{"_index":837,"title":{},"body":{"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{}}}],["types/http/response/messageresponse",{"_index":164,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"components/RegisterCandidatePage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["types/http/response/tokenresponse",{"_index":739,"title":{},"body":{"components/LoginPage.html":{},"injectables/LoginService.html":{}}}],["types/services/classes/http/http.service",{"_index":168,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"injectables/HelloService.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{}}}],["types/services/classes/utils/local",{"_index":1104,"title":{},"body":{"injectables/TokenService.html":{}}}],["types/services/form/form.service",{"_index":964,"title":{},"body":{"injectables/RegisterService.html":{}}}],["types/services/interfaces/http/get",{"_index":492,"title":{},"body":{"injectables/HelloService.html":{},"injectables/IndustryService.html":{}}}],["types/services/interfaces/http/login",{"_index":813,"title":{},"body":{"injectables/LoginService.html":{}}}],["types/services/interfaces/http/register",{"_index":170,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{}}}],["typescript",{"_index":1163,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["typically",{"_index":88,"title":{},"body":{"components/BlankLayoutComponent.html":{}}}],["um",{"_index":1279,"title":{},"body":{"index.html":{}}}],["uma",{"_index":1172,"title":{},"body":{"index.html":{}}}],["understand",{"_index":224,"title":{},"body":{"interfaces/FieldOptions.html":{},"interfaces/SelectOption.html":{}}}],["unexpected",{"_index":1017,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["unitários",{"_index":1424,"title":{},"body":{"index.html":{}}}],["up",{"_index":829,"title":{},"body":{"components/NavbarComponent.html":{},"components/RegisterUserPageComponent.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":762,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["uploads",{"_index":1392,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":1026,"title":{},"body":{"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["url",{"_index":132,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"miscellaneous/typealiases.html":{}}}],["url(url).protocol",{"_index":1094,"title":{},"body":{"injectables/StringService.html":{}}}],["urls",{"_index":1083,"title":{},"body":{"injectables/StringService.html":{}}}],["usando",{"_index":1292,"title":{},"body":{"index.html":{}}}],["usar",{"_index":1328,"title":{},"body":{"index.html":{}}}],["used",{"_index":89,"title":{},"body":{"components/BlankLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"interfaces/TokenResponse.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":727,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["user",{"_index":70,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"coverage.html":{}}}],["user's",{"_index":796,"title":{},"body":{"injectables/LoginService.html":{},"injectables/TokenService.html":{}}}],["username",{"_index":740,"title":{},"body":{"components/LoginPage.html":{},"interfaces/LoginRequest.html":{},"injectables/LoginService.html":{},"components/RegisterUserPageComponent.html":{}}}],["users",{"_index":888,"title":{},"body":{"components/RegisterChoicePage.html":{}}}],["uses",{"_index":190,"title":{},"body":{"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"components/HelloPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{}}}],["using",{"_index":310,"title":{},"body":{"interfaces/FieldOptions.html":{},"classes/LocalStorageItemService.html":{},"injectables/LoginService.html":{},"interfaces/SelectOption.html":{}}}],["uso",{"_index":1287,"title":{},"body":{"index.html":{}}}],["usuário",{"_index":1166,"title":{},"body":{"index.html":{}}}],["usuários",{"_index":1177,"title":{},"body":{"index.html":{}}}],["utiliza",{"_index":1205,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":1426,"title":{},"body":{"index.html":{}}}],["vagas",{"_index":1180,"title":{},"body":{"index.html":{}}}],["valid",{"_index":1050,"title":{},"body":{"injectables/StringService.html":{}}}],["validate",{"_index":776,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"injectables/StringService.html":{}}}],["validates",{"_index":1044,"title":{},"body":{"injectables/StringService.html":{}}}],["validating",{"_index":1066,"title":{},"body":{"injectables/StringService.html":{}}}],["validation",{"_index":1036,"title":{},"body":{"injectables/StringService.html":{}}}],["validprotocols",{"_index":1085,"title":{},"body":{"injectables/StringService.html":{}}}],["value",{"_index":152,"title":{},"body":{"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"interfaces/FieldOptions.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/ILocalStorageItemService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":678,"title":{},"body":{"injectables/IndustryService.html":{},"miscellaneous/typealiases.html":{}}}],["vantagem",{"_index":1338,"title":{},"body":{"index.html":{}}}],["vantagens",{"_index":1374,"title":{},"body":{"index.html":{}}}],["var",{"_index":36,"title":{},"body":{"components/App.html":{},"components/BlankLayoutComponent.html":{},"components/DefaultLayoutComponent.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"components/LoginPage.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"components/RegisterUserPageComponent.html":{}}}],["variable",{"_index":1113,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1515,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1509,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["veloz",{"_index":1398,"title":{},"body":{"index.html":{}}}],["vem",{"_index":1234,"title":{},"body":{"index.html":{}}}],["verificação",{"_index":1468,"title":{},"body":{"index.html":{}}}],["verify",{"_index":944,"title":{},"body":{"interfaces/RegisterRequest.html":{}}}],["verifying",{"_index":614,"title":{},"body":{"interfaces/ILoginHttpService.html":{},"injectables/LoginService.html":{}}}],["version",{"_index":100,"title":{},"body":{"components/BlankLayoutComponent.html":{},"injectables/CandidateService.html":{},"injectables/CompanyService.html":{},"components/DefaultLayoutComponent.html":{},"interfaces/FieldOptions.html":{},"components/FooterComponent.html":{},"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{},"components/HelloPage.html":{},"injectables/HelloService.html":{},"classes/HttpService.html":{},"interfaces/IFormService.html":{},"interfaces/IGetAllHttpService.html":{},"interfaces/IGetHttpService.html":{},"interfaces/IHasLocalStorage.html":{},"interfaces/IHttpService.html":{},"interfaces/ILocalStorageItemService.html":{},"interfaces/ILoginHttpService.html":{},"interfaces/IRegisterHttpService.html":{},"components/ImageCardButtonComponent.html":{},"injectables/IndustryService.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"injectables/LoginService.html":{},"components/NavbarComponent.html":{},"components/RegisterCandidatePage.html":{},"interfaces/RegisterCandidateRequest.html":{},"components/RegisterChoicePage.html":{},"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{},"interfaces/RegisterRequest.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{},"interfaces/SelectOption.html":{},"injectables/StringService.html":{},"injectables/TokenService.html":{},"properties.html":{}}}],["versão",{"_index":1227,"title":{},"body":{"index.html":{}}}],["via",{"_index":1238,"title":{},"body":{"index.html":{}}}],["vindo(a",{"_index":1151,"title":{},"body":{"index.html":{}}}],["viria",{"_index":1370,"title":{},"body":{"index.html":{}}}],["voc",{"_index":1249,"title":{},"body":{"index.html":{}}}],["void",{"_index":395,"title":{},"body":{"components/FormLayoutComponent.html":{},"components/HelloPage.html":{},"components/ImageCardButtonComponent.html":{},"classes/LocalStorageItemService.html":{},"injectables/LocalStorageService.html":{},"components/LoginPage.html":{},"components/RegisterCandidatePage.html":{},"components/RegisterCompanyPage.html":{},"injectables/RegisterService.html":{},"components/RegisterUserPageComponent.html":{}}}],["vontade",{"_index":1485,"title":{},"body":{"index.html":{}}}],["vulnerabilidades",{"_index":1386,"title":{},"body":{"index.html":{}}}],["want",{"_index":894,"title":{},"body":{"components/RegisterChoicePage.html":{}}}],["warning",{"_index":1505,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["way",{"_index":586,"title":{},"body":{"interfaces/ILocalStorageItemService.html":{},"classes/LocalStorageItemService.html":{}}}],["weak",{"_index":1021,"title":{},"body":{"components/RegisterUserPageComponent.html":{}}}],["website",{"_index":908,"title":{},"body":{"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{}}}],["websiteurl",{"_index":909,"title":{},"body":{"components/RegisterCompanyPage.html":{},"interfaces/RegisterCompanyRequest.html":{}}}],["whole",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width",{"_index":639,"title":{},"body":{"components/ImageCardButtonComponent.html":{}}}],["window.scrollto",{"_index":424,"title":{},"body":{"components/FormLayoutComponent.html":{},"interfaces/FormMessageOptions.html":{}}}],["word",{"_index":1060,"title":{},"body":{"injectables/StringService.html":{}}}],["word.charat(0).touppercase",{"_index":1090,"title":{},"body":{"injectables/StringService.html":{}}}],["word.slice(1",{"_index":1091,"title":{},"body":{"injectables/StringService.html":{}}}],["words",{"_index":1064,"title":{},"body":{"injectables/StringService.html":{}}}],["world",{"_index":486,"title":{},"body":{"components/HelloPage.html":{}}}],["z",{"_index":1073,"title":{},"body":{"injectables/StringService.html":{}}}],["z])(?=.*[!@#$&*])(?=.*[0",{"_index":1079,"title":{},"body":{"injectables/StringService.html":{}}}],["z]).{8",{"_index":1081,"title":{},"body":{"injectables/StringService.html":{}}}],["z]{2",{"_index":1075,"title":{},"body":{"injectables/StringService.html":{}}}],["za",{"_index":1072,"title":{},"body":{"injectables/StringService.html":{}}}],["zone.js",{"_index":1141,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/App.html":{"url":"components/App.html","title":"component - App","body":"\n                   \n\n\n\n\n\n  Components\n  \n  App\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        The main Application Component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n/**\n * The main Application Component.\n */\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styles: [],\n  standalone: true,\n})\nexport class App {\n  /** The application title */\n  protected title = 'JaVagas';\n}\n\n    \n\n    \n        {{ title }}\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ title }}'\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'App'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BlankLayoutComponent.html":{"url":"components/BlankLayoutComponent.html","title":"component - BlankLayoutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BlankLayoutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/layouts/blank-layout/blank-layout.component.ts\n\n\n\n    \n        Description\n    \n    \n        BlankLayoutComponent is a simple layout component that serves as a\nblank canvas for pages that do not require a header, footer, or sidebar.\nIt is typically used for authentication pages like login and registration.\nIt has an anchor to send user to Main Page and a logo image.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-blank-layout\n            \n\n\n            \n                imports\n                \n                            NgOptimizedImage\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./blank-layout.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { NgOptimizedImage } from '@angular/common';\nimport { RouterLink } from '@angular/router';\n\n/**\n * BlankLayoutComponent is a simple layout component that serves as a\n * blank canvas for pages that do not require a header, footer, or sidebar.\n * It is typically used for authentication pages like login and registration.\n * It has an anchor to send user to Main Page and a logo image.\n *\n * @since 0.2\n * @version 0.2\n */\n@Component({\n  selector: 'app-blank-layout',\n  imports: [NgOptimizedImage, RouterLink],\n  templateUrl: './blank-layout.component.html',\n})\nexport class BlankLayoutComponent {}\n\n    \n\n    \n        \n  \n    \n  \n  \n  \n    Go back to Hello page.\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                Go back to Hello page.  '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BlankLayoutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CandidateService.html":{"url":"injectables/CandidateService.html","title":"injectable - CandidateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CandidateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/candidate/register/candidate.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling candidate registration operations.\nThis service provides methods to register a candidate\nand manage the registration process.\nExample :import { CandidateService } from './candidate.service';\nconst candidateService = new CandidateService();\nconst user!: RegisterCandidateRequest; // set the user details\ncandidateService.registerCandidate(user)\n .subscribe(response => {\n console.log(response.message); // Handle the response message\n });\n            \n\n            \n                Extends\n            \n            \n                            HttpService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                URL\n                            \n                            \n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(candidate: RegisterCandidateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/candidate/register/candidate.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Registers a candidate with the provided registration request.\nThis method sends a POST request to the candidate registration endpoint\nwith the candidate details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                candidate\n                                            \n                                                            RegisterCandidateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The registration request containing candidate details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An observable of the message response from the server.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : environment.apiUrl.concat('/auth/candidate/register')\n                    \n                \n                        \n                            \n                                Inherited from         HttpService\n\n                            \n                        \n                    \n                        \n                                Defined in         HttpService:42\n\n                        \n                    \n\n            \n                \n                    The URL endpoint for the candidate registration API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                        \n                            \n                                Inherited from         HttpService\n\n                            \n                        \n                    \n                        \n                                Defined in         HttpService:25\n\n                        \n                    \n\n            \n                \n                    Http Client to make HTTP requests.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { MessageResponse } from '../../../types/http/response/MessageResponse';\nimport { environment } from '../../../../environments/environment';\nimport {\n  RegisterCandidateRequest\n} from '../../../types/http/body/RegisterCandidateRequest';\nimport { HttpService } from '../../../types/services/classes/http/http.service';\nimport {\n  IRegisterHttpService\n} from '../../../types/services/interfaces/http/register-http.service';\n\n/**\n * Service for handling candidate registration operations.\n * This service provides methods to register a candidate\n * and manage the registration process.\n * @group Services\n * @group CandidateService\n * @version 0.2\n * @since 0.2\n * @example\n * import { CandidateService } from './candidate.service';\n * const candidateService = new CandidateService();\n * const user!: RegisterCandidateRequest; // set the user details\n * candidateService.registerCandidate(user)\n *  .subscribe(response => {\n *  console.log(response.message); // Handle the response message\n *  });\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CandidateService\n  extends HttpService\n  implements IRegisterHttpService\n{\n  /**\n   * The URL endpoint for the candidate registration API.\n   * @override {@link HttpService.URL} A abstract class to Http Methods\n   * @protected\n   * @since 0.2\n   */\n  override URL = environment.apiUrl.concat('/auth/candidate/register');\n\n  /**\n   * Registers a candidate with the provided registration request.\n   * This method sends a POST request to the candidate registration endpoint\n   * with the candidate details.\n   * @param candidate The registration request containing candidate details.\n   * @returns An observable of the message response from the server.\n   * @implements {@link IRegisterHttpService.register}\n   * @since 0.2\n   */\n  public register(candidate: RegisterCandidateRequest) {\n    return this.http.post(this.URL, candidate, {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CompanyService.html":{"url":"injectables/CompanyService.html","title":"injectable - CompanyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CompanyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/company/register/company.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling company registration operations.\nThis service provides methods to register a new company.\nItSpec uses Angular's HttpClient to make HTTP requests to the backend.\nExample :import { CompanyService } from './company.service';\nconst companyService = new CompanyService();\nconst user!: RegisterCompanyRequest;\ncompanyService.registerCompany(user)\n .subscribe(response => {\n console.log(response.message); // Handle the response message\n });\n            \n\n            \n                Extends\n            \n            \n                            HttpService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                URL\n                            \n                            \n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(company: RegisterCompanyRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/company/register/company.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Registers a new company.\nThis method sends a POST request to the backend with the company registration details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                company\n                                            \n                                                            RegisterCompanyRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The company registration request containing necessary details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits a MessageResponse containing the result of the registration.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : environment.apiUrl.concat('/auth/company/register')\n                    \n                \n                        \n                            \n                                Inherited from         HttpService\n\n                            \n                        \n                    \n                        \n                                Defined in         HttpService:38\n\n                        \n                    \n\n            \n                \n                    Base URL for the Company Service.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                        \n                            \n                                Inherited from         HttpService\n\n                            \n                        \n                    \n                        \n                                Defined in         HttpService:25\n\n                        \n                    \n\n            \n                \n                    Http Client to make HTTP requests.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { MessageResponse } from '../../../types/http/response/MessageResponse';\nimport { environment } from '../../../../environments/environment';\n\nimport { RegisterCompanyRequest } from '../../../types/http/body/RegisterCompanyRequest';\nimport { HttpService } from '../../../types/services/classes/http/http.service';\nimport { IRegisterHttpService } from '../../../types/services/interfaces/http/register-http.service';\n\n/**\n * Service for handling company registration operations.\n * This service provides methods to register a new company.\n * ItSpec uses Angular's HttpClient to make HTTP requests to the backend.\n * @group Services\n * @group CompanyService\n * @version 0.2\n * @since 0.2\n * @example\n * import { CompanyService } from './company.service';\n * const companyService = new CompanyService();\n * const user!: RegisterCompanyRequest;\n * companyService.registerCompany(user)\n *  .subscribe(response => {\n *  console.log(response.message); // Handle the response message\n *  });\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CompanyService\n  extends HttpService\n  implements IRegisterHttpService\n{\n  /**\n   * Base URL for the Company Service.\n   * @override\n   */\n  override URL = environment.apiUrl.concat('/auth/company/register');\n\n  /**\n   * Registers a new company.\n   * This method sends a POST request to the backend with the company registration details.\n   * @param company The company registration request containing necessary details.\n   * @returns An Observable that emits a MessageResponse containing the result of the registration.\n   * @since 0.2\n   */\n  register(company: RegisterCompanyRequest): Observable {\n    return this.http.post(this.URL, company, {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DefaultLayoutComponent.html":{"url":"components/DefaultLayoutComponent.html","title":"component - DefaultLayoutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DefaultLayoutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/layouts/default-layout/default-layout.component.ts\n\n\n\n    \n        Description\n    \n    \n        DefaultLayoutComponent is a simple component that represents the default layout\nof the application.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-default-layout\n            \n\n\n            \n                imports\n                \n                                FooterComponent\n                                NavbarComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./default-layout.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FooterComponent } from '../../footer/footer.component';\nimport { NavbarComponent } from '../../navbar/navbar.component';\n\n/**\n * DefaultLayoutComponent is a simple component that represents the default layout\n * of the application.\n * @version 0.1.1\n * @since 0.1.1\n */\n@Component({\n  selector: 'app-default-layout',\n  imports: [FooterComponent, NavbarComponent],\n  templateUrl: './default-layout.component.html',\n})\nexport class DefaultLayoutComponent {}\n\n    \n\n    \n        \n  \n  \n    \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DefaultLayoutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FieldOptions.html":{"url":"interfaces/FieldOptions.html","title":"interface - FieldOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FieldOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/form/field/field.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface to Organize the field options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            helper\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        helper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        helper:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Helper Text of the field.\nA simple and optional text that helps the user to understand\nabout the field or errors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:         ModeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ModeType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The mode of the field.\nDefine if it is an error, success, etc...\nSee ModeType Types Available.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The value of the field.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { getClassMode, ModeType } from '../../../types/components/modetype';\n\n/**\n * FieldTypes is a type that represents the different services of fields that can be used in a form.\n * ItSpec includes text, email, password, number, textarea, and select.\n * @version 0.2\n * @since 0.2\n */\nexport type FieldTypes =\n  | 'text'\n  | 'email'\n  | 'password'\n  | 'number'\n  | 'textarea'\n  | 'select'\n  | 'custom'\n  | 'url';\n/**\n * _FieldType is a type that represents the different HTML elements that can be used in a form field.\n * ItSpec includes HTMLSelectElement, HTMLInputElement, and HTMLTextAreaElement.\n * @version 0.2\n * @since 0.2\n */\ntype _FieldType = HTMLSelectElement | HTMLInputElement | HTMLTextAreaElement;\n\n/**\n * Interface to Organize the field options.\n * @version 0.2\n * @since 0.2\n */\nexport interface FieldOptions {\n  /**\n   * The value of the field.\n   * @since 0.2\n   */\n  value: string;\n  /**\n   * The mode of the field.\n   * Define if it is an error, success, etc...\n   * @see ModeType Types Available.\n   * @since 0.2\n   */\n  mode: ModeType;\n  /**\n   * The Helper Text of the field.\n   * A simple and optional text that helps the user to understand\n   * about the field or errors.\n   * @since 0.2\n   * @optional Can be an empty string.\n   */\n  helper: string;\n}\n\n/**\n * SelectOption is an interface that represents an option in a select field.\n * @version 0.2\n * @since 0.2\n */\nexport interface SelectOption {\n  /**\n   * The value of the option tag.\n   * @since 0.2\n   */\n  value: string;\n  /**\n   * The inner text of the option tag.\n   * @since 0.2\n   */\n  label: string;\n}\n\n/**\n * FieldComponent is a simple component that represents a field in a form.\n * ItSpec can be used to create input fields, text areas, etc.\n * @version 0.2\n * @since 0.2\n */\n@Component({\n  selector: 'app-field',\n  imports: [NgClass, FormsModule],\n  templateUrl: './field.component.html',\n})\nexport class FieldComponent {\n  /**\n   * Event emitter that emits the value of the field when it changes.\n   * ItSpec is used to communicate with the parent component.\n   * @since 0.2\n   */\n  @Output() fieldValueChanged = new EventEmitter();\n\n  /**\n   * The options for a select field, it is used to set the placeholder and other\n   * options for the field when it is a Select.\n   * @since 0.2\n   * @private\n   */\n  private _options?: SelectOption[];\n\n  /**\n   * The options for a select field, it is used to set the placeholder and other\n   * options for the field when it is a Select.\n   * @since 0.2\n   */\n  get options(): SelectOption[] {\n    if (!this._options) {\n      return [];\n    }\n    return this._options;\n  }\n\n  /**\n   * The options for a select field, it is used to set the placeholder and other\n   * options for the field when it is a Select.\n   * @since 0.2\n   */\n  @Input() set options(value: SelectOption[]) {\n    let placeholder: SelectOption = {\n      label: this.fieldPlaceholder,\n      value: ' ',\n    };\n    this._options = [placeholder, ...value];\n    if (this.fieldType !== 'select') {\n      console.warn(\n        'The options property is only used for select fields. ' +\n          'ItSpec will not have any effect on other field services.',\n      );\n    }\n  }\n\n  /**\n   * The ngClass to be applied to the field.\n   * ItSpec can be used to apply additional classes to the field.\n   * @since 0.2\n   */\n  get ngClass(): string {\n    return getClassMode(this.fieldMode);\n  }\n\n  /**\n   * The text from field label.\n   * @since 0.2\n   * @private\n   */\n  private _fieldLabel!: string;\n\n  /**\n   * The text from field label.\n   * @since 0.2\n   */\n  get fieldLabel(): string {\n    return this._fieldLabel;\n  }\n\n  /**\n   * The text from field label.\n   * @since 0.2\n   */\n  @Input() set fieldLabel(value: string) {\n    this._fieldLabel = value;\n  }\n\n  /**\n   * The name of the field.\n   * @since 0.2\n   * @private\n   */\n  private _fieldName!: string;\n\n  /**\n   * The name of the field.\n   * @since 0.2\n   */\n  get fieldName(): string {\n    return this._fieldName;\n  }\n\n  /**\n   * The name of the field.\n   * @since 0.2\n   */\n  @Input() set fieldName(value: string) {\n    this._fieldName = value;\n  }\n\n  /**\n   * The Mode of the field, it is the Bulma colors\n   * (danger, success, default, etc...).\n   * @see ModeType Types Available.\n   * @since 0.2\n   * @private\n   */\n  private _fieldMode: ModeType = 'DEFAULT';\n\n  /**\n   * The Mode of the field, it is the Bulma colors\n   * (danger, success, default, etc...).\n   * @see ModeType Types Available.\n   * @since 0.2\n   */\n  get fieldMode(): ModeType {\n    return this._fieldMode;\n  }\n\n  /**\n   * The Mode of the field, it is the Bulma colors\n   * (danger, success, default, etc...).\n   * @see ModeType Types Available.\n   * @since 0.2\n   */\n  @Input() set fieldMode(value: ModeType) {\n    this._fieldMode = value;\n  }\n\n  /**\n   * The placeholder of the field.\n   * @since 0.2\n   * @private\n   */\n  private _fieldPlaceholder = '';\n\n  /**\n   * The placeholder of the field.\n   * @since 0.2\n   */\n  get fieldPlaceholder(): string {\n    return this._fieldPlaceholder;\n  }\n\n  /**\n   * The placeholder of the field.\n   * @since 0.2\n   */\n  @Input() set fieldPlaceholder(value: string) {\n    this._fieldPlaceholder = value;\n  }\n\n  /**\n   * The type of the field, it is the HTML input services.\n   * @see FieldTypes Types Available.\n   * @since 0.2\n   * @private\n   */\n  private _fieldType!: FieldTypes;\n\n  /**\n   * The type of the field, it is the HTML input services.\n   * @see FieldTypes Types Available.\n   * @since 0.2\n   */\n  get fieldType(): FieldTypes {\n    return this._fieldType;\n  }\n\n  /**\n   * The type of the field, it is the HTML input services.\n   * @see FieldTypes Types Available.\n   * @since 0.2\n   */\n  @Input() set fieldType(value: FieldTypes) {\n    this._fieldType = value;\n    if (!this.options) {\n      console.warn(\n        'The options property is not set. ' +\n          'ItSpec will not have any effect on the field type: ' +\n          value +\n          '. ' +\n          'If you are using a select field, please set the options property.',\n      );\n    }\n  }\n\n  /**\n   * The value of the field.\n   * When it changes, it emits the fieldValueChanged event.\n   * @since 0.2\n   * @private\n   */\n  private _fieldValue = '';\n\n  /**\n   * The value of the field.\n   * When it changes, it emits the fieldValueChanged event.\n   * @since 0.2\n   */\n  get fieldValue(): string {\n    return this._fieldValue;\n  }\n\n  /**\n   * The value of the field.\n   * When it changes, it emits the fieldValueChanged event.\n   * @since 0.2\n   */\n  @Input() set fieldValue(value: string) {\n    this._fieldValue = value;\n  }\n\n  /**\n   * The helper text of the field.\n   * A little text that helps the user to understand about the field or errors.\n   * @since 0.2\n   * @private\n   */\n  private _fieldHelperText = '';\n\n  /**\n   * The helper text of the field.\n   * A little text that helps the user to understand about the field or errors.\n   * @since 0.2\n   */\n  get fieldHelperText(): string {\n    return this._fieldHelperText;\n  }\n\n  /**\n   * The helper text of the field.\n   * A little text that helps the user to understand about the field or errors.\n   * @since 0.2\n   */\n  @Input() set fieldHelperText(value: string) {\n    this._fieldHelperText = value;\n  }\n\n  /**\n   * The icon to be displayed on the left side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   * @private\n   */\n  private _fieldIconLeft = '';\n\n  /**\n   * The icon to be displayed on the left side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   */\n  get fieldIconLeft(): string {\n    return this._fieldIconLeft;\n  }\n\n  /**\n   * The icon to be displayed on the left side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   */\n  @Input() set fieldIconLeft(value: string) {\n    this._fieldIconLeft = value;\n  }\n\n  /**\n   * The icon to be displayed on the right side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   * @private\n   */\n  private _fieldIconRight = '';\n\n  /**\n   * The icon to be displayed on the right side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   */\n  get fieldIconRight(): string {\n    return this._fieldIconRight;\n  }\n\n  /**\n   * The icon to be displayed on the right side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   */\n  @Input() set fieldIconRight(value: string) {\n    this._fieldIconRight = value;\n  }\n\n  /**\n   * Indicates if the field is required.\n   * If true, the field will be marked as required.\n   * @since 0.2\n   * @private\n   */\n  private _required = false;\n\n  /**\n   * Indicates if the field is required.\n   * If true, the field will be marked as required.\n   * @since 0.2\n   */\n  get required(): boolean {\n    return this._required;\n  }\n\n  /**\n   * Indicates if the field is required.\n   * If true, the field will be marked as required.\n   * @since 0.2\n   */\n  @Input() set required(value: boolean) {\n    this._required = value;\n  }\n\n  /**\n   * Method to emit the value of the field when it changes.\n   * @param event\n   * @since 0.2\n   * @protected\n   */\n  protected emitValue(event: any) {\n    this.fieldValue = (event.target as _FieldType).value;\n    this.fieldValueChanged.emit(this.fieldValue);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FooterComponent.html":{"url":"components/FooterComponent.html","title":"component - FooterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FooterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/footer/footer.component.ts\n\n\n\n    \n        Description\n    \n    \n        FooterComponent is a simple component that represents the footer\nof the application.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-footer\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./footer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * FooterComponent is a simple component that represents the footer\n * of the application.\n * @version 0.1.1\n * @since 0.1.1\n */\n@Component({\n  selector: 'app-footer',\n  imports: [],\n  templateUrl: './footer.component.html',\n})\nexport class FooterComponent {}\n\n    \n\n    \n        \n  \n    \n      JaVagas by\n      Ricardo Állan Costa.\n      The source code is licensed\n      \n        Apache 2.0.\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            JaVagas by      Ricardo Állan Costa.      The source code is licensed              Apache 2.0.  '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FooterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormLayoutComponent.html":{"url":"components/FormLayoutComponent.html","title":"component - FormLayoutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FormLayoutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/layouts/form-layout/form-layout.component.ts\n\n\n\n    \n        Description\n    \n    \n        FormLayoutComponent is a simple component that represents a form layout.\nUsed in Login and Register pages.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-form-layout\n            \n\n\n            \n                imports\n                \n                                BlankLayoutComponent\n                            NgClass\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./form-layout.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                mode\n                            \n                            \n                                primaryButtonText\n                            \n                            \n                                secondaryButtonText\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                primaryButtonClick\n                            \n                            \n                                secondaryButtonClick\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    title\n                                \n                                \n                                    mode\n                                \n                                \n                                    ngClass\n                                \n                                \n                                    message\n                                \n                                \n                                    primaryButtonText\n                                \n                                \n                                    secondaryButtonText\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        message\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:133\n                            \n                        \n                \n                    \n                        The message to be displayed in the form layout.\nThis can be used to show additional information, instructions or errors.\nAnd have the mode defined in FormLayoutComponent.mode.\nThis will also scroll to the top of the page when set.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        mode\n                    \n                \n                \n                    \n                        Type :         ModeType\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:95\n                            \n                        \n                \n                    \n                        The mode of the form layout message.\nThis can be used to define the style of the message,\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        primaryButtonText\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:159\n                            \n                        \n                \n                    \n                        The Primary Button text. That will be used such submit button.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        secondaryButtonText\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:181\n                            \n                        \n                \n                    \n                        The Secondary Button text. That will be used such link to register page.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:70\n                            \n                        \n                \n                    \n                        The title of the form layout.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        primaryButtonClick\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:45\n                            \n                        \n                \n                    \n                        Event emitter for primary button click.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        secondaryButtonClick\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:50\n                            \n                        \n                \n                    \n                        Event emitter for secondary button click.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n\n                \n                    \n                        gettitle()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:62\n                                \n                            \n                    \n                        \n                                The title of the form layout.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        settitle(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:70\n                                \n                            \n                    \n                        \n                                The title of the form layout.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        mode\n                    \n                \n\n                \n                    \n                        getmode()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:86\n                                \n                            \n                    \n                        \n                                The mode of the form layout message.\nThis can be used to define the style of the message,\n\n\n                                \n                                \n                                \n                                    Returns :         ModeType\n\n                                \n                        \n                    \n\n                \n                    \n                        setmode(value: ModeType)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:95\n                                \n                            \n                    \n                        \n                                The mode of the form layout message.\nThis can be used to define the style of the message,\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            ModeType\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        ngClass\n                    \n                \n\n                \n                    \n                        getngClass()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:104\n                                \n                            \n                    \n                        \n                                The CSS class for the form layout based on the mode.\nThis is used to apply different styles to the form layout based on the mode.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        message\n                    \n                \n\n                \n                    \n                        getmessage()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:122\n                                \n                            \n                    \n                        \n                                The message to be displayed in the form layout.\nThis can be used to show additional information, instructions or errors.\nAnd have the mode defined in FormLayoutComponent.mode.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setmessage(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:133\n                                \n                            \n                    \n                        \n                                The message to be displayed in the form layout.\nThis can be used to show additional information, instructions or errors.\nAnd have the mode defined in FormLayoutComponent.mode.\nThis will also scroll to the top of the page when set.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        primaryButtonText\n                    \n                \n\n                \n                    \n                        getprimaryButtonText()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:151\n                                \n                            \n                    \n                        \n                                The Primary Button text. That will be used such submit button.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setprimaryButtonText(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:159\n                                \n                            \n                    \n                        \n                                The Primary Button text. That will be used such submit button.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        secondaryButtonText\n                    \n                \n\n                \n                    \n                        getsecondaryButtonText()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:173\n                                \n                            \n                    \n                        \n                                The Secondary Button text. That will be used such link to register page.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setsecondaryButtonText(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/layouts/form-layout/form-layout.component.ts:181\n                                \n                            \n                    \n                        \n                                The Secondary Button text. That will be used such link to register page.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { BlankLayoutComponent } from '../blank-layout/blank-layout.component';\nimport { getClassMode, ModeType } from '../../../types/components/modetype';\nimport { NgClass } from '@angular/common';\n\n/**\n * FormMessageOptions is an interface that represents the options for the form message.\n * ItSpec includes the message and the mode of the message.\n * @version 0.2\n * @since 0.2\n */\nexport interface FormMessageOptions {\n  /**\n   * The message to be displayed in the form layout.\n   * This can be used to show additional information, instructions or errors.\n   * And have the mode defined in {@link FormLayoutComponent.mode}.\n   * @since 0.2\n   */\n  message: string;\n\n  /**\n   * The mode of the form layout message.\n   * This can be used to define the style of the message,\n   * @since 0.2\n   */\n  mode: ModeType;\n}\n\n/**\n * FormLayoutComponent is a simple component that represents a form layout.\n * Used in Login and Register pages.\n * @version 0.2\n * @since 0.2\n */\n@Component({\n  selector: 'app-form-layout',\n  imports: [BlankLayoutComponent, NgClass],\n  templateUrl: './form-layout.component.html',\n})\nexport class FormLayoutComponent {\n  /**\n   * Event emitter for primary button click.\n   * @since 0.2\n   */\n  @Output() primaryButtonClick = new EventEmitter();\n  /**\n   * Event emitter for secondary button click.\n   * @since 0.2\n   */\n  @Output() secondaryButtonClick = new EventEmitter();\n\n  /**\n   * The title of the form layout.\n   * @since 0.2\n   */\n  private _title!: string;\n\n  /**\n   * The title of the form layout.\n   * @since 0.2\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * The title of the form layout.\n   * @since 0.2\n   */\n  @Input() set title(value: string) {\n    this._title = value;\n  }\n\n  /**\n   * The mode of the form layout message.\n   * This can be used to define the style of the message,\n   * @since 0.2\n   * @private\n   */\n  private _mode: ModeType = 'DEFAULT';\n  /**\n   * The mode of the form layout message.\n   * This can be used to define the style of the message,\n   * @since 0.2\n   */\n  get mode(): ModeType {\n    return this._mode;\n  }\n\n  /**\n   * The mode of the form layout message.\n   * This can be used to define the style of the message,\n   * @since 0.2\n   */\n  @Input() set mode(value: ModeType) {\n    this._mode = value;\n  }\n\n  /**\n   * The CSS class for the form layout based on the mode.\n   * This is used to apply different styles to the form layout based on the mode.\n   * @since 0.2\n   */\n  get ngClass(): string {\n    return getClassMode(this.mode);\n  }\n\n  /**\n   * The message to be displayed in the form layout.\n   * This can be used to show additional information, instructions or errors.\n   * And have the mode defined in {@link FormLayoutComponent.mode}.\n   * @since 0.2\n   * @private\n   */\n  private _message = '';\n  /**\n   * The message to be displayed in the form layout.\n   * This can be used to show additional information, instructions or errors.\n   * And have the mode defined in {@link FormLayoutComponent.mode}.\n   * @since 0.2\n   */\n  get message(): string {\n    return this._message;\n  }\n\n  /**\n   * The message to be displayed in the form layout.\n   * This can be used to show additional information, instructions or errors.\n   * And have the mode defined in {@link FormLayoutComponent.mode}.\n   * This will also scroll to the top of the page when set.\n   * @since 0.2\n   */\n  @Input() set message(value: string) {\n    this._message = value;\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }\n\n  /**\n   * The Primary Button text. That will be used such submit button.\n   * @private\n   * @since 0.2\n   */\n  private _primaryButtonText!: string;\n  /**\n   * The Primary Button text. That will be used such submit button.\n   * @since 0.2\n   */\n  get primaryButtonText(): string {\n    return this._primaryButtonText;\n  }\n\n  /**\n   * The Primary Button text. That will be used such submit button.\n   * @since 0.2\n   */\n  @Input() set primaryButtonText(value: string) {\n    this._primaryButtonText = value;\n  }\n\n  /**\n   * The Secondary Button text. That will be used such link to register page.\n   * @private\n   * @since 0.2\n   */\n  private _secondaryButtonText!: string;\n  /**\n   * The Secondary Button text. That will be used such link to register page.\n   * @since 0.2\n   */\n  get secondaryButtonText(): string {\n    return this._secondaryButtonText;\n  }\n\n  /**\n   * The Secondary Button text. That will be used such link to register page.\n   * @since 0.2\n   */\n  @Input() set secondaryButtonText(value: string) {\n    this._secondaryButtonText = value;\n  }\n}\n\n    \n\n    \n        \n  @if (message) {\n    \n      \n      {{ message }}\n    \n  }\n\n  \n    {{ title }}\n    \n    \n      {{ primaryButtonText }}\n    \n    \n    \n      {{ secondaryButtonText }}\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  @if (message) {                {{ message }}      }      {{ title }}              {{ primaryButtonText }}                  {{ secondaryButtonText }}      '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FormLayoutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormMessageOptions.html":{"url":"interfaces/FormMessageOptions.html","title":"interface - FormMessageOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormMessageOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/layouts/form-layout/form-layout.component.ts\n        \n\n\n            \n                Description\n            \n            \n                FormMessageOptions is an interface that represents the options for the form message.\nItSpec includes the message and the mode of the message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The message to be displayed in the form layout.\nThis can be used to show additional information, instructions or errors.\nAnd have the mode defined in FormLayoutComponent.mode.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:         ModeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ModeType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The mode of the form layout message.\nThis can be used to define the style of the message,\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { BlankLayoutComponent } from '../blank-layout/blank-layout.component';\nimport { getClassMode, ModeType } from '../../../types/components/modetype';\nimport { NgClass } from '@angular/common';\n\n/**\n * FormMessageOptions is an interface that represents the options for the form message.\n * ItSpec includes the message and the mode of the message.\n * @version 0.2\n * @since 0.2\n */\nexport interface FormMessageOptions {\n  /**\n   * The message to be displayed in the form layout.\n   * This can be used to show additional information, instructions or errors.\n   * And have the mode defined in {@link FormLayoutComponent.mode}.\n   * @since 0.2\n   */\n  message: string;\n\n  /**\n   * The mode of the form layout message.\n   * This can be used to define the style of the message,\n   * @since 0.2\n   */\n  mode: ModeType;\n}\n\n/**\n * FormLayoutComponent is a simple component that represents a form layout.\n * Used in Login and Register pages.\n * @version 0.2\n * @since 0.2\n */\n@Component({\n  selector: 'app-form-layout',\n  imports: [BlankLayoutComponent, NgClass],\n  templateUrl: './form-layout.component.html',\n})\nexport class FormLayoutComponent {\n  /**\n   * Event emitter for primary button click.\n   * @since 0.2\n   */\n  @Output() primaryButtonClick = new EventEmitter();\n  /**\n   * Event emitter for secondary button click.\n   * @since 0.2\n   */\n  @Output() secondaryButtonClick = new EventEmitter();\n\n  /**\n   * The title of the form layout.\n   * @since 0.2\n   */\n  private _title!: string;\n\n  /**\n   * The title of the form layout.\n   * @since 0.2\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * The title of the form layout.\n   * @since 0.2\n   */\n  @Input() set title(value: string) {\n    this._title = value;\n  }\n\n  /**\n   * The mode of the form layout message.\n   * This can be used to define the style of the message,\n   * @since 0.2\n   * @private\n   */\n  private _mode: ModeType = 'DEFAULT';\n  /**\n   * The mode of the form layout message.\n   * This can be used to define the style of the message,\n   * @since 0.2\n   */\n  get mode(): ModeType {\n    return this._mode;\n  }\n\n  /**\n   * The mode of the form layout message.\n   * This can be used to define the style of the message,\n   * @since 0.2\n   */\n  @Input() set mode(value: ModeType) {\n    this._mode = value;\n  }\n\n  /**\n   * The CSS class for the form layout based on the mode.\n   * This is used to apply different styles to the form layout based on the mode.\n   * @since 0.2\n   */\n  get ngClass(): string {\n    return getClassMode(this.mode);\n  }\n\n  /**\n   * The message to be displayed in the form layout.\n   * This can be used to show additional information, instructions or errors.\n   * And have the mode defined in {@link FormLayoutComponent.mode}.\n   * @since 0.2\n   * @private\n   */\n  private _message = '';\n  /**\n   * The message to be displayed in the form layout.\n   * This can be used to show additional information, instructions or errors.\n   * And have the mode defined in {@link FormLayoutComponent.mode}.\n   * @since 0.2\n   */\n  get message(): string {\n    return this._message;\n  }\n\n  /**\n   * The message to be displayed in the form layout.\n   * This can be used to show additional information, instructions or errors.\n   * And have the mode defined in {@link FormLayoutComponent.mode}.\n   * This will also scroll to the top of the page when set.\n   * @since 0.2\n   */\n  @Input() set message(value: string) {\n    this._message = value;\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }\n\n  /**\n   * The Primary Button text. That will be used such submit button.\n   * @private\n   * @since 0.2\n   */\n  private _primaryButtonText!: string;\n  /**\n   * The Primary Button text. That will be used such submit button.\n   * @since 0.2\n   */\n  get primaryButtonText(): string {\n    return this._primaryButtonText;\n  }\n\n  /**\n   * The Primary Button text. That will be used such submit button.\n   * @since 0.2\n   */\n  @Input() set primaryButtonText(value: string) {\n    this._primaryButtonText = value;\n  }\n\n  /**\n   * The Secondary Button text. That will be used such link to register page.\n   * @private\n   * @since 0.2\n   */\n  private _secondaryButtonText!: string;\n  /**\n   * The Secondary Button text. That will be used such link to register page.\n   * @since 0.2\n   */\n  get secondaryButtonText(): string {\n    return this._secondaryButtonText;\n  }\n\n  /**\n   * The Secondary Button text. That will be used such link to register page.\n   * @since 0.2\n   */\n  @Input() set secondaryButtonText(value: string) {\n    this._secondaryButtonText = value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HelloPage.html":{"url":"components/HelloPage.html","title":"component - HelloPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HelloPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/hello/hello-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component to display a greeting message.\nItSpec uses the HelloService to fetch the greeting from the backend.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                HelloService\n                \n            \n\n\n            \n                selector\n                app-hello\n            \n\n\n            \n                imports\n                \n                            RouterLink\n                            RouterLinkActive\n                                DefaultLayoutComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./hello-page.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    greeting\n                                \n                                \n                                    errorMessage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/hello/hello-page.component.ts:80\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called after the component has been initialized.\nItSpec fetches the greeting from the HelloService.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                void\n\n                            \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        greeting\n                    \n                \n\n                \n                    \n                        getgreeting()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/hello/hello-page.component.ts:36\n                                \n                            \n                    \n                        \n                                Getter for the greeting message.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setgreeting(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/hello/hello-page.component.ts:45\n                                \n                            \n                    \n                        \n                                Setter for the greeting message.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The new greeting message.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n\n                \n                    \n                        geterrorMessage()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/hello/hello-page.component.ts:61\n                                \n                            \n                    \n                        \n                                Getter for the error message.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        seterrorMessage(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/hello/hello-page.component.ts:70\n                                \n                            \n                    \n                        \n                                Setter for the error message.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The new error message.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, inject, OnInit } from '@angular/core';\nimport { HelloService } from '../../services/greetings/hello.service';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { DefaultLayoutComponent } from '../../components/layouts/default-layout/default-layout.component';\n\n/**\n * Component to display a greeting message.\n * ItSpec uses the HelloService to fetch the greeting from the backend.\n * @version 0.1\n * @since 0.1\n */\n@Component({\n  selector: 'app-hello',\n  imports: [RouterLink, RouterLinkActive, DefaultLayoutComponent],\n  providers: [HelloService],\n  templateUrl: './hello-page.component.html',\n})\nexport class HelloPage implements OnInit {\n  /**\n   * The HelloService to fetch the greeting.\n   * @private\n   */\n  private helloService: HelloService = inject(HelloService);\n\n  /**\n   * The greeting message.\n   * @private\n   */\n  private _greeting = '';\n  /**\n   * Getter for the greeting message.\n   * @returns The greeting message.\n   * @since 0.1\n   */\n  get greeting(): string {\n    return this._greeting;\n  }\n\n  /**\n   * Setter for the greeting message.\n   * @param value The new greeting message.\n   * @since 0.1\n   */\n  set greeting(value: string) {\n    this._greeting = value;\n  }\n\n  /**\n   * Error message.\n   * In case the greeting could not be fetched, this was returned.\n   * @since 0.1\n   * @private\n   */\n  private _errorMessage = '';\n  /**\n   * Getter for the error message.\n   * @returns The error message.\n   * @since 0.1\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Setter for the error message.\n   * @param value The new error message.\n   * @since 0.1\n   */\n  set errorMessage(value: string) {\n    this._errorMessage = value;\n  }\n\n  /**\n   * Lifecycle hook that is called after the component has been initialized.\n   * ItSpec fetches the greeting from the HelloService.\n   * @return void\n   * @since 0.1\n   */\n  ngOnInit(): void {\n    this.helloService.get().subscribe({\n      next: (response) => {\n        this.greeting = response.message;\n      },\n      error: (error: HttpErrorResponse) => {\n        this.errorMessage = error.statusText.concat(\n          ' -> ',\n          error.error.message,\n        );\n      },\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          JaVagas\n        \n      \n      \n        \n          Greetings\n        \n      \n    \n\n  \n  @if (errorMessage) {\n    \n      \n      {{ errorMessage }}\n    \n  }\n  \n     {{ greeting }} \n    This is a Hello World page!\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                              JaVagas                                      Greetings                      @if (errorMessage) {                {{ errorMessage }}      }       {{ greeting }}     This is a Hello World page!  '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HelloPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HelloService.html":{"url":"injectables/HelloService.html","title":"injectable - HelloService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HelloService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/greetings/hello.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle greetings.\nItSpec will make HTTP requests to the backend, that will return greetings.\n\n            \n\n            \n                Extends\n            \n            \n                            HttpService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                URL\n                            \n                            \n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/greetings/hello.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns a greeting from the backend.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                A greeting string.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : environment.apiUrl.concat('/greeting/hello')\n                    \n                \n                        \n                            \n                                Inherited from         HttpService\n\n                            \n                        \n                    \n                        \n                                Defined in         HttpService:28\n\n                        \n                    \n\n            \n                \n                    The URL endpoint for the candidate registration API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                        \n                            \n                                Inherited from         HttpService\n\n                            \n                        \n                    \n                        \n                                Defined in         HttpService:25\n\n                        \n                    \n\n            \n                \n                    Http Client to make HTTP requests.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { MessageResponse } from '../../types/http/response/MessageResponse';\nimport {\n  IGetHttpService\n} from '../../types/services/interfaces/http/get-http.service';\nimport { HttpService } from '../../types/services/classes/http/http.service';\n\n/**\n * Service to handle greetings.\n * ItSpec will make HTTP requests to the backend, that will return greetings.\n * @group Services\n * @group HelloService\n * @version 0.1\n * @since 0.1\n */\n@Injectable()\nexport class HelloService\n  extends HttpService\n  implements IGetHttpService\n{\n  /**\n   * The URL endpoint for the candidate registration API.\n   * @override {@link HttpService.URL} A abstract class to Http Methods\n   * @protected\n   * @since 0.2\n   */\n  override URL = environment.apiUrl.concat('/greeting/hello');\n\n  /**\n   * Returns a greeting from the backend.\n   * @returns A greeting string.\n   * @since 0.1\n   */\n  get() {\n    return this.http.get(this.URL);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpService.html":{"url":"classes/HttpService.html","title":"class - HttpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/services/classes/http/http.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract class for HTTP services.\nThis class provides a base structure for HTTP services in the application.\nIt defines a URL property that should be overridden in subclasses\nand provides an HttpClient instance for making HTTP requests.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IHttpService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                http\n                            \n                            \n                                    Abstract\n                                URL\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in src/app/types/services/classes/http/http.service.ts:25\n                        \n                    \n\n            \n                \n                    Http Client to make HTTP requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/types/services/classes/http/http.service.ts:19\n                        \n                    \n\n            \n                \n                    Base URL for the HTTP service.\nThis should be overridden in subclasses to provide the specific URL for the service.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { IHttpService } from '../../interfaces/http/http.service';\n\n/**\n * Abstract class for HTTP services.\n * This class provides a base structure for HTTP services in the application.\n * It defines a URL property that should be overridden in subclasses\n * and provides an HttpClient instance for making HTTP requests.\n * @version 0.2\n * @since 0.2\n */\nexport abstract class HttpService implements IHttpService {\n  /**\n   * Base URL for the HTTP service.\n   * This should be overridden in subclasses to provide the specific URL for the service.\n   * @since 0.2\n   */\n  abstract URL: string;\n  /**\n   * Http Client to make HTTP requests.\n   * @since 0.2\n   * @protected\n   */\n  http: HttpClient = inject(HttpClient);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFormService.html":{"url":"interfaces/IFormService.html","title":"interface - IFormService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFormService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/services/form/form.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for a form service that handles submission, success, and error states.\nThis interface is used to define the contract for services that manage form submissions,\nsuccess responses, and error handling in Angular applications.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MessageResponse } from '../../http/response/MessageResponse';\n\n/**\n * Interface for a form service that handles submission, success, and error states.\n * This interface is used to define the contract for services that manage form submissions,\n * success responses, and error handling in Angular applications.\n * @template SubmitType - The type of the data being submitted.\n * @template ErrorType - The type of the error response, defaulting to HttpErrorResponse.\n * @template SuccessType - The type of the success response, defaulting to MessageResponse.\n * @version 0.2\n * @since 0.2\n */\nexport interface IFormService {\n  /**\n   * Observable that emits when the form is successfully submitted.\n   * This should be used to listen for successful form submissions.\n   * @returns {Observable} An observable that emits the success response.\n   * @since 0.2\n   */\n  get success(): Observable;\n\n  /**\n   * Sets the success response for the form submission.\n   * This should be called when the form submission is successful,\n   * passing the response data, that will call the {@link success SuccessObserver}.\n   * @param response - The response data to be emitted on success.\n   * @since 0.2\n   */\n  set success(response: SuccessType);\n\n  /**\n   * Observable that emits when there is an error during form submission.\n   * This should be used to listen for errors that occur during the submission process.\n   * @returns {Observable} An observable that emits the error response.\n   * @since 0.2\n   */\n  get error(): Observable;\n\n  /**\n   * Sets the error response for the form submission.\n   * This should be called when an error occurs during the form submission,\n   * passing the error data, that will call the {@link error ErrorObserver}.\n   * @param error - The error data to be emitted on error.\n   * @since 0.2\n   */\n  set error(error: ErrorType);\n\n  /**\n   * Observable that emits when the form is submitted.\n   * This should be used to listen for form submission events.\n   * @returns {Observable} An observable that emits the submitted data.\n   * @since 0.2\n   */\n  get submit(): Observable;\n\n  /**\n   * Sets the data to be submitted for the form.\n   * This should be called when the form is submitted, passing the data,\n   * that will call the {@link submit SubmitObserver}.\n   * @param request - The data to be emitted on form submission.\n   * @since 0.2\n   */\n  set submit(request: SubmitType);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGetAllHttpService.html":{"url":"interfaces/IGetAllHttpService.html","title":"interface - IGetAllHttpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetAllHttpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/services/interfaces/http/get-all-http.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for a service that performs HTTP GET requests and return an array.\nSee IndustryService for an example implementation.\n\n            \n\n            \n                Extends\n            \n            \n                            IHttpService\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getAll\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/types/services/interfaces/http/get-all-http.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Performs an HTTP GET request.\nThis method is used to retrieve an array of objects of type T from the server.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable that emits the response object with an array of type T.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IHttpService } from './http.service';\nimport { Observable } from 'rxjs';\nimport { ResponseObjectType } from './response-object-type';\n\n/**\n * Interface for a service that performs HTTP GET requests and return an array.\n *\n * @see {@link IndustryService} for an example implementation.\n * @template T - The type of the response object.\n * @extends IHttpService Interface that defines the URL and client Object.\n * @since 0.2\n * @version 0.2\n */\nexport interface IGetAllHttpService\n  extends IHttpService {\n  /**\n   * Performs an HTTP GET request.\n   * This method is used to retrieve an array of objects of type T from the server.\n   *\n   * @returns An Observable that emits the response object with an array of type T.\n   */\n  getAll(): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGetHttpService.html":{"url":"interfaces/IGetHttpService.html","title":"interface - IGetHttpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGetHttpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/services/interfaces/http/get-http.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for a service that performs HTTP GET requests.\nSee HelloService for an example implementation.\n\n            \n\n            \n                Extends\n            \n            \n                            IHttpService\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/types/services/interfaces/http/get-http.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Performs an HTTP GET request.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable that emits the response object of type T.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IHttpService } from './http.service';\nimport { Observable } from 'rxjs';\nimport { ResponseObjectType } from './response-object-type';\n\n/**\n * Interface for a service that performs HTTP GET requests.\n *\n * @see {@link HelloService} for an example implementation.\n * @template T - The type of the response object.\n * @extends IHttpService Interface that defines the URL and client Object.\n * @since 0.2\n * @version 0.2\n */\nexport interface IGetHttpService\n  extends IHttpService {\n  /**\n   * Performs an HTTP GET request.\n   *\n   * @returns An Observable that emits the response object of type T.\n   */\n  get(): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHasLocalStorage.html":{"url":"interfaces/IHasLocalStorage.html","title":"interface - IHasLocalStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IHasLocalStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/services/interfaces/local/has-local-storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for services that interact with local storage.\nThis interface defines methods for getting and setting items in local storage.\nIt is intended to be implemented by services that need to persist data locally.\n\n            \n\n            \n                Extends\n            \n            \n                            ILocalStorageItemService\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            storage\n                                        \n                                \n                                \n                                        \n                                            storageKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        storage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storage:         LocalStorageService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LocalStorageService\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The LocalStorageService instance used to interact with local storage.\nThis should be injected in the constructor of the implementing class.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storageKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storageKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The key used to store the value in local storage.\nThis should be overridden in subclasses to provide the specific key.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  LocalStorageService\n} from '../../../../services/utils/local-storage.service';\nimport { ILocalStorageItemService } from './local-storage-item.service';\n\n/**\n * Interface for services that interact with local storage.\n * This interface defines methods for getting and setting items in local storage.\n * It is intended to be implemented by services that need to persist data locally.\n * @since 0.2\n * @version 0.2\n */\nexport interface IHasLocalStorage extends ILocalStorageItemService {\n  /**\n   * The key used to store the value in local storage.\n   * This should be overridden in subclasses to provide the specific key.\n   * @since 0.2\n   * @version 0.2\n   */\n  storageKey: string;\n\n  /**\n   * The LocalStorageService instance used to interact with local storage.\n   * This should be injected in the constructor of the implementing class.\n   * @since 0.2\n   * @version 0.2\n   */\n  storage: LocalStorageService;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHttpService.html":{"url":"interfaces/IHttpService.html","title":"interface - IHttpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IHttpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/services/interfaces/http/http.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for HTTP services.\nThis interface defines the structure for HTTP services in the application,\nincluding the URL and HttpClient instance.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            http\n                                        \n                                \n                                \n                                        \n                                            URL\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        http\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        http:     HttpClient\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpClient\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Http Client to make HTTP requests.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        URL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        URL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Base URL for the HTTP service.\nThis should be overridden in subclasses to provide the specific URL for the service.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\n\n/**\n * Interface for HTTP services.\n * This interface defines the structure for HTTP services in the application,\n * including the URL and HttpClient instance.\n * @version 0.2\n * @since 0.2\n */\nexport interface IHttpService {\n  /**\n   * Base URL for the HTTP service.\n   * This should be overridden in subclasses to provide the specific URL for the service.\n   * @since 0.2\n   */\n  URL: string;\n  /**\n   * Http Client to make HTTP requests.\n   * @since 0.2\n   * @protected\n   */\n  http: HttpClient;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILocalStorageItemService.html":{"url":"interfaces/ILocalStorageItemService.html","title":"interface - ILocalStorageItemService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILocalStorageItemService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/services/interfaces/local/local-storage-item.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for a service that manages items in local storage.\nThis service provides a way to get the item.\n\n            \n\n\n\n\n\n    \n\n\n    \n        export interface ILocalStorageItemService {\n  /**\n   * Gets an item from local storage.\n   * @returns The stored value, or null if not found.\n   * @template T The type of the value being retrieved.\n   * @since 0.2\n   * @version 0.2\n   */\n  get stored(): T | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILoginHttpService.html":{"url":"interfaces/ILoginHttpService.html","title":"interface - ILoginHttpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILoginHttpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/services/interfaces/http/login-http.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for a login HTTP service.\nThis service is responsible for handling user login operations,\nincluding sending login requests and managing authentication tokens.\n\n            \n\n            \n                Extends\n            \n            \n                            IHttpService\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        login\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(body: bodyT)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/types/services/interfaces/http/login-http.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Logs in a user.\nThis method sends a POST request to the backend with the user login details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        bodyT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user login request containing necessary details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable that emits a response object of type T containing the result of the login.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport { IHttpService } from './http.service';\nimport { IHasLocalStorage } from '../local/has-local-storage.service';\nimport { TokenResponse } from '../../../http/response/TokenResponse';\n\n/**\n * Interface for a login HTTP service.\n * This service is responsible for handling user login operations,\n * including sending login requests and managing authentication tokens.\n *\n * @template bodyT - The type of the request body for the login operation.\n * @template responseT - The type of the response returned after a successful login.\n * @extends IHttpService\n * @since 0.2\n * @version 0.2\n */\nexport interface ILoginHttpService extends IHttpService {\n  /**\n   * Alias of {@link IHasLocalStorage.stored}.\n   * @returns The authentication token or null if not found.\n   * @since 0.2\n   */\n  get token(): string | null;\n\n  /**\n   * Checks if the user is logged in by verifying if the authentication token exists.\n   * This method returns true if the token is not null, indicating that the user is authenticated.\n   * @returns {boolean} - True if the user is logged in, false otherwise.\n   * @since 0.2\n   */\n  get isAuthenticated(): boolean;\n\n  /**\n   * Logs in a user.\n   * This method sends a POST request to the backend with the user login details.\n   * @param body The user login request containing necessary details.\n   * @returns An Observable that emits a response object of type T containing the result of the login.\n   * @since 0.2\n   * @version 0.2\n   */\n  login(body: bodyT): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRegisterHttpService.html":{"url":"interfaces/IRegisterHttpService.html","title":"interface - IRegisterHttpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRegisterHttpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/services/interfaces/http/register-http.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for HTTP services that handle user registration.\nThis interface extends the base IHttpService\nand defines a method for registering a new user.\n\n            \n\n            \n                Extends\n            \n            \n                            IHttpService\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        register\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(body: RegisterRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/types/services/interfaces/http/register-http.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\nThis method sends a POST request to the backend with the user registration details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            RegisterRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user registration request containing necessary details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits a MessageResponse containing the result of the registration.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IHttpService } from './http.service';\nimport { RegisterRequest } from '../../../http/body/RegisterRequest';\nimport { Observable } from 'rxjs';\nimport { MessageResponse } from '../../../http/response/MessageResponse';\n\n/**\n * Interface for HTTP services that handle user registration.\n * This interface extends the base IHttpService\n * and defines a method for registering a new user.\n * @since 0.2\n * @version 0.2\n */\nexport interface IRegisterHttpService extends IHttpService {\n  /**\n   * Registers a new user.\n   * This method sends a POST request to the backend with the user registration details.\n   * @param body The user registration request containing necessary details.\n   * @returns An Observable that emits a MessageResponse containing the result of the registration.\n   * @since 0.2\n   */\n  register(body: RegisterRequest): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageCardButtonComponent.html":{"url":"components/ImageCardButtonComponent.html","title":"component - ImageCardButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImageCardButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/buttons/image-card/image-card-button.component.ts\n\n\n\n    \n        Description\n    \n    \n        ImageCardButtonComponent is a simple component that represents a button with an image.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-image-card-button\n            \n\n\n            \n                imports\n                \n                            RouterLink\n                            NgOptimizedImage\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./image-card-button.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                imageAlt\n                            \n                            \n                                imageHeight\n                            \n                            \n                                imageUrl\n                            \n                            \n                                imageWidth\n                            \n                            \n                                routerLink\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    routerLink\n                                \n                                \n                                    imageUrl\n                                \n                                \n                                    imageAlt\n                                \n                                \n                                    imageHeight\n                                \n                                \n                                    imageWidth\n                                \n                                \n                                    title\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        imageAlt\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:81\n                            \n                        \n                \n                    \n                        The alt text for the image.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imageHeight\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:104\n                            \n                        \n                \n                    \n                        The height of the image.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imageUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:58\n                            \n                        \n                \n                    \n                        The URL of the image to be displayed in the button.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imageWidth\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:127\n                            \n                        \n                \n                    \n                        The width of the image.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        routerLink\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:35\n                            \n                        \n                \n                    \n                        The Link to navigate to when the card is clicked.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        routerLink\n                    \n                \n\n                \n                    \n                        getrouterLink()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:27\n                                \n                            \n                    \n                        \n                                The Link to navigate to when the card is clicked.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setrouterLink(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:35\n                                \n                            \n                    \n                        \n                                The Link to navigate to when the card is clicked.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        imageUrl\n                    \n                \n\n                \n                    \n                        getimageUrl()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:50\n                                \n                            \n                    \n                        \n                                The URL of the image to be displayed in the button.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setimageUrl(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:58\n                                \n                            \n                    \n                        \n                                The URL of the image to be displayed in the button.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        imageAlt\n                    \n                \n\n                \n                    \n                        getimageAlt()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:73\n                                \n                            \n                    \n                        \n                                The alt text for the image.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setimageAlt(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:81\n                                \n                            \n                    \n                        \n                                The alt text for the image.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        imageHeight\n                    \n                \n\n                \n                    \n                        getimageHeight()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:96\n                                \n                            \n                    \n                        \n                                The height of the image.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setimageHeight(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:104\n                                \n                            \n                    \n                        \n                                The height of the image.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        imageWidth\n                    \n                \n\n                \n                    \n                        getimageWidth()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:119\n                                \n                            \n                    \n                        \n                                The width of the image.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setimageWidth(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:127\n                                \n                            \n                    \n                        \n                                The width of the image.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n\n                \n                    \n                        gettitle()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:142\n                                \n                            \n                    \n                        \n                                The title of the card.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        settitle(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/buttons/image-card/image-card-button.component.ts:150\n                                \n                            \n                    \n                        \n                                The title of the card.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { NgOptimizedImage } from '@angular/common';\n\n/**\n * ImageCardButtonComponent is a simple component that represents a button with an image.\n * @version 0.2\n * @since 0.2\n */\n@Component({\n  selector: 'app-image-card-button',\n  templateUrl: './image-card-button.component.html',\n  imports: [RouterLink, NgOptimizedImage],\n})\nexport class ImageCardButtonComponent {\n  /**\n   * The Link to navigate to when the card is clicked.\n   * @since 0.2\n   * @private\n   */\n  private _routerLink!: string;\n\n  /**\n   * The Link to navigate to when the card is clicked.\n   * @since 0.2\n   */\n  get routerLink(): string {\n    return this._routerLink;\n  }\n\n  /**\n   * The Link to navigate to when the card is clicked.\n   * @since 0.2\n   */\n  @Input() set routerLink(value: string) {\n    this._routerLink = value;\n  }\n\n  /**\n   * The URL of the image to be displayed in the button.\n   * @since 0.2\n   * @private\n   */\n  private _imageUrl!: string;\n\n  /**\n   * The URL of the image to be displayed in the button.\n   * @since 0.2\n   */\n  get imageUrl(): string {\n    return this._imageUrl;\n  }\n\n  /**\n   * The URL of the image to be displayed in the button.\n   * @since 0.2\n   */\n  @Input() set imageUrl(value: string) {\n    this._imageUrl = value;\n  }\n\n  /**\n   * The alt text for the image.\n   * @since 0.2\n   * @private\n   */\n  private _imageAlt!: string;\n\n  /**\n   * The alt text for the image.\n   * @since 0.2\n   */\n  get imageAlt(): string {\n    return this._imageAlt;\n  }\n\n  /**\n   * The alt text for the image.\n   * @since 0.2\n   */\n  @Input() set imageAlt(value: string) {\n    this._imageAlt = value;\n  }\n\n  /**\n   * The height of the image.\n   * @since 0.2\n   * @private\n   */\n  private _imageHeight!: string;\n\n  /**\n   * The height of the image.\n   * @since 0.2\n   */\n  get imageHeight(): string {\n    return this._imageHeight;\n  }\n\n  /**\n   * The height of the image.\n   * @since 0.2\n   */\n  @Input() set imageHeight(value: string) {\n    this._imageHeight = value;\n  }\n\n  /**\n   * The width of the image.\n   * @since 0.2\n   * @private\n   */\n  private _imageWidth!: string;\n\n  /**\n   * The width of the image.\n   * @since 0.2\n   */\n  get imageWidth(): string {\n    return this._imageWidth;\n  }\n\n  /**\n   * The width of the image.\n   * @since 0.2\n   */\n  @Input() set imageWidth(value: string) {\n    this._imageWidth = value;\n  }\n\n  /**\n   * The title of the card.\n   * @since 0.2\n   * @private\n   */\n  private _title!: string;\n\n  /**\n   * The title of the card.\n   * @since 0.2\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * The title of the card.\n   * @since 0.2\n   */\n  set title(value: string) {\n    this._title = value;\n  }\n}\n\n    \n\n    \n        \n  \n    \n    {{ title }}\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          {{ title }}  '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ImageCardButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IndustryService.html":{"url":"injectables/IndustryService.html","title":"injectable - IndustryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IndustryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/enums/industries/industry.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Industries Service to get Enum Values from server.\n\n            \n\n            \n                Extends\n            \n            \n                            HttpService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                URL\n                            \n                            \n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/enums/industries/industry.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns a greeting from the backend.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                A greeting string.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : environment.apiUrl.concat('/enums/industries')\n                    \n                \n                        \n                            \n                                Inherited from         HttpService\n\n                            \n                        \n                    \n                        \n                                Defined in         HttpService:28\n\n                        \n                    \n\n            \n                \n                    The URL endpoint for the candidate registration API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                        \n                            \n                                Inherited from         HttpService\n\n                            \n                        \n                    \n                        \n                                Defined in         HttpService:25\n\n                        \n                    \n\n            \n                \n                    Http Client to make HTTP requests.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { HttpService } from '../../../types/services/classes/http/http.service';\nimport {\n  IGetAllHttpService\n} from '../../../types/services/interfaces/http/get-all-http.service';\n\n/**\n * Industries Service to get Enum Values from server.\n * @group Services\n * @group IndustryService\n * @since 0.2\n * @version 0.2\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IndustryService\n  extends HttpService\n  implements IGetAllHttpService\n{\n  /**\n   * The URL endpoint for the candidate registration API.\n   * @override {@link HttpService.URL} A abstract class to Http Methods\n   * @protected\n   * @since 0.2\n   */\n  override URL = environment.apiUrl.concat('/enums/industries');\n\n  /**\n   * Returns a greeting from the backend.\n   * @returns A greeting string.\n   * @since 0.1\n   */\n  getAll() {\n    return this.http.get(this.URL);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalStorageItemService.html":{"url":"classes/LocalStorageItemService.html","title":"class - LocalStorageItemService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalStorageItemService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/services/classes/utils/local-storage-item.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract class for services that manage items stored in local storage.\nThis class provides a way to get and set items in local storage using a specific key.\nIt implements the IHasLocalStorage interface to ensure that it has a storage property.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ILocalStorageItemService\n            \n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stored\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stored\n                    \n                \n\n                \n                    \n                        getstored()\n                    \n                \n                            \n                                \n                                    Defined in src/app/types/services/classes/utils/local-storage-item.service.ts:42\n                                \n                            \n\n                \n                    \n                        setstored(value: T | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/types/services/classes/utils/local-storage-item.service.ts:51\n                                \n                            \n                    \n                        \n                                Sets the value in local storage.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                        T | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The value to store, or null to clear the storage.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import {\n  IHasLocalStorage\n} from '../../interfaces/local/has-local-storage.service';\nimport {\n  LocalStorageService\n} from '../../../../services/utils/local-storage.service';\nimport { inject } from '@angular/core';\nimport {\n  ILocalStorageItemService\n} from '../../interfaces/local/local-storage-item.service';\n\n/**\n * Abstract class for services that manage items stored in local storage.\n * This class provides a way to get and set items in local storage using a specific key.\n * It implements the IHasLocalStorage interface to ensure that it has a storage property.\n * @template T The type of the item stored in local storage.\n * @abstract\n * @implements {IHasLocalStorage}\n * @since 0.2\n * @version 0.2\n */\nexport abstract class LocalStorageItemService\n  implements ILocalStorageItemService\n{\n  /**\n   * The local storage service used to interact with the browser's local storage.\n   * This is injected using Angular's dependency injection system.\n   * @protected\n   * @type {LocalStorageService}\n   * @since 0.2\n   */\n  protected storage: LocalStorageService = inject(LocalStorageService);\n  /**\n   * The key used to store the item in local storage.\n   * This should be defined in subclasses to specify the storage key.\n   * @protected\n   * @type {string}\n   * @since 0.2\n   */\n  protected abstract storageKey: string;\n\n  get stored(): T | null {\n    return this.storage.getItem(this.storageKey);\n  }\n\n  /**\n   * Sets the value in local storage.\n   * @param value The value to store, or null to clear the storage.\n   * @since 0.2\n   */\n  set stored(value: T | null) {\n    this.storage.setItem(this.storageKey, value);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStorageService.html":{"url":"injectables/LocalStorageService.html","title":"injectable - LocalStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/utils/local-storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing local storage operations.\nThis service provides methods to get and set items in the browser's local storage.\nIt is designed to be used throughout the application for persistent data storage.\nExample :import { LocalStorageService } from './local-storage.service';\nconst localStorageService = new LocalStorageService();\nlocalStorageService.setItem('key', 'value');\nconst value = localStorageService.getItem('key');\nconsole.log(value); // Outputs: 'value'\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getItem\n                            \n                            \n                                setItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/utils/local-storage.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves an item from local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The key of the item to retrieve.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     any | null\n\n                        \n                            \n                                The value associated with the key, or null if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setItem\n                        \n                    \n                \n            \n            \n                \nsetItem(key: string, value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/utils/local-storage.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Sets an item in local storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The key for the item.\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The value to store.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Service for managing local storage operations.\n * This service provides methods to get and set items in the browser's local storage.\n * It is designed to be used throughout the application for persistent data storage.\n * @version 0.2\n * @since 0.2\n * @example\n * import { LocalStorageService } from './local-storage.service';\n * const localStorageService = new LocalStorageService();\n * localStorageService.setItem('key', 'value');\n * const value = localStorageService.getItem('key');\n * console.log(value); // Outputs: 'value'\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LocalStorageService {\n  /**\n   * Retrieves an item from local storage.\n   * @param key The key of the item to retrieve.\n   * @returns The value associated with the key, or null if not found.\n   */\n  getItem(key: string): any | null {\n    return localStorage.getItem(key);\n  }\n\n  /**\n   * Sets an item in local storage.\n   * @param key The key for the item.\n   * @param value The value to store.\n   */\n  setItem(key: string, value: any): void {\n    if (value != null) {\n      localStorage.setItem(key, value);\n    } else {\n      localStorage.removeItem(key);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginPage.html":{"url":"components/LoginPage.html","title":"component - LoginPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/login/login-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        LoginPage is a simple component that represents the login page of the application.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                LoginService\n                \n            \n\n\n            \n                selector\n                app-login-page\n            \n\n\n            \n                imports\n                \n                                FormLayoutComponent\n                                FieldComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login-page.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearErrors\n                            \n                            \n                                    Async\n                                navigateToRegister\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearErrors\n                        \n                    \n                \n            \n            \n                \nclearErrors()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/login/login-page.component.ts:101\n                        \n                    \n\n\n            \n                \n                        Method to clear all error messages and reset field modes to default.\nThis is useful when the form is submitted and needs to be reset.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        navigateToRegister\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigateToRegister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/login/login-page.component.ts:92\n                        \n                    \n\n\n            \n                \n                        navigateToRegister method is called when the user clicks on the secondary button.\nItSpec navigates the user to the register page.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submit\n                        \n                    \n                \n            \n            \n                \nsubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/login/login-page.component.ts:72\n                        \n                    \n\n\n            \n                \n                        submit method is called when the user clicks on the primary button.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport {\n  FormLayoutComponent,\n  FormMessageOptions,\n} from '../../components/layouts/form-layout/form-layout.component';\nimport {\n  FieldComponent,\n  FieldOptions,\n} from '../../components/form/field/field.component';\nimport { Router } from '@angular/router';\nimport { LoginRequest } from '../../types/http/body/LoginRequest';\nimport { LoginService } from '../../services/auth/login/login.service';\nimport { TokenResponse } from '../../types/http/response/TokenResponse';\n\n/**\n * LoginPage is a simple component that represents the login page of the application.\n * @version 0.2\n * @since 0.2\n */\n@Component({\n  selector: 'app-login-page',\n  imports: [FormLayoutComponent, FieldComponent],\n  providers: [LoginService],\n  templateUrl: './login-page.component.html',\n})\nexport class LoginPage {\n  /**\n   * FieldOptions object that represents the email field in the login form.\n   * @since 0.2\n   */\n  protected username: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * FieldOptions object that represents the password field in the login form.\n   * @since 0.2\n   */\n  protected password: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Form message options for displaying messages to the user.\n   * @since 0.2\n   * @protected\n   */\n  protected form: FormMessageOptions = {\n    mode: 'DEFAULT',\n    message: '',\n  };\n  /**\n   * Router instance to navigate to different routes in the application.\n   * Will be used to navigate to the register page when the user clicks on the\n   * Secondary button and to redirect user after login successfully.\n   * @since 0.2\n   */\n  private router: Router = inject(Router);\n  /**\n   * LoginService instance to handle login requests.\n   * This service will be used to send the login request to the backend.\n   * @since 0.2\n   */\n  private loginService: LoginService = inject(LoginService);\n\n  /**\n   * submit method is called when the user clicks on the primary button.\n   * @since 0.2\n   */\n  submit() {\n    this.clearErrors();\n    if (this.fieldsAreInvalid()) {\n      return;\n    }\n    let body: LoginRequest = {\n      username: this.username.value,\n      password: this.password.value,\n    };\n    this.loginService.login(body).subscribe({\n      next: (r) => this.handleSuccess(r),\n      error: (r) => this.handleError(r),\n    });\n  }\n\n  /**\n   * navigateToRegister method is called when the user clicks on the secondary button.\n   * ItSpec navigates the user to the register page.\n   * @since 0.2\n   */\n  async navigateToRegister() {\n    await this.router.navigate(['register']);\n  }\n\n  /**\n   * Method to clear all error messages and reset field modes to default.\n   * This is useful when the form is submitted and needs to be reset.\n   * @since 0.2\n   */\n  clearErrors() {\n    this.username.mode = 'DEFAULT';\n    this.username.helper = '';\n    this.password.mode = 'DEFAULT';\n    this.password.helper = '';\n    this.form.mode = 'DEFAULT';\n    this.form.message = '';\n  }\n\n  /**\n   * Method to handle successful registration.\n   * This method will be called when the registration request is successful.\n   * ItSpec will update the form mode and message, and redirect the user to the login page after a delay.\n   * @since 0.2\n   * @param _response - The response from the registration request.\n   */\n  private handleSuccess(_response: TokenResponse) {\n    this.form.mode = 'SUCCESS';\n    this.form.message = 'Login successful! Redirecting to Hello page...';\n    setTimeout(() => this.router.navigate(['/hello']), 3000);\n  }\n\n  /**\n   * Method to handle errors during registration.\n   * This method will be called when the registration request fails.\n   * ItSpec will update the form mode and message to indicate an error.\n   * @since 0.2\n   * @param error - The error object from the registration request.\n   */\n  private handleError(error: any) {\n    this.form.mode = 'DANGER';\n    this.form.message = 'Failed login, try again.';\n    console.error(error);\n  }\n\n  /**\n   * Method to validate the form fields.\n   * This checks if all required fields are filled out correctly\n   * and sets appropriate error messages.\n   * @since 0.2\n   * @returns {boolean} - Returns if any field is invalid, false otherwise.\n   * @example\n   * if (this.fieldsAreInvalid()) {\n   *   console.error('Form fields are invalid');\n   * }\n   * @private\n   */\n  private fieldsAreInvalid(): boolean {\n    let hasError = false;\n    if (!this.username.value) {\n      this.username.mode = 'DANGER';\n      this.username.helper = 'Username is required.';\n      hasError = true;\n    }\n    if (!this.password.value) {\n      this.password.mode = 'DANGER';\n      this.password.helper = 'Password is required.';\n      hasError = true;\n    }\n    return hasError;\n  }\n}\n\n    \n\n    \n        \n  \n    \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginRequest.html":{"url":"interfaces/LoginRequest.html","title":"interface - LoginRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/http/body/LoginRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                LoginRequest interface\nThis interface defines the structure of a request for user login.\nItSpec includes the username and password fields.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The password of the user attempting to log in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The username of the user attempting to log in.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LoginRequest {\n  /**\n   * The username of the user attempting to log in.\n   * @since 0.2\n   */\n  username: string;\n  /**\n   * The password of the user attempting to log in.\n   * @since 0.2\n   */\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginService.html":{"url":"injectables/LoginService.html","title":"injectable - LoginService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth/login/login.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling user login operations.\nThis service provides methods to log in a user and manage the authentication token.\nItSpec uses Angular's HttpClient to make HTTP requests to the backend.\nExample :import { LoginService } from './login.service';\nconst loginService = new LoginService();\nloginService.login({ username: 'user', password: 'pass' })\n  .subscribe(response => {\n    console.log(response.token); // Handle the response token\n  });\n            \n\n            \n                Extends\n            \n            \n                            HttpService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                tokenService\n                            \n                            \n                                    \n                                URL\n                            \n                            \n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    token\n                                \n                                \n                                    isAuthenticated\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(user: LoginRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth/login/login.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Logs in a user by sending a POST request to the login endpoint.\nThe user's credentials are sent in the request body, and the response contains a token.\nThe token is stored using the TokenService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            LoginRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's login credentials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        tokenService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TokenService\n\n                    \n                \n                \n                    \n                        Default value : inject(TokenService)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth/login/login.service.ts:38\n                        \n                    \n\n            \n                \n                    The TokenService is injected to manage the authentication token.\nThis service is responsible for storing and retrieving the token from local storage.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : environment.apiUrl.concat('/auth/login')\n                    \n                \n                        \n                            \n                                Inherited from         HttpService\n\n                            \n                        \n                    \n                        \n                                Defined in         HttpService:46\n\n                        \n                    \n\n            \n                \n                    The URL endpoint for the login API.\nThis is constructed using the environment's API URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                        \n                            \n                                Inherited from         HttpService\n\n                            \n                        \n                    \n                        \n                                Defined in         HttpService:25\n\n                        \n                    \n\n            \n                \n                    Http Client to make HTTP requests.\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        token\n                    \n                \n\n                \n                    \n                        gettoken()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/auth/login/login.service.ts:52\n                                \n                            \n                    \n                        \n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isAuthenticated\n                    \n                \n\n                \n                    \n                        getisAuthenticated()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/auth/login/login.service.ts:62\n                                \n                            \n                    \n                        \n                                Checks if the user is authenticated by verifying if a token is stored.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { tap } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { LoginRequest } from '../../../types/http/body/LoginRequest';\nimport { TokenResponse } from '../../../types/http/response/TokenResponse';\nimport { HttpService } from '../../../types/services/classes/http/http.service';\nimport {\n  ILoginHttpService\n} from '../../../types/services/interfaces/http/login-http.service';\nimport { TokenService } from '../../storage/token/token.service';\n\n/**\n * Service for handling user login operations.\n * This service provides methods to log in a user and manage the authentication token.\n * ItSpec uses Angular's HttpClient to make HTTP requests to the backend.\n * @version 0.2\n * @since 0.2\n * @example\n * import { LoginService } from './login.service';\n * const loginService = new LoginService();\n * loginService.login({ username: 'user', password: 'pass' })\n *   .subscribe(response => {\n *     console.log(response.token); // Handle the response token\n *   });\n */\n@Injectable()\nexport class LoginService\n  extends HttpService\n  implements ILoginHttpService\n{\n  /**\n   * The TokenService is injected to manage the authentication token.\n   * This service is responsible for storing and retrieving the token from local storage.\n   * @since 0.2\n   * @type {TokenService}\n   * @protected\n   */\n  tokenService: TokenService = inject(TokenService);\n  /**\n   * The URL endpoint for the login API.\n   * This is constructed using the environment's API URL.\n   * @since 0.2\n   * @override {@link HttpService.URL} A abstract class to Http Methods\n   * @protected\n   */\n  override URL = environment.apiUrl.concat('/auth/login');\n\n  /**\n   * @interface ILoginHttpService Interface for the login HTTP service.\n   * @since 0.2\n   */\n  get token() {\n    return this.tokenService.stored;\n  }\n\n  /**\n   * Checks if the user is authenticated by verifying if a token is stored.\n   * @interface ILoginHttpService Interface for the login HTTP service.\n   * @returns {boolean} True if the user is authenticated, false otherwise.\n   * @since 0.2\n   */\n  get isAuthenticated() {\n    return this.tokenService.stored !== null;\n  }\n\n  /**\n   * Logs in a user by sending a POST request to the login endpoint.\n   * The user's credentials are sent in the request body, and the response contains a token.\n   * The token is stored using the TokenService.\n   * @param {LoginRequest} user - The user's login credentials.\n   * @interface ILoginHttpService Interface for the login HTTP service.\n   * @since 0.2\n   */\n  login(user: LoginRequest) {\n    return this.http\n      .post(this.URL, user, {\n        headers: { 'Content-Type': 'application/json' },\n      })\n      .pipe(\n        tap((response) => {\n          this.tokenService.stored = response.token;\n        }),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MessageResponse.html":{"url":"interfaces/MessageResponse.html","title":"interface - MessageResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MessageResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/http/response/MessageResponse.ts\n        \n\n\n            \n                Description\n            \n            \n                MessageResponse interface\nThis interface defines the structure of a response containing a message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The message content.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface MessageResponse {\n  /**\n   * The message content.\n   * @type {string}\n   */\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/navbar/navbar.component.ts\n\n\n\n    \n        Description\n    \n    \n        NavbarComponent is a simple component that represents the navigation bar\nof the application.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navbar\n            \n\n\n            \n                imports\n                \n                            RouterLink\n                            NgOptimizedImage\n                            RouterLinkActive\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\nimport { NgOptimizedImage } from '@angular/common';\n\n/**\n * NavbarComponent is a simple component that represents the navigation bar\n * of the application.\n * @version 0.1.1\n * @since 0.1.1\n */\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  imports: [RouterLink, NgOptimizedImage, RouterLinkActive],\n})\nexport class NavbarComponent {}\n\n    \n\n    \n        \n  \n    \n      \n      JaVagas\n    \n\n    \n      \n      \n      \n      \n    \n  \n\n  \n    \n      \n        Home\n      \n\n      \n        Hello\n      \n    \n\n    \n      \n        \n          \n            Sign up\n          \n          \n            Log in\n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  JaVagas                                                          Home                    Hello                                                  Sign up                                Log in                              '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterCandidatePage.html":{"url":"components/RegisterCandidatePage.html","title":"component - RegisterCandidatePage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterCandidatePage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/register/candidate/register-candidate-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        RegisterCandidatePage is a simple component that represents the candidate\nregistration page of the application.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-candidate-page\n            \n\n\n            \n                imports\n                \n                                FieldComponent\n                                RegisterUserPageComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./register-candidate-page.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearErrors\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearErrors\n                        \n                    \n                \n            \n            \n                \nclearErrors()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/register/candidate/register-candidate-page.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Method to clear all error messages and reset field modes to default.\nThis is useful when the form is submitted and needs to be reset.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/register/candidate/register-candidate-page.component.ts:137\n                        \n                    \n\n\n            \n                \n                        OnInit lifecycle hook to initialize the component.\nThis method will subscribe into the submission event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submit\n                        \n                    \n                \n            \n            \n                \nsubmit(user: RegisterRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/register/candidate/register-candidate-page.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Method to handle form submission.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            RegisterRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, inject, OnInit } from '@angular/core';\nimport {\n  FieldComponent,\n  FieldOptions\n} from '../../../components/form/field/field.component';\nimport { RegisterRequest } from '../../../types/http/body/RegisterRequest';\nimport {\n  CandidateService\n} from '../../../services/candidate/register/candidate.service';\nimport {\n  RegisterUserPageComponent\n} from '../../../components/register/user/register-user-page.component';\nimport { MessageResponse } from '../../../types/http/response/MessageResponse';\nimport {\n  RegisterCandidateRequest\n} from '../../../types/http/body/RegisterCandidateRequest';\nimport {\n  RegisterService\n} from '../../../services/auth/register/register.service';\nimport { StringService } from '../../../services/utils/string.service';\n\n/**\n * RegisterCandidatePage is a simple component that represents the candidate\n * registration page of the application.\n * @version 0.2\n * @since 0.2\n */\n@Component({\n  selector: 'app-candidate-page',\n  imports: [FieldComponent, RegisterUserPageComponent],\n  templateUrl: './register-candidate-page.component.html',\n})\nexport class RegisterCandidatePage implements OnInit {\n  /**\n   * Fields for the candidate registration form.\n   * These fields include first name, last name, LinkedIn URL, and biography.\n   * Each field has its own options for value, mode, and helper text.\n   * @since 0.2\n   */\n  protected firstName: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Fields for the candidate registration form.\n   * These fields include first name, last name, LinkedIn URL, and biography.\n   * Each field has its own options for value, mode, and helper text.\n   * @since 0.2\n   */\n  protected lastName: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Fields for the candidate registration form.\n   * These fields include first name, last name, LinkedIn URL, and biography.\n   * Each field has its own options for value, mode, and helper text.\n   * @since 0.2\n   */\n  protected linkedinUrl: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Fields for the candidate registration form.\n   * These fields include first name, last name, LinkedIn URL, and biography.\n   * Each field has its own options for value, mode, and helper text.\n   * @since 0.2\n   */\n  protected biograph: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Register Service instance to handle user registration.\n   * This service will be used to subscribe in form submission and\n   * to send the response to the parent component.\n   * @since 0.2\n   * @private\n   */\n  private service: RegisterService = inject(RegisterService);\n  /**\n   * CompanyService instance to handle company-related operations.\n   * This service is used to register a new company.\n   * @since 0.2\n   * @private\n   */\n  private candidateService: CandidateService = inject(CandidateService);\n\n  /**\n   * Method to handle form submission.\n   * @since 0.2\n   */\n  submit(user: RegisterRequest) {\n    this.clearErrors();\n    if (this.fieldsAreInvalid()) {\n      return;\n    }\n    let body: RegisterCandidateRequest = {\n      ...user,\n      firstName: this.firstName.value,\n      lastName: this.lastName.value,\n      linkedinUrl: this.linkedinUrl.value,\n      bio: this.biograph.value,\n    };\n    this.candidateService.register(body).subscribe({\n      next: (response: MessageResponse) => (this.service.success = response),\n      error: (error: any) => (this.service.error = error),\n    });\n  }\n\n  /**\n   * Method to clear all error messages and reset field modes to default.\n   * This is useful when the form is submitted and needs to be reset.\n   * @since 0.2\n   */\n  clearErrors() {\n    this.firstName.mode = 'DEFAULT';\n    this.firstName.helper = '';\n    this.lastName.mode = 'DEFAULT';\n    this.lastName.helper = '';\n    this.linkedinUrl.mode = 'DEFAULT';\n    this.linkedinUrl.helper = '';\n    this.biograph.mode = 'DEFAULT';\n    this.biograph.helper = '';\n  }\n\n  /**\n   * OnInit lifecycle hook to initialize the component.\n   * This method will subscribe into the submission event.\n   * @since 0.2\n   */\n  ngOnInit() {\n    this.service.submit.subscribe((user) => this.submit(user));\n  }\n\n  /**\n   * Method to validate the form fields.\n   * This checks if all required fields are filled out correctly\n   * and sets appropriate error messages.\n   * This method uses regular expressions to validate the email and password formats.\n   * @since 0.2\n   * @returns {boolean} - Returns if any field is invalid, false otherwise.\n   * @example\n   * if (this.fieldsAreInvalid()) {\n   *   console.error('Form fields are invalid');\n   * }\n   * @private\n   */\n  private fieldsAreInvalid(): boolean {\n    let hasError = false;\n    if (!this.firstName.value) {\n      this.firstName.mode = 'DANGER';\n      this.firstName.helper = 'Full Name is required.';\n      hasError = true;\n    }\n    if (!this.lastName.value) {\n      this.lastName.mode = 'DANGER';\n      this.lastName.helper = 'Full Name is required.';\n      hasError = true;\n    }\n    if (this.linkedinUrl.value) {\n      if (!StringService.isValidURL(this.linkedinUrl.value)) {\n        this.linkedinUrl.mode = 'DANGER';\n        this.linkedinUrl.helper = 'Invalid URL format.';\n        hasError = true;\n      }\n    }\n    return hasError;\n  }\n}\n\n    \n\n    \n        \n  \n  \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterCandidatePage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterCandidateRequest.html":{"url":"interfaces/RegisterCandidateRequest.html","title":"interface - RegisterCandidateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterCandidateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/http/body/RegisterCandidateRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                RegisterCandidateRequest interface\nThis interface extends the RegisterRequest interface to include fields specific to a candidate registration.\nItSpec defines the structure of a request for candidate registration.\n\n            \n\n            \n                Extends\n            \n            \n                            RegisterRequest\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bio\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            linkedinUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bio\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bio:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A short biography of the candidate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The first name of the candidate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The last name of the candidate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        linkedinUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        linkedinUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The URL of the candidate's LinkedIn profile.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { RegisterRequest } from './RegisterRequest';\n\n/**\n * RegisterCandidateRequest interface\n * This interface extends the RegisterRequest interface to include fields specific to a candidate registration.\n * ItSpec defines the structure of a request for candidate registration.\n * @version 0.2\n * @since 0.2\n */\nexport interface RegisterCandidateRequest extends RegisterRequest {\n  /**\n   * The first name of the candidate.\n   * @since 0.2\n   */\n  firstName: string;\n  /**\n   * The last name of the candidate.\n   * @since 0.2\n   */\n  lastName: string;\n  /**\n   * The URL of the candidate's LinkedIn profile.\n   * @since 0.2\n   */\n  linkedinUrl: string;\n  /**\n   * A short biography of the candidate.\n   * @since 0.2\n   */\n  bio: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterChoicePage.html":{"url":"components/RegisterChoicePage.html","title":"component - RegisterChoicePage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterChoicePage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/register/register-choice-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        RegisterChoicePage Component.\nThis component serves as a choice page for user registration,\nallowing users to select their preferred registration role.\nSee RegisterCompanyPage for company registration.\nSee RegisterCandidatePage for candidate registration.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register-choice-page\n            \n\n\n            \n                imports\n                \n                                BlankLayoutComponent\n                                ImageCardButtonComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./register-choice-page.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport {\n  BlankLayoutComponent\n} from '../../components/layouts/blank-layout/blank-layout.component';\nimport {\n  ImageCardButtonComponent\n} from '../../components/buttons/image-card/image-card-button.component';\n\n/**\n * RegisterChoicePage Component.\n * This component serves as a choice page for user registration,\n * allowing users to select their preferred registration role.\n *\n * @see {@link RegisterCompanyPage} for company registration.\n * @see {@link RegisterCandidatePage} for candidate registration.\n * @since 0.2\n * @version 0.2\n */\n@Component({\n  selector: 'app-register-choice-page',\n  imports: [BlankLayoutComponent, ImageCardButtonComponent],\n  templateUrl: './register-choice-page.component.html',\n})\nexport class RegisterChoicePage {}\n\n    \n\n    \n        \n  \n    Register\n    Your want to register such:\n    \n      \n        \n      \n      \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Register    Your want to register such:                                                  '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterChoicePage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterCompanyPage.html":{"url":"components/RegisterCompanyPage.html","title":"component - RegisterCompanyPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterCompanyPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/register/company/register-company-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        Simple component that represents the Company registration page of the application.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register-company-page\n            \n\n\n            \n                imports\n                \n                                FieldComponent\n                                RegisterUserPageComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./register-company-page.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearErrors\n                            \n                            \n                                getIndustryOptions\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearErrors\n                        \n                    \n                \n            \n            \n                \nclearErrors()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/register/company/register-company-page.component.ts:150\n                        \n                    \n\n\n            \n                \n                        Method to clear all error messages and reset field modes to default.\nThis is useful when the form is submitted and needs to be reset.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getIndustryOptions\n                        \n                    \n                \n            \n            \n                \ngetIndustryOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/register/company/register-company-page.component.ts:166\n                        \n                    \n\n\n            \n                \n                        Method to get industry options for the select field.\n\n\n                        \n                            Returns :         SelectOption[]\n\n                        \n                            \n                                Array of select options for industries.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/register/company/register-company-page.component.ts:115\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called after the component has been initialized.\nIt fetches the list of industries and subscribes to the submit event\nfrom the RegisterService to handle form submission.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submit\n                        \n                    \n                \n            \n            \n                \nsubmit(user: RegisterRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/register/company/register-company-page.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Method to handle form submission.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            RegisterRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user registration request containing all necessary fields.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, inject, OnInit } from '@angular/core';\nimport {\n  FieldComponent,\n  FieldOptions,\n  SelectOption\n} from '../../../components/form/field/field.component';\nimport { StringService } from '../../../services/utils/string.service';\nimport {\n  IndustryService\n} from '../../../services/enums/industries/industry.service';\nimport { RegisterRequest } from '../../../types/http/body/RegisterRequest';\nimport {\n  CompanyService\n} from '../../../services/company/register/company.service';\nimport {\n  RegisterUserPageComponent\n} from '../../../components/register/user/register-user-page.component';\nimport {\n  RegisterCompanyRequest\n} from '../../../types/http/body/RegisterCompanyRequest';\nimport {\n  RegisterService\n} from '../../../services/auth/register/register.service';\n\n/**\n * Simple component that represents the Company registration page of the application.\n * @version 0.2\n * @since 0.2\n */\n@Component({\n  selector: 'app-register-company-page',\n  imports: [FieldComponent, RegisterUserPageComponent],\n  templateUrl: './register-company-page.component.html',\n})\nexport class RegisterCompanyPage implements OnInit {\n  /**\n   * List of industries to be displayed in the registration form.\n   * ItSpec is populated by the IndustryService.\n   * @since 0.2\n   */\n  protected industries!: string[];\n  /**\n   * Field options for the name input.\n   * This includes the value, mode, and helper text.\n   * @since 0.2\n   * @protected\n   */\n  protected fullName: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Field options for the description TextArea.\n   * This includes the value, mode, and helper text.\n   * @since 0.2\n   * @protected\n   */\n  protected description: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Field options for the Website URL input.\n   * This includes the value, mode, and helper text.\n   * @since 0.2\n   * @protected\n   */\n  protected websiteUrl: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Field options for the Industry Select.\n   * This includes the value, mode, and helper text.\n   * @since 0.2\n   * @protected\n   */\n  protected industry: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Event emitter to handle the registration process.\n   * This emitter is used to emit the registration request\n   * in the {@link RegisterService}, to {@link RegisterUserPageComponent}.\n   * @since 0.2\n   * @private\n   */\n  private service = inject(RegisterService);\n  /**\n   * IndustryService instance to fetch the list of industries.\n   * This service is used to populate the industries dropdown in the registration form.\n   * @since 0.2\n   * @private\n   */\n  private industryService: IndustryService = inject(IndustryService);\n  /**\n   * CompanyService instance to handle company-related operations.\n   * This service is used to register a new company.\n   * @since 0.2\n   * @private\n   */\n  private companyService: CompanyService = inject(CompanyService);\n\n  /**\n   * Lifecycle hook that is called after the component has been initialized.\n   * It fetches the list of industries and subscribes to the submit event\n   * from the RegisterService to handle form submission.\n   * @since 0.2\n   */\n  ngOnInit() {\n    this.industryService.getAll().subscribe((response: string[]) => {\n      this.industries = response;\n    });\n    this.service.submit.subscribe((user) => this.submit(user));\n  }\n\n  /**\n   * Method to handle form submission.\n   * @param user - The user registration request containing all necessary fields.\n   * @since 0.2\n   */\n  submit(user: RegisterRequest) {\n    this.clearErrors();\n    if (this.fieldsAreInvalid()) {\n      return;\n    }\n    let body: RegisterCompanyRequest = {\n      ...user,\n      name: this.fullName.value,\n      description: this.description.value,\n      websiteUrl: this.websiteUrl.value,\n      industry: this.industry.value,\n    };\n    this.companyService.register(body).subscribe({\n      next: (response) => (this.service.success = response),\n      error: (error) => (this.service.error = error),\n    });\n  }\n\n  /**\n   * Method to clear all error messages and reset field modes to default.\n   * This is useful when the form is submitted and needs to be reset.\n   * @since 0.2\n   */\n  clearErrors() {\n    this.fullName.mode = 'DEFAULT';\n    this.fullName.helper = '';\n    this.description.mode = 'DEFAULT';\n    this.description.helper = '';\n    this.websiteUrl.mode = 'DEFAULT';\n    this.websiteUrl.helper = '';\n    this.industry.mode = 'DEFAULT';\n    this.industry.helper = '';\n  }\n\n  /**\n   * Method to get industry options for the select field.\n   * @returns Array of select options for industries.\n   * @since 0.2\n   */\n  getIndustryOptions(): SelectOption[] {\n    if (!this.industries || this.industries.length === 0) {\n      return [];\n    }\n    return this.industries.map((industry) => ({\n      value: industry,\n      label: StringService.titleCase(industry, '_'),\n    }));\n  }\n\n  /**\n   * Method to validate the form fields.\n   * This checks if all required fields are filled out correctly\n   * and sets appropriate error messages.\n   * This method uses regular expressions to validate the email and password formats.\n   * @since 0.2\n   * @returns {boolean} - Returns if any field is invalid, false otherwise.\n   * @example\n   * if (this.fieldsAreInvalid()) {\n   *   console.error('Form fields are invalid');\n   * }\n   * @private\n   */\n  private fieldsAreInvalid(): boolean {\n    let hasError = false;\n    if (!this.fullName.value) {\n      this.fullName.mode = 'DANGER';\n      this.fullName.helper = 'Full Name is required.';\n      hasError = true;\n    }\n    if (!this.websiteUrl.value) {\n      if (!StringService.isValidURL(this.websiteUrl.value)) {\n        this.websiteUrl.mode = 'DANGER';\n        this.websiteUrl.helper = 'Invalid URL format.';\n        hasError = true;\n      }\n    }\n    if (!this.industry.value.trim().length) {\n      this.industry.mode = 'DANGER';\n      this.industry.helper = 'Select an Industry.';\n      hasError = true;\n    } else if (!this.industries.includes(this.industry.value)) {\n      this.industry.mode = 'DANGER';\n      this.industry.helper = 'Invalid Industry selected.';\n      hasError = true;\n    }\n    return hasError;\n  }\n}\n\n    \n\n    \n        \n  \n  \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterCompanyPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterCompanyRequest.html":{"url":"interfaces/RegisterCompanyRequest.html","title":"interface - RegisterCompanyRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterCompanyRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/http/body/RegisterCompanyRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                RegisterCompanyRequest interface\nThis interface extends the RegisterRequest interface to include fields\nspecific to a company registration.\nItSpec defines the structure of a request for company registration.\n\n            \n\n            \n                Extends\n            \n            \n                            RegisterRequest\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            industry\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            websiteUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A brief description of the company.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        industry\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        industry:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The industry in which the company operates.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the company.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        websiteUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        websiteUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The URL of the company's website or other Business Profile.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { RegisterRequest } from './RegisterRequest';\n\n/**\n * RegisterCompanyRequest interface\n * This interface extends the RegisterRequest interface to include fields\n * specific to a company registration.\n * ItSpec defines the structure of a request for company registration.\n * @version 0.2\n * @since 0.2\n */\nexport interface RegisterCompanyRequest extends RegisterRequest {\n  /**\n   * The name of the company.\n   * @since 0.2\n   */\n  name: string;\n  /**\n   * A brief description of the company.\n   * @since 0.2\n   */\n  description: string;\n  /**\n   * The URL of the company's website or other Business Profile.\n   * @since 0.2\n   */\n  websiteUrl: string;\n  /**\n   * The industry in which the company operates.\n   * @since 0.2\n   */\n  industry: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterRequest.html":{"url":"interfaces/RegisterRequest.html","title":"interface - RegisterRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/http/body/RegisterRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                RegisterRequest interface\nThis interface extends the LoginRequest interface to include an email field.\nItSpec defines the structure of a request for user registration.\n\n            \n\n            \n                Extends\n            \n            \n                            LoginRequest\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The email of the user registering.\nIn the future will be used to verify identity and change password.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { LoginRequest } from './LoginRequest';\n\n/**\n * RegisterRequest interface\n * This interface extends the LoginRequest interface to include an email field.\n * ItSpec defines the structure of a request for user registration.\n * @version 0.2\n * @since 0.2\n */\nexport interface RegisterRequest extends LoginRequest {\n  /**\n   * The email of the user registering.\n   * In the future will be used to verify identity and change password.\n   * @since 0.2\n   */\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegisterService.html":{"url":"injectables/RegisterService.html","title":"injectable - RegisterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegisterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth/register/register.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling user registration.\nThis service is used in the user registration page to handle the registration process.\nItSpec provides an interface for components to listen for registration events.\nItSpec emits the following events:\n\n   `onSubmit`: Emitted when the registration form is submitted with a `RegisterRequest` object.\n   `onError`: Emitted when there is an error during the registration process, passing the error details.\n   `onSuccess`: Emitted when the registration is successful, passing a `MessageResponse` object with success details.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    submit\n                                \n                                \n                                    error\n                                \n                                \n                                    success\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        submit\n                    \n                \n\n                \n                    \n                        getsubmit()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/auth/register/register.service.ts:48\n                                \n                            \n\n                \n                    \n                        setsubmit(request: RegisterRequest)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/auth/register/register.service.ts:52\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            request\n                                                    \n                                                            \n                                                                            RegisterRequest\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        error\n                    \n                \n\n                \n                    \n                        geterror()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/auth/register/register.service.ts:56\n                                \n                            \n\n                \n                    \n                        seterror(error: any)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/auth/register/register.service.ts:60\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            error\n                                                    \n                                                            \n                                                                            any\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        success\n                    \n                \n\n                \n                    \n                        getsuccess()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/auth/register/register.service.ts:64\n                                \n                            \n\n                \n                    \n                        setsuccess(response: MessageResponse)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/auth/register/register.service.ts:68\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            response\n                                                    \n                                                            \n                                                                            MessageResponse\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { EventEmitter, Injectable } from '@angular/core';\nimport { MessageResponse } from '../../../types/http/response/MessageResponse';\nimport { RegisterRequest } from '../../../types/http/body/RegisterRequest';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IFormService } from '../../../types/services/form/form.service';\n\n/**\n * Service for handling user registration.\n * This service is used in the user registration page to handle the registration process.\n * ItSpec provides an interface for components to listen for registration events.\n * ItSpec emits the following events:\n * \n *    `onSubmit`: Emitted when the registration form is submitted with a `RegisterRequest` object.\n *    `onError`: Emitted when there is an error during the registration process, passing the error details.\n *    `onSuccess`: Emitted when the registration is successful, passing a `MessageResponse` object with success details.\n * \n * @group Services\n * @group RegisterService\n * @version 0.2\n * @since 0.2\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterService implements IFormService {\n  /**\n   * Emitter that will notify when user form is submitted.\n   * @param {RegisterRequest} response - The response containing only user data.\n   * @since 0.2\n   */\n  private onSubmit: EventEmitter =\n    new EventEmitter();\n  /**\n   * Emitter that will notify when there is an error during registration.\n   * @since 0.2\n   */\n  private onError: EventEmitter =\n    new EventEmitter();\n  /**\n   * Emitter that will notify when registration is successful.\n   * This will emit a `MessageResponse` object containing the success message.\n   * @private\n   */\n  private onSuccess: EventEmitter =\n    new EventEmitter();\n\n  get submit(): Observable {\n    return this.onSubmit.asObservable();\n  }\n\n  set submit(request: RegisterRequest) {\n    this.onSubmit.emit(request);\n  }\n\n  get error(): Observable {\n    return this.onError.asObservable();\n  }\n\n  set error(error: any) {\n    this.onError.emit(error);\n  }\n\n  get success(): Observable {\n    return this.onSuccess.asObservable();\n  }\n\n  set success(response: MessageResponse) {\n    this.onSuccess.emit(response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterUserPageComponent.html":{"url":"components/RegisterUserPageComponent.html","title":"component - RegisterUserPageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterUserPageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/register/user/register-user-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for the user registration page.\nThis component handles user registration by providing a form with fields for email, username, password, and confirm password.\nIt uses the RegisterService to handle the registration logic and displays messages based on the success or failure of the registration.\nUsed in Register Pages like Candidate and Company pages.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register-user-page\n            \n\n\n            \n                imports\n                \n                                FieldComponent\n                                FormLayoutComponent\n                \n            \n\n\n            \n                styles\n                \n            \n\n\n            \n                templateUrl\n                ./register-user-page.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearErrors\n                            \n                            \n                                    Async\n                                navigateToLogin\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    title\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/register/user/register-user-page.component.ts:119\n                            \n                        \n                \n                    \n                        Title of the registration page.\nThis is used to display the title in the form layout.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearErrors\n                        \n                    \n                \n            \n            \n                \nclearErrors()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/register/user/register-user-page.component.ts:157\n                        \n                    \n\n\n            \n                \n                        Method to clear all error messages and reset field modes to default.\nThis is useful when the form is submitted and needs to be reset.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        navigateToLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigateToLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/register/user/register-user-page.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Method to navigate to the login page.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/register/user/register-user-page.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Method runed when the component is initialized.\nThis method is used to set up event listeners for the registration service.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submit\n                        \n                    \n                \n            \n            \n                \nsubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/register/user/register-user-page.component.ts:140\n                        \n                    \n\n\n            \n                \n                        Method to handle form submission.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n\n                \n                    \n                        gettitle()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/register/user/register-user-page.component.ts:110\n                                \n                            \n                    \n                        \n                                Title of the registration page.\nThis is used to display the title in the form layout.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        settitle(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/register/user/register-user-page.component.ts:119\n                                \n                            \n                    \n                        \n                                Title of the registration page.\nThis is used to display the title in the form layout.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, inject, Input, OnInit } from '@angular/core';\nimport { FieldComponent, FieldOptions } from '../../form/field/field.component';\nimport {\n  FormLayoutComponent,\n  FormMessageOptions\n} from '../../layouts/form-layout/form-layout.component';\nimport { MessageResponse } from '../../../types/http/response/MessageResponse';\nimport { Router } from '@angular/router';\nimport {\n  RegisterService\n} from '../../../services/auth/register/register.service';\nimport { HttpErrorResponse, HttpStatusCode } from '@angular/common/http';\nimport { StringService } from '../../../services/utils/string.service';\n\n/**\n * Component for the user registration page.\n * This component handles user registration by providing a form with fields for email, username, password, and confirm password.\n * It uses the RegisterService to handle the registration logic and displays messages based on the success or failure of the registration.\n * Used in Register Pages like [Candidate]{@link RegisterCandidatePage} and [Company]{@link RegisterCompanyPage} pages.\n * @version 0.2\n * @since 0.2\n */\n@Component({\n  selector: 'app-register-user-page',\n  imports: [FieldComponent, FormLayoutComponent],\n  templateUrl: './register-user-page.component.html',\n  styles: ``,\n})\nexport class RegisterUserPageComponent implements OnInit {\n  /**\n   * Field options for the email input.\n   * This includes the value, mode, and helper text.\n   * @since 0.2\n   * @protected\n   */\n  protected email: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Field options for the username input.\n   * This includes the value, mode, and helper text.\n   * @since 0.2\n   * @protected\n   */\n  protected username: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Field options for the password input.\n   * This includes the value, mode, and helper text.\n   * @since 0.2\n   * @protected\n   */\n  protected password: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Field options for the Confirm Password input.\n   * This includes the value, mode, and helper text.\n   * @since 0.2\n   * @protected\n   */\n  protected confirmPassword: FieldOptions = {\n    value: '',\n    mode: 'DEFAULT',\n    helper: '',\n  };\n  /**\n   * Form message options for displaying messages to the user.\n   * @since 0.2\n   * @protected\n   */\n  protected form: FormMessageOptions = {\n    mode: 'DEFAULT',\n    message: '',\n  };\n  /**\n   * Service for handling user registration.\n   * This service will emit Form Submission and handle the request response.\n   * @since 0.2\n   * @private\n   */\n  private registerService: RegisterService = inject(RegisterService);\n  /**\n   * Router instance to navigate to different routes.\n   * @private\n   * @since 0.2\n   */\n  private router: Router = inject(Router);\n\n  /**\n   * Title of the registration page.\n   * This is used to display the title in the form layout.\n   * @since 0.2\n   * @private\n   */\n  private _title: string = 'Register User';\n\n  /**\n   * Title of the registration page.\n   * This is used to display the title in the form layout.\n   * @since 0.2\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Title of the registration page.\n   * This is used to display the title in the form layout.\n   * @since 0.2\n   */\n  @Input() set title(value: string) {\n    this._title = value;\n  }\n\n  /**\n   * Method runed when the component is initialized.\n   * This method is used to set up event listeners for the registration service.\n   */\n  ngOnInit() {\n    this.registerService.error.subscribe((error: HttpErrorResponse) => {\n      this.handleError(error);\n    });\n    this.registerService.success.subscribe((response: MessageResponse) => {\n      this.handleSuccess(response);\n    });\n  }\n\n  /**\n   * Method to handle form submission.\n   * @since 0.2\n   */\n  submit() {\n    this.clearErrors();\n    if (this.fieldsAreInvalid()) {\n      return;\n    }\n    this.registerService.submit = {\n      email: this.email.value,\n      username: this.username.value,\n      password: this.password.value,\n    };\n  }\n\n  /**\n   * Method to clear all error messages and reset field modes to default.\n   * This is useful when the form is submitted and needs to be reset.\n   * @since 0.2\n   */\n  clearErrors() {\n    this.email.mode = 'DEFAULT';\n    this.email.helper = '';\n    this.username.mode = 'DEFAULT';\n    this.username.helper = '';\n    this.password.mode = 'DEFAULT';\n    this.password.helper = '';\n    this.confirmPassword.mode = 'DEFAULT';\n    this.confirmPassword.helper = '';\n    this.form.mode = 'DEFAULT';\n    this.form.message = '';\n  }\n\n  /**\n   * Method to navigate to the login page.\n   * @since 0.2\n   */\n  async navigateToLogin() {\n    await this.router.navigate(['/login']);\n  }\n\n  /**\n   * Method to handle successful registration.\n   * This method will be called when the registration request is successful.\n   * ItSpec will update the form mode and message, and redirect the user to the login page after a delay.\n   * @since 0.2\n   * @param _response - The response from the registration request.\n   */\n  private handleSuccess(_response: MessageResponse) {\n    this.form.mode = 'SUCCESS';\n    this.form.message =\n      'Company registered successfully. Redirecting to Login page...';\n    setTimeout(() => this.navigateToLogin(), 3000);\n  }\n\n  /**\n   * Method to handle errors during registration.\n   * This method will be called when the registration request fails.\n   * ItSpec will update the form mode and message to indicate an error.\n   * @since 0.2\n   * @param error - The error object from the registration request.\n   */\n  private handleError(error: HttpErrorResponse) {\n    this.form.mode = 'DANGER';\n    switch (error.status) {\n      case HttpStatusCode.Conflict:\n        let message: string = error.error.message;\n        if (message.toLowerCase().includes('email')) {\n          this.email.mode = 'DANGER';\n          this.email.helper = 'Email already exists.';\n        } else if (message.toLowerCase().includes('username')) {\n          this.username.mode = 'DANGER';\n          this.username.helper = 'Username already exists.';\n        } else {\n          this.form.message = message;\n        }\n        break;\n      case HttpStatusCode.InternalServerError:\n        this.form.message =\n          'Internal server error. Please try again later or contact support.';\n        break;\n      default:\n        this.form.message = 'An unexpected error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Method to validate the form fields.\n   * This checks if all required fields are filled out correctly\n   * and sets appropriate error messages.\n   * This method uses regular expressions to validate the email and password formats.\n   * @since 0.2\n   * @returns {boolean} - Returns if any field is invalid, false otherwise.\n   * @example\n   * if (this.fieldsAreInvalid()) {\n   *   console.error('Form fields are invalid');\n   * }\n   * @private\n   */\n  private fieldsAreInvalid(): boolean {\n    let hasError = false;\n    if (!this.email.value) {\n      this.email.mode = 'DANGER';\n      this.email.helper = 'Email is required.';\n      hasError = true;\n    } else if (!StringService.isValidEmail(this.email.value)) {\n      this.email.mode = 'DANGER';\n      this.email.helper = 'Invalid email format.';\n      hasError = true;\n    }\n    if (!this.username.value) {\n      this.username.mode = 'DANGER';\n      this.username.helper = 'Username is required.';\n      hasError = true;\n    }\n    if (!this.password.value) {\n      this.password.mode = 'DANGER';\n      this.password.helper = 'Password is required.';\n      hasError = true;\n    } else if (!StringService.isStrongerPassword(this.password.value)) {\n      this.password.mode = 'DANGER';\n      this.password.helper =\n        'Too weak password. Must contain at least 8 characters, one uppercase ' +\n        'letter, one lowercase letter, one number, and one special character.';\n      hasError = true;\n    }\n    if (!this.confirmPassword.value) {\n      this.confirmPassword.mode = 'DANGER';\n      this.confirmPassword.helper = 'Confirm Password is required.';\n      hasError = true;\n    } else if (this.confirmPassword.value !== this.password.value) {\n      this.confirmPassword.mode = 'DANGER';\n      this.confirmPassword.helper = 'Passwords do not match.';\n      hasError = true;\n    }\n    return hasError;\n  }\n}\n\n    \n\n    \n        \n  \n    \n    \n    \n    \n    \n    \n  \n\n\n    \n\n    \n            \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'BlankLayoutComponent', 'selector': 'app-blank-layout'},{'name': 'DefaultLayoutComponent', 'selector': 'app-default-layout'},{'name': 'FieldComponent', 'selector': 'app-field'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'FormLayoutComponent', 'selector': 'app-form-layout'},{'name': 'HelloPage', 'selector': 'app-hello'},{'name': 'ImageCardButtonComponent', 'selector': 'app-image-card-button'},{'name': 'LoginPage', 'selector': 'app-login-page'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'RegisterCandidatePage', 'selector': 'app-candidate-page'},{'name': 'RegisterChoicePage', 'selector': 'app-register-choice-page'},{'name': 'RegisterCompanyPage', 'selector': 'app-register-company-page'},{'name': 'RegisterUserPageComponent', 'selector': 'app-register-user-page'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterUserPageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOption.html":{"url":"interfaces/SelectOption.html","title":"interface - SelectOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/form/field/field.component.ts\n        \n\n\n            \n                Description\n            \n            \n                SelectOption is an interface that represents an option in a select field.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The inner text of the option tag.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The value of the option tag.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { getClassMode, ModeType } from '../../../types/components/modetype';\n\n/**\n * FieldTypes is a type that represents the different services of fields that can be used in a form.\n * ItSpec includes text, email, password, number, textarea, and select.\n * @version 0.2\n * @since 0.2\n */\nexport type FieldTypes =\n  | 'text'\n  | 'email'\n  | 'password'\n  | 'number'\n  | 'textarea'\n  | 'select'\n  | 'custom'\n  | 'url';\n/**\n * _FieldType is a type that represents the different HTML elements that can be used in a form field.\n * ItSpec includes HTMLSelectElement, HTMLInputElement, and HTMLTextAreaElement.\n * @version 0.2\n * @since 0.2\n */\ntype _FieldType = HTMLSelectElement | HTMLInputElement | HTMLTextAreaElement;\n\n/**\n * Interface to Organize the field options.\n * @version 0.2\n * @since 0.2\n */\nexport interface FieldOptions {\n  /**\n   * The value of the field.\n   * @since 0.2\n   */\n  value: string;\n  /**\n   * The mode of the field.\n   * Define if it is an error, success, etc...\n   * @see ModeType Types Available.\n   * @since 0.2\n   */\n  mode: ModeType;\n  /**\n   * The Helper Text of the field.\n   * A simple and optional text that helps the user to understand\n   * about the field or errors.\n   * @since 0.2\n   * @optional Can be an empty string.\n   */\n  helper: string;\n}\n\n/**\n * SelectOption is an interface that represents an option in a select field.\n * @version 0.2\n * @since 0.2\n */\nexport interface SelectOption {\n  /**\n   * The value of the option tag.\n   * @since 0.2\n   */\n  value: string;\n  /**\n   * The inner text of the option tag.\n   * @since 0.2\n   */\n  label: string;\n}\n\n/**\n * FieldComponent is a simple component that represents a field in a form.\n * ItSpec can be used to create input fields, text areas, etc.\n * @version 0.2\n * @since 0.2\n */\n@Component({\n  selector: 'app-field',\n  imports: [NgClass, FormsModule],\n  templateUrl: './field.component.html',\n})\nexport class FieldComponent {\n  /**\n   * Event emitter that emits the value of the field when it changes.\n   * ItSpec is used to communicate with the parent component.\n   * @since 0.2\n   */\n  @Output() fieldValueChanged = new EventEmitter();\n\n  /**\n   * The options for a select field, it is used to set the placeholder and other\n   * options for the field when it is a Select.\n   * @since 0.2\n   * @private\n   */\n  private _options?: SelectOption[];\n\n  /**\n   * The options for a select field, it is used to set the placeholder and other\n   * options for the field when it is a Select.\n   * @since 0.2\n   */\n  get options(): SelectOption[] {\n    if (!this._options) {\n      return [];\n    }\n    return this._options;\n  }\n\n  /**\n   * The options for a select field, it is used to set the placeholder and other\n   * options for the field when it is a Select.\n   * @since 0.2\n   */\n  @Input() set options(value: SelectOption[]) {\n    let placeholder: SelectOption = {\n      label: this.fieldPlaceholder,\n      value: ' ',\n    };\n    this._options = [placeholder, ...value];\n    if (this.fieldType !== 'select') {\n      console.warn(\n        'The options property is only used for select fields. ' +\n          'ItSpec will not have any effect on other field services.',\n      );\n    }\n  }\n\n  /**\n   * The ngClass to be applied to the field.\n   * ItSpec can be used to apply additional classes to the field.\n   * @since 0.2\n   */\n  get ngClass(): string {\n    return getClassMode(this.fieldMode);\n  }\n\n  /**\n   * The text from field label.\n   * @since 0.2\n   * @private\n   */\n  private _fieldLabel!: string;\n\n  /**\n   * The text from field label.\n   * @since 0.2\n   */\n  get fieldLabel(): string {\n    return this._fieldLabel;\n  }\n\n  /**\n   * The text from field label.\n   * @since 0.2\n   */\n  @Input() set fieldLabel(value: string) {\n    this._fieldLabel = value;\n  }\n\n  /**\n   * The name of the field.\n   * @since 0.2\n   * @private\n   */\n  private _fieldName!: string;\n\n  /**\n   * The name of the field.\n   * @since 0.2\n   */\n  get fieldName(): string {\n    return this._fieldName;\n  }\n\n  /**\n   * The name of the field.\n   * @since 0.2\n   */\n  @Input() set fieldName(value: string) {\n    this._fieldName = value;\n  }\n\n  /**\n   * The Mode of the field, it is the Bulma colors\n   * (danger, success, default, etc...).\n   * @see ModeType Types Available.\n   * @since 0.2\n   * @private\n   */\n  private _fieldMode: ModeType = 'DEFAULT';\n\n  /**\n   * The Mode of the field, it is the Bulma colors\n   * (danger, success, default, etc...).\n   * @see ModeType Types Available.\n   * @since 0.2\n   */\n  get fieldMode(): ModeType {\n    return this._fieldMode;\n  }\n\n  /**\n   * The Mode of the field, it is the Bulma colors\n   * (danger, success, default, etc...).\n   * @see ModeType Types Available.\n   * @since 0.2\n   */\n  @Input() set fieldMode(value: ModeType) {\n    this._fieldMode = value;\n  }\n\n  /**\n   * The placeholder of the field.\n   * @since 0.2\n   * @private\n   */\n  private _fieldPlaceholder = '';\n\n  /**\n   * The placeholder of the field.\n   * @since 0.2\n   */\n  get fieldPlaceholder(): string {\n    return this._fieldPlaceholder;\n  }\n\n  /**\n   * The placeholder of the field.\n   * @since 0.2\n   */\n  @Input() set fieldPlaceholder(value: string) {\n    this._fieldPlaceholder = value;\n  }\n\n  /**\n   * The type of the field, it is the HTML input services.\n   * @see FieldTypes Types Available.\n   * @since 0.2\n   * @private\n   */\n  private _fieldType!: FieldTypes;\n\n  /**\n   * The type of the field, it is the HTML input services.\n   * @see FieldTypes Types Available.\n   * @since 0.2\n   */\n  get fieldType(): FieldTypes {\n    return this._fieldType;\n  }\n\n  /**\n   * The type of the field, it is the HTML input services.\n   * @see FieldTypes Types Available.\n   * @since 0.2\n   */\n  @Input() set fieldType(value: FieldTypes) {\n    this._fieldType = value;\n    if (!this.options) {\n      console.warn(\n        'The options property is not set. ' +\n          'ItSpec will not have any effect on the field type: ' +\n          value +\n          '. ' +\n          'If you are using a select field, please set the options property.',\n      );\n    }\n  }\n\n  /**\n   * The value of the field.\n   * When it changes, it emits the fieldValueChanged event.\n   * @since 0.2\n   * @private\n   */\n  private _fieldValue = '';\n\n  /**\n   * The value of the field.\n   * When it changes, it emits the fieldValueChanged event.\n   * @since 0.2\n   */\n  get fieldValue(): string {\n    return this._fieldValue;\n  }\n\n  /**\n   * The value of the field.\n   * When it changes, it emits the fieldValueChanged event.\n   * @since 0.2\n   */\n  @Input() set fieldValue(value: string) {\n    this._fieldValue = value;\n  }\n\n  /**\n   * The helper text of the field.\n   * A little text that helps the user to understand about the field or errors.\n   * @since 0.2\n   * @private\n   */\n  private _fieldHelperText = '';\n\n  /**\n   * The helper text of the field.\n   * A little text that helps the user to understand about the field or errors.\n   * @since 0.2\n   */\n  get fieldHelperText(): string {\n    return this._fieldHelperText;\n  }\n\n  /**\n   * The helper text of the field.\n   * A little text that helps the user to understand about the field or errors.\n   * @since 0.2\n   */\n  @Input() set fieldHelperText(value: string) {\n    this._fieldHelperText = value;\n  }\n\n  /**\n   * The icon to be displayed on the left side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   * @private\n   */\n  private _fieldIconLeft = '';\n\n  /**\n   * The icon to be displayed on the left side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   */\n  get fieldIconLeft(): string {\n    return this._fieldIconLeft;\n  }\n\n  /**\n   * The icon to be displayed on the left side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   */\n  @Input() set fieldIconLeft(value: string) {\n    this._fieldIconLeft = value;\n  }\n\n  /**\n   * The icon to be displayed on the right side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   * @private\n   */\n  private _fieldIconRight = '';\n\n  /**\n   * The icon to be displayed on the right side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   */\n  get fieldIconRight(): string {\n    return this._fieldIconRight;\n  }\n\n  /**\n   * The icon to be displayed on the right side of the field.\n   * ItSpec can be used to indicate the type of the field or to provide additional\n   * information. Uses FontAwesome icons.\n   * @since 0.2\n   * @example fa-envelope\n   */\n  @Input() set fieldIconRight(value: string) {\n    this._fieldIconRight = value;\n  }\n\n  /**\n   * Indicates if the field is required.\n   * If true, the field will be marked as required.\n   * @since 0.2\n   * @private\n   */\n  private _required = false;\n\n  /**\n   * Indicates if the field is required.\n   * If true, the field will be marked as required.\n   * @since 0.2\n   */\n  get required(): boolean {\n    return this._required;\n  }\n\n  /**\n   * Indicates if the field is required.\n   * If true, the field will be marked as required.\n   * @since 0.2\n   */\n  @Input() set required(value: boolean) {\n    this._required = value;\n  }\n\n  /**\n   * Method to emit the value of the field when it changes.\n   * @param event\n   * @since 0.2\n   * @protected\n   */\n  protected emitValue(event: any) {\n    this.fieldValue = (event.target as _FieldType).value;\n    this.fieldValueChanged.emit(this.fieldValue);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StringService.html":{"url":"injectables/StringService.html","title":"injectable - StringService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StringService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/utils/string.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for string manipulation and validation.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                isStrongerPassword\n                            \n                            \n                                    Static\n                                isValidEmail\n                            \n                            \n                                    Static\n                                isValidURL\n                            \n                            \n                                    Static\n                                titleCase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isStrongerPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    isStrongerPassword(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/utils/string.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Validates if a given password meets the required strength criteria.\nThe criteria include:\n\n  At least 8 characters\n  At least one uppercase letter\n  At least one lowercase letter\n  At least one digit\n  At least one special character from the set `!@#$&*`\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password string to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if the password is valid, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/utils/string.service.ts:84\n                        \n                    \n\n\n            \n                \n                        Validates if a given string is a valid email format.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email string to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if the email is valid, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isValidURL\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidURL(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/utils/string.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Validates if a given string is a valid URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL string to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nReturns true if the URL is valid, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        titleCase\n                        \n                    \n                \n            \n            \n                \n                        \n                    titleCase(str: string, split: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/utils/string.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Converts a string to title case.\nThis method transforms the first letter of each word to uppercase\nand the rest to lowercase.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                str\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe string to be converted to title case.\n\n\n                                            \n                                        \n                                        \n                                                split\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ' '\n                                            \n\n                                            \n                                                    \nThe character used to split the string into words (default is space).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string in title case.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Service for string manipulation and validation.\n * @group Services\n * @group StringService\n * @version 0.2\n * @since 0.2\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StringService {\n  /**\n   * Regular expressions for validating email formats.\n   * @since 0.2\n   * @private\n   */\n  private static emailRegex: RegExp =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  /**\n   * Regular expressions for validating password formats (isStronger?).\n   * This regex checks for:\n   * \n   *   At least 8 characters\n   *   At least one uppercase letter\n   *   At least one lowercase letter\n   *   At least one digit\n   *   At least one special character from the set `!@#$&*`\n   * \n   * @since 0.2\n   * @private\n   */\n  private static passwordRegex: RegExp =\n    /^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z]).{8}$/;\n  /**\n   * Valid protocols for URLs.\n   * This array contains the protocols that are considered valid for URLs.\n   * @since 0.2\n   * @private\n   */\n  private static validProtocols = ['http:', 'https:'];\n\n  /**\n   * Converts a string to title case.\n   * This method transforms the first letter of each word to uppercase\n   * and the rest to lowercase.\n   * @param str - The string to be converted to title case.\n   * @param split - The character used to split the string into words (default is space).\n   * @returns The string in title case.\n   * @since 0.2\n   */\n  public static titleCase(str: string, split: string = ' '): string {\n    if (!str) {\n      return '';\n    }\n    return str\n      .toLowerCase()\n      .split(split)\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  /**\n   * Validates if a given string is a valid URL.\n   * @param url - The URL string to validate.\n   * @return {boolean} - Returns true if the URL is valid, false otherwise.\n   * @since 0.2\n   */\n  public static isValidURL(url: string): boolean {\n    try {\n      return this.validProtocols.includes(new URL(url).protocol);\n    } catch (_) {\n      return false;\n    }\n  }\n\n  /**\n   * Validates if a given string is a valid email format.\n   * @param email - The email string to validate.\n   * @return {boolean} - Returns true if the email is valid, false otherwise.\n   * @since 0.2\n   */\n  public static isValidEmail(email: string): boolean {\n    return this.emailRegex.test(email);\n  }\n\n  /**\n   * Validates if a given password meets the required strength criteria.\n   * The criteria include:\n   * \n   *   At least 8 characters\n   *   At least one uppercase letter\n   *   At least one lowercase letter\n   *   At least one digit\n   *   At least one special character from the set `!@#$&*`\n   * \n   * @param password - The password string to validate.\n   * @return {boolean} - Returns true if the password is valid, false otherwise.\n   * @since 0.2\n   */\n  public static isStrongerPassword(password: string): boolean {\n    return this.passwordRegex.test(password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenResponse.html":{"url":"interfaces/TokenResponse.html","title":"interface - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/types/http/response/TokenResponse.ts\n        \n\n\n            \n                Description\n            \n            \n                TokenResponse interface\nThis interface defines the structure of a response containing a token.\nItSpec is used to represent the authentication token received after a successful login.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The authentication token received after a successful login.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface TokenResponse {\n  /**\n   * The authentication token received after a successful login.\n   * @since 0.2\n   */\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenService.html":{"url":"injectables/TokenService.html","title":"injectable - TokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/storage/token/token.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing the authentication token in local storage.\nThis service extends the LocalStorageItemService to provide\nmethods for storing and retrieving the authentication token.\nIt is used to persist the user's authentication state across sessions.\n\n            \n\n            \n                Extends\n            \n            \n                            LocalStorageItemService\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  LocalStorageItemService\n} from '../../../types/services/classes/utils/local-storage-item.service';\n\n/**\n * Service for managing the authentication token in local storage.\n * This service extends the LocalStorageItemService to provide\n * methods for storing and retrieving the authentication token.\n * It is used to persist the user's authentication state across sessions.\n * @version 0.2\n * @since 0.2\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TokenService extends LocalStorageItemService {\n  /**\n   * The key used to store the item in local storage.\n   * @since 0.2\n   * @protected\n   */\n  protected override storageKey = 'auth-token';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            App\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/buttons/image-card/image-card-button.component.ts\n            \n            component\n            ImageCardButtonComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/components/footer/footer.component.ts\n            \n            component\n            FooterComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/form/field/field.component.ts\n            \n            component\n            FieldComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/components/form/field/field.component.ts\n            \n            interface\n            FieldOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/components/form/field/field.component.ts\n            \n            interface\n            SelectOption\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/app/components/form/field/field.component.ts\n            \n            type alias\n            _FieldType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/components/form/field/field.component.ts\n            \n            type alias\n            FieldTypes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/layouts/blank-layout/blank-layout.component.ts\n            \n            component\n            BlankLayoutComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/layouts/default-layout/default-layout.component.ts\n            \n            component\n            DefaultLayoutComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/layouts/form-layout/form-layout.component.ts\n            \n            component\n            FormLayoutComponent\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/components/layouts/form-layout/form-layout.component.ts\n            \n            interface\n            FormMessageOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/components/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/register/user/register-user-page.component.ts\n            \n            component\n            RegisterUserPageComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/hello/hello-page.component.ts\n            \n            component\n            HelloPage\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/pages/login/login-page.component.ts\n            \n            component\n            LoginPage\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/pages/register/candidate/register-candidate-page.component.ts\n            \n            component\n            RegisterCandidatePage\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/pages/register/company/register-company-page.component.ts\n            \n            component\n            RegisterCompanyPage\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/pages/register/register-choice-page.component.ts\n            \n            component\n            RegisterChoicePage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/auth/login/login.service.ts\n            \n            injectable\n            LoginService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/auth/register/register.service.ts\n            \n            injectable\n            RegisterService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/candidate/register/candidate.service.ts\n            \n            injectable\n            CandidateService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/company/register/company.service.ts\n            \n            injectable\n            CompanyService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/enums/industries/industry.service.ts\n            \n            injectable\n            IndustryService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/greetings/hello.service.ts\n            \n            injectable\n            HelloService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/storage/token/token.service.ts\n            \n            injectable\n            TokenService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/utils/local-storage.service.ts\n            \n            injectable\n            LocalStorageService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/utils/string.service.ts\n            \n            injectable\n            StringService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/app/types/components/modetype.ts\n            \n            function\n            getClassMode\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/types/components/modetype.ts\n            \n            type alias\n            ModeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/types/http/body/LoginRequest.ts\n            \n            interface\n            LoginRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/types/http/body/RegisterCandidateRequest.ts\n            \n            interface\n            RegisterCandidateRequest\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/types/http/body/RegisterCompanyRequest.ts\n            \n            interface\n            RegisterCompanyRequest\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/types/http/body/RegisterRequest.ts\n            \n            interface\n            RegisterRequest\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/types/http/response/MessageResponse.ts\n            \n            interface\n            MessageResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/types/http/response/TokenResponse.ts\n            \n            interface\n            TokenResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/types/services/classes/http/http.service.ts\n            \n            class\n            HttpService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/types/services/classes/utils/local-storage-item.service.ts\n            \n            class\n            LocalStorageItemService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/types/services/form/form.service.ts\n            \n            interface\n            IFormService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/types/services/interfaces/http/get-all-http.service.ts\n            \n            interface\n            IGetAllHttpService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/types/services/interfaces/http/get-http.service.ts\n            \n            interface\n            IGetHttpService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/types/services/interfaces/http/http.service.ts\n            \n            interface\n            IHttpService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/types/services/interfaces/http/login-http.service.ts\n            \n            interface\n            ILoginHttpService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/types/services/interfaces/http/register-http.service.ts\n            \n            interface\n            IRegisterHttpService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/app/types/services/interfaces/http/response-object-type.ts\n            \n            type alias\n            ResponseObjectType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/types/services/interfaces/local/has-local-storage.service.ts\n            \n            interface\n            IHasLocalStorage\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/types/services/interfaces/local/local-storage-item.service.ts\n            \n            interface\n            ILocalStorageItemService\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/common : ^20.0.6\n        \n            @angular/compiler : ^20.0.6\n        \n            @angular/core : ^20.0.6\n        \n            @angular/forms : ^20.0.6\n        \n            @angular/platform-browser : ^20.0.6\n        \n            @angular/router : ^20.0.6\n        \n            @fortawesome/fontawesome-free : ^6.7.2\n        \n            bulma : ^1.0.4\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getClassMode   (src/.../modetype.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/types/components/modetype.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getClassMode\n                        \n                    \n                \n            \n            \n                \ngetClassMode(mode: ModeType)\n                \n            \n\n\n\n\n            \n                \n                        getClassMode is a function that returns the corresponding Bulma class\nfor a given mode.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mode\n                                            \n                                                            ModeType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe mode for which the class is to be returned.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nJaVagas - Frontend (Angular)\nBem-vindo(a) ao frontend do projeto JaVagas! Esta seção da documentação é dedicada à aplicação construída com Angular e TypeScript, responsável pela interface do usuário e pela interação direta com o backend.\n\n🚀 Sobre o Frontend\nO frontend do JaVagas oferece uma experiência intuitiva e responsiva para usuários que buscam vagas ou empresas que desejam gerenciar suas oportunidades de emprego. Desenvolvido com Angular, ele consome a API RESTful do nosso backend (Java Spring Boot) para oferecer todas as funcionalidades de uma plataforma de recrutamento.\n⚙️ Tecnologias Principais\nEste projeto frontend utiliza as seguintes tecnologias:\n\n\n\n\n\n\n\n\n\n\n🛠️ Configuração e Execução\nPara configurar e executar o frontend do JaVagas localmente, siga os passos abaixo:\nPré-requisitos\nCertifique-se de ter as seguintes ferramentas instaladas em sua máquina:\n\nNode.js (versão LTS recomendada)\nnpm (gerenciador de pacotes do Node.js, geralmente vem com o Node.js)\nAngular CLI: Instale-o globalmente via npm, caso ainda não o tenha:Example :npm install -g @angular/cli\n\nInstalação\n\nClone o repositório: Se você ainda não clonou o repositório completo do JaVagas, faça-o primeiro. Navegue até a pasta do frontend (/frontend ou a pasta específica onde o código Angular está).\nInstale as dependências: Dentro do diretório raiz do projeto Angular, execute o seguinte comando para instalar todas as dependências:Example :npm install\n\nExecução\nApós a instalação das dependências, você pode iniciar o servidor de desenvolvimento do Angular:\nExample :ng serveEste comando irá compilar a aplicação e iniciará um servidor de desenvolvimento. A aplicação estará acessível em http://localhost:4200/ (ou outra porta, se 4200 estiver em uso).\n🐳 Docker\nO frontend do JaVagas pode ser facilmente conteinerizado usando Docker, oferecendo portabilidade e um ambiente de execução consistente. Temos duas abordagens para construir a imagem Docker:\n1. Build Local e Imagem Padrão\nEsta abordagem requer que você compile o projeto Angular localmente antes de construir a imagem Docker.\n\nCompile o projeto Angular:Example :ng build --configuration productionEste comando irá gerar os arquivos de produção otimizados na pasta dist/.\nConstrua a imagem Docker:\nNavegue até a pasta onde está o Dockerfile principal (geralmente na raiz do frontend) e execute:Example :docker build -t javagas-client .\n\n2. Build via Dockerfile.build (Multi-stage Build)\nPara uma experiência mais isolada, você pode usar o Dockerfile.build. Este Dockerfile compila o projeto Angular dentro de um contêiner, eliminando a necessidade de ter Node.js, npm ou Angular CLI instalados em sua máquina local, exceto o próprio Docker.\nExample :docker build -f Dockerfile.build -t javagas-client-builded .Vantagem: Não requer ferramentas locais, ideal para ambientes de CI/CD.Desvantagem: O processo de compilação pode ser mais demorado, pois inclui a instalação das dependências do Node.js dentro do contêiner.\nImagem Distroless com NGINX\nA imagem Docker final é construída sobre uma base NGINX distroless.\n\nO que é \"Distroless\"? Imagens distroless são imagens Docker muito pequenas que contêm apenas o seu aplicativo e suas dependências de tempo de execução, e nada mais. Elas não incluem um gerenciador de pacotes, um shell (como Bash ou Sh), ou qualquer outra ferramenta que normalmente viria em uma distribuição Linux completa.\nVantagens:\nSegurança aprimorada: A superfície de ataque é drasticamente reduzida, pois não há ferramentas desnecessárias que possam ser exploradas por vulnerabilidades.\nTamanho reduzido: Isso leva a downloads e uploads mais rápidos, menor consumo de armazenamento e inicialização mais veloz de contêineres.\nMenos vulnerabilidades: Com menos software instalado, há menos chances de vulnerabilidades de segurança serem descobertas e exploradas.\n\n\n\nImagem Disponível no Docker Hub\nVocê também pode puxar a imagem do frontend diretamente do Docker Hub:\nExample :docker pull rickallan/javagas-client:latestApós puxar a imagem, você pode executá-la:\nExample :docker run -p 80:80 -p 443:443 rickallan/javagas-client:latestA aplicação estará acessível em http://localhost/.\n🧪 Testes\nEste projeto utiliza Jest para testes unitários e de integração no frontend. Para executar os testes, utilize o seguinte comando:\nExample :npm run testOs tests atuais cobrem cerca de 93% das linhas. Possui getters and setters que não são cobertos pelos tests, sendo estes grande parte dos faltantes.\n📄 Geração de Documentação (CompoDoc)\nA documentação do código Angular pode ser gerada usando CompoDoc. Para gerar novamente a documentação, utilize o comando abaixo:\nExample :npm run compodoc:build-and-serveTodo o código está sendo documentado conforme seu desenvolvimento.\nAtualmente, o código esté totalmente coberto por documentação, de acordo com o CompoDoc coverage.\n📋 Roteiro Específico do Frontend\nA seguir, um detalhamento das próximas etapas e funcionalidades a serem implementadas no frontend:\nConcluídos (Frontend):\n\n Ambiente FrontEnd Angular;\n Login e Registro de Usuários;\n Geração de Documentação (TSDocs).\n\nEm Desenvolvimento / A Fazer (Frontend):\n\n Verificação por email (integração com backend);\n Recuperação de Senha (integração com backend);\n Candidate Dashboard;\n Company Dashboard;\n Tela de pesquisa de Jobs;\n Candidate Application (Aplicação em Vagas);\n Company Job Show Screen com Applications;\n Home Screen.\n\n🤝 Contribuição\nEste é um projeto de treinamento e estamos sempre abertos a contribuições e melhorias. Sinta-se à vontade para explorar o código, enviar pull requests ou abrir issues.\n📧 Contato\nPara dúvidas ou sugestões, entre em contato com os desenvolvedores do projeto\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    14 Components\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    17 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.2.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            _FieldType   (src/.../field.component.ts)\n                        \n                        \n                            FieldTypes   (src/.../field.component.ts)\n                        \n                        \n                            ModeType   (src/.../modetype.ts)\n                        \n                        \n                            ResponseObjectType   (src/.../response-object-type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/components/form/field/field.component.ts\n    \n    \n        \n            \n                \n                    \n                    _FieldType\n                \n            \n            \n                \n                    _FieldType is a type that represents the different HTML elements that can be used in a form field.\nItSpec includes HTMLSelectElement, HTMLInputElement, and HTMLTextAreaElement.\n\n                \n            \n            \n                \n                        HTMLSelectElement | HTMLInputElement | HTMLTextAreaElement\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FieldTypes\n                \n            \n            \n                \n                    FieldTypes is a type that represents the different services of fields that can be used in a form.\nItSpec includes text, email, password, number, textarea, and select.\n\n                \n            \n            \n                \n                        \"text\" | \"email\" | \"password\" | \"number\" | \"textarea\" | \"select\" | \"custom\" | \"url\"\n\n                \n            \n        \n    \n    src/app/types/components/modetype.ts\n    \n    \n        \n            \n                \n                    \n                    ModeType\n                \n            \n            \n                \n                    ModeType is a type that represents the different modes of a field.\nItSpec includes danger, warning, success, info, and default.\n\n                \n            \n            \n                \n                        \"DANGER\" | \"WARNING\" | \"SUCCESS\" | \"INFO\" | \"DEFAULT\"\n\n                \n            \n        \n    \n    src/app/types/services/interfaces/http/response-object-type.ts\n    \n    \n        \n            \n                \n                    \n                    ResponseObjectType\n                \n            \n            \n                \n                    This is a TypeScript type definition for the response object type used in HTTP services.\nUsed principally to test response objects in HTTP requests.\nIt includes various primitive types, complex objects, arrays, and null values.\n\n                \n            \n            \n                \n                        string | number | boolean | Object | ArrayBuffer | Blob | (string | number | boolean | Object | null)[] | null\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideBrowserGlobalErrorListeners(),\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideHttpClient(withFetch()),\n  ],\n}\n                    \n                \n\n            \n                \n                    Application configuration for the Angular application.\nSet up all providers that is used in whole application.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
